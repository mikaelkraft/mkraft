[
  {
    "filePath": "/workspaces/mkraft/.eslintrc.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/body.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/db.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 31,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 31,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [877, 947], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const pg = require('pg');\nconst { Pool } = pg;\n\n// Single shared pool across all serverless invocations in this runtime\nlet pool;\n\nfunction getPool() {\n  if (!pool) {\n    const connectionString = process.env.POSTGRES_URL || process.env.DATABASE_URL;\n    if (!connectionString) {\n      throw new Error('POSTGRES_URL is not set');\n    }\n\n    pool = new Pool({\n      connectionString,\n      ssl: process.env.POSTGRES_SSL === 'true' ? { rejectUnauthorized: false } : false,\n      max: Number(process.env.PG_POOL_MAX || 5),\n      idleTimeoutMillis: Number(process.env.PG_IDLE_TIMEOUT || 30000)\n    });\n  }\n  return pool;\n}\n\nasync function query(text, params) {\n  const client = await getPool().connect();\n  try {\n    const start = Date.now();\n    const res = await client.query(text, params);\n    const duration = Date.now() - start;\n    if (process.env.LOG_SQL === 'true') {\n      console.log('executed query', { text, duration, rows: res.rowCount });\n    }\n    return res;\n  } finally {\n    client.release();\n  }\n}\n\nmodule.exports = { getPool, query };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/keys.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/log.js",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 20,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [553, 591], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 23,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [671, 709], "text": " " }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 27,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 27,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [811, 840], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "// Simple structured logger\n// Usage: log.info('message', { contextKey: 'value' })\nconst levels = ['debug', 'info', 'warn', 'error'];\n\nfunction base(fields) {\n  const ts = new Date().toISOString();\n  return { ts, ...fields };\n}\n\nfunction serialize(obj) {\n  try { return JSON.stringify(obj); } catch { return '{\"error\":\"log_serialize_failed\"}'; }\n}\n\nconst log = {};\nlevels.forEach(level => {\n  log[level] = (msg, meta = {}) => {\n    // Avoid logging undefined / circular\n    const line = base({ level, msg, ...meta });\n    if (level === 'error') {\n      // eslint-disable-next-line no-console\n      console.error(serialize(line));\n    } else if (level === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn(serialize(line));\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(serialize(line));\n    }\n  };\n});\n\nmodule.exports = { log };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/metrics.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/profile.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/rateLimit.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 23,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Simple in-memory rate limiter (per key) for low-volume deployments.\n// Not suitable for multi-instance horizontal scaling (would need Redis or similar).\n\nconst buckets = new Map();\n\nfunction rateLimit({ windowMs = 60_000, max = 30, keyGenerator } = {}) {\n  return (req, res, next) => {\n    try {\n      const now = Date.now();\n      const key = keyGenerator ? keyGenerator(req) : (req.headers['x-forwarded-for'] || req.socket.remoteAddress || 'unknown');\n      if (!buckets.has(key)) {\n        buckets.set(key, []);\n      }\n      const arr = buckets.get(key);\n      // prune\n      while (arr.length && (now - arr[0]) > windowMs) arr.shift();\n      if (arr.length >= max) {\n        res.status(429).setHeader('content-type','application/json').end(JSON.stringify({ error: 'Rate limit exceeded' }));\n        return;\n      }\n      arr.push(now);\n      next();\n    } catch (e) {\n      next(); // fail-open\n    }\n  };\n}\n\nmodule.exports = { rateLimit };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/respond.js",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 55,
        "column": 5,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [1911, 1949], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "function json(res, body, status = 200) {\n  res.status(status).setHeader('content-type', 'application/json; charset=utf-8');\n  res.end(JSON.stringify(body));\n}\n\nfunction error(res, message, status = 400, extra = {}) {\n  json(res, { error: message, ...extra }, status);\n}\n\nfunction resolveBaseUrl() {\n  // Priority order:\n  // 1. Explicit SITE_BASE_URL (full origin, e.g. https://example.com)\n  // 2. VERCEL_URL (host only) -> https://VERCEL_URL\n  // 3. Render/Netlify style PUBLIC_BASE_URL if later added\n  // 4. Fallback localhost (protocol required by URL API)\n  if (process.env.SITE_BASE_URL) return process.env.SITE_BASE_URL.replace(/\\/$/, '');\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL.replace(/\\/$/, '')}`;\n  if (process.env.PUBLIC_BASE_URL) return process.env.PUBLIC_BASE_URL.replace(/\\/$/, '');\n  return 'http://localhost';\n}\n\nfunction getUrl(req) {\n  const base = resolveBaseUrl();\n  try {\n    return new URL(req.url, base);\n  } catch {\n    const query = req.query || {};\n    const params = new URLSearchParams(query);\n    return new URL(`${req.url}?${params.toString()}`, base);\n  }\n}\n\n// Build a canonical absolute URL for SEO (path should start with '/' or be a URL object/string)\nfunction buildCanonicalUrl(pathOrUrl) {\n  const base = resolveBaseUrl();\n  let target;\n  try {\n    if (typeof pathOrUrl === 'string' && !/^https?:\\/\\//i.test(pathOrUrl)) {\n      // Ensure leading slash for relative paths\n      const p = pathOrUrl.startsWith('/') ? pathOrUrl : '/' + pathOrUrl;\n      target = new URL(p, base).toString();\n    } else {\n      target = new URL(pathOrUrl, base).toString();\n    }\n  } catch {\n    target = base; // fallback\n  }\n  return target.replace(/\\/$/, '');\n}\n\n// Emit a runtime warning if production uses localhost base (misconfiguration)\nif (process.env.NODE_ENV === 'production') {\n  const b = resolveBaseUrl();\n  if (/localhost(:\\d+)?$/.test(b)) {\n    // eslint-disable-next-line no-console\n    console.warn('[config-warning] SITE_BASE_URL/VERCEL_URL not set; canonical URLs will use localhost.');\n  }\n}\n\nmodule.exports = { json, error, getUrl, resolveBaseUrl, buildCanonicalUrl };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/responseWrap.js",
    "messages": [
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'crypto' is already defined as a built-in global variable.",
        "line": 1,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "redeclaredAsBuiltin",
        "endLine": 1,
        "endColumn": 13
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'bodyBuffer' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const crypto = require('crypto');\nconst { camelize } = require('./keys.js');\n\nfunction computeEtag(payload) {\n  return 'W/\"' + crypto.createHash('sha1').update(payload).digest('base64').slice(0,27) + '\"';\n}\n\n// Wrap a serverless handler to post-process JSON responses into camelCase and add ETag caching.\nfunction withTransform(handler, { camel = true, cacheSeconds = 0 } = {}) {\n  return async (req, res) => {\n    const originalJson = res.json;\n    const originalEnd = res.end;\n    let bodyBuffer = null;\n    // Monkey patch\n    res.json = function (obj) {\n      let payloadObj = obj;\n      if (camel && obj && typeof obj === 'object') {\n        if (Array.isArray(obj)) payloadObj = obj.map(o => (o && typeof o === 'object' && !Array.isArray(o)) ? camelize(o, true) : o);\n        else payloadObj = camelize(obj, true);\n      }\n      const jsonStr = JSON.stringify(payloadObj);\n      bodyBuffer = Buffer.from(jsonStr);\n      const etag = computeEtag(jsonStr);\n      res.setHeader('ETag', etag);\n      if (cacheSeconds > 0) {\n        res.setHeader('Cache-Control', `public, max-age=${cacheSeconds}`);\n      } else {\n        res.setHeader('Cache-Control', 'no-store');\n      }\n      // Conditional request support\n      if (req.headers['if-none-match'] === etag) {\n        res.statusCode = 304;\n        return originalEnd.call(res);\n      }\n      return originalJson.call(res, payloadObj);\n    };\n    return handler(req, res);\n  };\n}\n\nmodule.exports = { withTransform };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/_lib/sanitize.js",
    "messages": [
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 21,
        "column": 27,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 21,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [1192, 1193], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [1192, 1192], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Minimal HTML sanitizer (simple whitelist). For stronger needs, add `sanitize-html` dependency.\n// Allows basic formatting tags and strips event handlers / scripts.\n\nconst BASE_ALLOWED_TAGS = ['b','i','em','strong','p','br','ul','ol','li','pre','code','blockquote','h1','h2','h3','h4','h5','h6','a'];\nconst BASE_ALLOWED_ATTR = { a: ['href','title','target','rel'] };\n\nfunction sanitize(html = '', opts = {}) {\n  if (!html || typeof html !== 'string') return '';\n  const allowVideo = !!opts.allowVideo;\n  const ALLOWED_TAGS = allowVideo ? [...BASE_ALLOWED_TAGS, 'iframe'] : BASE_ALLOWED_TAGS;\n  const ALLOWED_ATTR = { ...BASE_ALLOWED_ATTR };\n  if (allowVideo) ALLOWED_ATTR.iframe = ['src','title','allow','allowfullscreen','width','height','frameborder'];\n  // Remove script/style tags entirely\n  let out = html.replace(/<\\/(script|style)>/gi,'').replace(/<(script|style)[^>]*>[\\s\\S]*?<\\/\\1>/gi,'');\n  // Remove on* handlers and javascript: URLs\n  out = out.replace(/on\\w+\\s*=\\s*\"[^\"]*\"/gi,'')\n           .replace(/on\\w+\\s*=\\s*'[^']*'/gi,'')\n           .replace(/on\\w+\\s*=\\s*[^\\s>]+/gi,'')\n           .replace(/javascript:/gi,'');\n  // Strip tags not in allow list\n  out = out.replace(/<([^>\\/\\s]+)([^>]*)>/gi, (m, tag, attrs) => {\n    const t = tag.toLowerCase();\n    if (!ALLOWED_TAGS.includes(t)) return '';\n    if (!attrs) return `<${t}>`;\n    const rawAttrs = (attrs.match(/\\s+[a-zA-Z:-]+\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+)/g) || []);\n    let cleanAttrs = rawAttrs\n      .map(a => a.trim())\n      .filter(a => {\n        const eq = a.indexOf('=');\n        if (eq === -1) return false;\n        const name = a.slice(0, eq).toLowerCase();\n        if (!ALLOWED_ATTR[t]) return false;\n        if (!ALLOWED_ATTR[t].includes(name)) return false;\n        return true;\n      })\n      .join(' ');\n    // Additional src whitelist for iframes (YouTube/Vimeo only)\n    if (t === 'iframe') {\n      const srcMatch = /src=(\"([^\"]*)\"|'([^']*)')/.exec(attrs);\n      const srcVal = srcMatch ? (srcMatch[2] || srcMatch[3] || '') : '';\n      const allowed = /^(https:\\/\\/(www\\.)?(youtube\\.com|youtu\\.be|player\\.vimeo\\.com)\\/)/i.test(srcVal);\n      if (!allowed) return ''; // strip entire iframe if not whitelisted\n      // Force rel=\"noopener\" not relevant for iframe; ensure no javascript: encoded\n        // Sanitize allow attribute to a curated subset\n        cleanAttrs = cleanAttrs.replace(/allow=(\"[^\"]*\"|'[^']*')/gi, (m) => {\n          const val = m.split('=')[1].replace(/^[\"']|[\"']$/g,'');\n          const features = val.split(/;|,/).map(v => v.trim().toLowerCase());\n          const allowedFeatures = ['accelerometer','autoplay','clipboard-write','encrypted-media','gyroscope','picture-in-picture'];\n          const filtered = features.filter(f => allowedFeatures.includes(f));\n          return filtered.length ? `allow=\"${filtered.join('; ')}\"` : '';\n        });\n    }\n    return `<${t}${cleanAttrs ? ' ' + cleanAttrs : ''}>`;\n  });\n  // Remove orphan closing tags for disallowed iframes or others (simple pass)\n  if (!allowVideo) {\n    out = out.replace(/<\\/iframe>/gi, '');\n  }\n  // Close tags that are self-closing incorrectly not handled here (lightweight)\n  return out;\n}\n\nmodule.exports = { sanitize };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/admin/users/ban.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/admin/users/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/admin/users/warn.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/by-slug.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/index.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'getUserWithRole' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "getUserWithRole" },
            "fix": { "range": [2230, 2247], "text": "" },
            "desc": "Remove unused variable 'getUserWithRole'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'slugPart' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 138,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { json, error, getUrl } = require('../_lib/respond.js');\nconst { query } = require('../_lib/db.js');\nconst { requireAdmin } = require('../_lib/auth.js');\nconst { getJsonBody } = require('../_lib/body.js');\nconst { ensureUserProfile } = require('../_lib/profile.js');\nconst { sanitize } = require('../_lib/sanitize.js');\n\n// GET /api/blog?published=true&featured=true&limit=10\nmodule.exports = async function handler(req, res) {\n  try {\n    const url = getUrl(req);\n    const published = url.searchParams.get('published');\n    const featured = url.searchParams.get('featured');\n    const search = url.searchParams.get('search');\n    const category = url.searchParams.get('category');\n    const tag = url.searchParams.get('tag');\n\n    const conditions = [];\n    const params = [];\n    let i = 1;\n    if (published === 'true') conditions.push(\"status = 'published'\");\n    if (featured === 'true') conditions.push('featured = true');\n    if (category) {\n      conditions.push(`category = $${i++}`);\n      params.push(category);\n    }\n    if (search) {\n      conditions.push(`(title ILIKE $${i} OR excerpt ILIKE $${i + 1} OR content ILIKE $${i + 2})`);\n      const like = `%${search}%`;\n      params.push(like, like, like);\n      i += 3;\n    }\n    if (tag) {\n      conditions.push(`tags @> ARRAY[$${i}]::text[]`);\n      params.push(tag);\n      i += 1;\n    }\n\n    const where = conditions.length ? 'WHERE ' + conditions.join(' AND ') : '';\n\n    const sql = `\n      SELECT bp.*, \n             json_build_object('full_name', up.full_name, 'email', up.email, 'role', up.role) as author,\n             up.role as author_role\n      FROM wisdomintech.blog_posts bp\n      LEFT JOIN wisdomintech.user_profiles up ON up.id = bp.author_id\n      ${where}\n      ORDER BY bp.published_at DESC NULLS LAST\n      LIMIT $${i}\n    `;\n\n    const limit = Number(url.searchParams.get('limit') || 50);\n    params.push(limit);\n    if (req.method === 'GET') {\n      const { rows } = await query(sql, params);\n      return json(res, rows);\n    }\n\n    if (req.method === 'POST') {\n      // Allow publishers (flag gated) & admins. Publishers always forced to draft & cannot set featured/published directly.\n      const { requireAdmin, requirePublisherOrAdmin, getUserWithRole } = require('../_lib/auth.js');\n      const { rows: flagRows } = await query('SELECT enabled FROM wisdomintech.feature_flags WHERE flag_key = $1', ['publisher_program']);\n      const publisherProgramEnabled = !!flagRows.find(r => r.enabled);\n      let user = null;\n      if (publisherProgramEnabled) {\n        user = await requirePublisherOrAdmin(req, res);\n      } else {\n        user = await requireAdmin(req, res); // legacy behavior before flag on\n      }\n      if (!user) return;\n      if (user.banned) {\n        return error(res, 'Account banned', 403, { reason: user.ban_reason || 'policy_violation' });\n      }\n      await ensureUserProfile(user);\n  const body = await getJsonBody(req);\n  if (body.content) {\n    const { rows: settings } = await query('SELECT enable_video FROM wisdomintech.site_settings ORDER BY created_at DESC NULLS LAST LIMIT 1');\n    const allowVideo = !!settings[0]?.enable_video;\n    let processed = sanitize(body.content, { allowVideo });\n    if (allowVideo) {\n      // Wrap iframes in responsive container if not already wrapped\n      processed = processed.replace(/<iframe([^>]*)><\\/iframe>/g, '<iframe$1></iframe>'); // normalize empty\n      processed = processed.replace(/<iframe([^>]*)><\\/iframe>/g, '<iframe$1></iframe>');\n      processed = processed.replace(/<iframe([\\s\\S]*?)<\\/iframe>/g, (m) => {\n        if (/class=\"[^\"]*video-embed-container/.test(m)) return m; // already wrapped indirectly\n        return `<div class=\"video-embed-container\">${m}</div>`;\n      });\n    }\n    body.content = processed;\n  }\n      const slug = (body.slug && String(body.slug).trim()) ? String(body.slug).trim().toLowerCase().replace(/[^a-z0-9-]+/g,'-').replace(/(^-|-$)/g,'') : String(body.title || '').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');\n      let desiredStatus = body.status || 'draft';\n      let publishedAt = body.published_at ? new Date(body.published_at) : (desiredStatus === 'published' ? new Date() : null);\n      if (user.role === 'publisher' && publisherProgramEnabled) {\n        // Enforce draft for publishers, ignore attempts to publish or feature\n        desiredStatus = 'draft';\n        publishedAt = null;\n        body.featured = false;\n      }\n      // Auto-extract first <img> if featured_image missing\n      let autoFeatured = null;\n      if (!body.featured_image && body.content) {\n        const imgMatch = body.content.match(/<img[^>]*src=[\"']([^\"'>]+)[\"'][^>]*>/i);\n        if (imgMatch) autoFeatured = imgMatch[1];\n      }\n      const insertSql = `\n        INSERT INTO wisdomintech.blog_posts (\n          slug, title, excerpt, content, featured_image, source_url, tags, category, status, featured, author_id, published_at\n        ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)\n        RETURNING *\n      `;\n      const params = [slug, body.title || '', body.excerpt || null, body.content || null, body.featured_image || autoFeatured || null, body.source_url || null, body.tags || null, body.category || null, desiredStatus, !!body.featured, user.id, publishedAt];\n      const { rows } = await query(insertSql, params);\n      return json(res, rows[0], 201);\n    }\n\n    if (req.method === 'PUT') {\n      const user = await requireAdmin(req, res);\n      if (!user) return;\n      const id = url.searchParams.get('id');\n      if (!id) return error(res, 'id is required', 400);\n      const body = await getJsonBody(req);\n      // Capture existing row for revision BEFORE applying updates\n      try {\n        const existingRes = await query('SELECT * FROM wisdomintech.blog_posts WHERE id = $1', [id]);\n        if (existingRes.rows.length) {\n          const r = existingRes.rows[0];\n          await query(`\n            INSERT INTO wisdomintech.blog_post_revisions (\n              blog_post_id, title, excerpt, content, tags, category, status, featured, featured_image, source_url, author_id\n            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)\n          `, [r.id, r.title, r.excerpt, r.content, r.tags, r.category, r.status, r.featured, r.featured_image, r.source_url, r.author_id]);\n        }\n      } catch (revErr) {\n        // Non-fatal: log but continue update\n        console.error('revision_capture_failed', { id, message: revErr.message });\n      }\n      let slugPart = '';\n      const paramsUpdate = [id];\n      let i = 2;\n      const sets = [];\n      const setField = (col, val) => { sets.push(`${col} = $${i++}`); paramsUpdate.push(val); };\n      if (typeof body.slug === 'string') {\n        const slug = body.slug.trim().toLowerCase().replace(/[^a-z0-9-]+/g,'-').replace(/(^-|-$)/g,'');\n        setField('slug', slug);\n      } else if (body.title) {\n        const slug = String(body.title).toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');\n        setField('slug', slug);\n      }\n      if ('title' in body) setField('title', body.title);\n      if ('excerpt' in body) setField('excerpt', body.excerpt);\n  if ('content' in body) {\n        const { rows: settings2 } = await query('SELECT enable_video FROM wisdomintech.site_settings ORDER BY created_at DESC NULLS LAST LIMIT 1');\n        const allowVideo2 = !!settings2[0]?.enable_video;\n        if (body.content) {\n          let processed = sanitize(body.content, { allowVideo: allowVideo2 });\n          if (allowVideo2) {\n            processed = processed.replace(/<iframe([\\s\\S]*?)<\\/iframe>/g, (m) => {\n              if (/class=\"[^\"]*video-embed-container/.test(m)) return m;\n              return `<div class=\"video-embed-container\">${m}</div>`;\n            });\n          }\n          setField('content', processed);\n        } else {\n          setField('content', null);\n        }\n      }\n      if ('featured_image' in body) setField('featured_image', body.featured_image);\n      if ('source_url' in body) setField('source_url', body.source_url);\n      if ('tags' in body) setField('tags', body.tags);\n      if ('category' in body) setField('category', body.category);\n      if ('status' in body) setField('status', body.status);\n      if ('featured' in body) setField('featured', body.featured);\n      if ('published_at' in body) setField('published_at', body.published_at);\n      sets.push('updated_at = now()');\n      const updateSql = `UPDATE wisdomintech.blog_posts SET ${sets.join(', ')} WHERE id = $1 RETURNING *`;\n      const { rows } = await query(updateSql, paramsUpdate);\n      if (!rows.length) return error(res, 'Not found', 404);\n      return json(res, rows[0]);\n    }\n\n    if (req.method === 'DELETE') {\n      const user = await requireAdmin(req, res);\n      if (!user) return;\n      const id = url.searchParams.get('id');\n      if (!id) return error(res, 'id is required', 400);\n      await query('DELETE FROM wisdomintech.blog_posts WHERE id = $1', [id]);\n      return json(res, { success: true });\n    }\n\n    return error(res, 'Method not allowed', 405);\n  } catch (e) {\n    return error(res, 'Failed to load blog posts', 500, { detail: e.message });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/related.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/revision-diff.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/revisions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/blog/search.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/comments/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/comments/moderate.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/health/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/likes/toggle.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/media/index.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'verifyAuth' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "verifyAuth" },
            "fix": { "range": [119, 131], "text": "" },
            "desc": "Remove unused variable 'verifyAuth'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { json, error } = require('../_lib/respond.js');\nconst { query } = require('../_lib/db.js');\nconst { requireAdmin, verifyAuth } = require('../_lib/auth.js');\n\n// GET /api/media?limit=20&offset=0&tag=logo\n// (Phase 1: read-only listing; future phases add upload + metadata extraction.)\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') return error(res, 'Method not allowed', 405);\n    // Auth: allow only admin for now (can open later)\n    const admin = await requireAdmin(req, res);\n    if (!admin) return; // response already sent\n\n  const { resolveBaseUrl } = require('../_lib/respond.js');\n  const url = new URL(req.url, resolveBaseUrl());\n    const limit = Math.min(parseInt(url.searchParams.get('limit') || '20', 10), 100);\n    const offset = parseInt(url.searchParams.get('offset') || '0', 10);\n    const tag = url.searchParams.get('tag');\n    const params = [];\n    let where = '';\n    if (tag) {\n      params.push(tag);\n      where = `WHERE $${params.length} = ANY(tags)`;\n    }\n    params.push(limit, offset);\n    const { rows } = await query(\n      `SELECT id, url, mime_type, width, height, size_bytes, alt, tags, created_at\n       FROM wisdomintech.media_assets\n       ${where}\n       ORDER BY created_at DESC\n       LIMIT $${params.length - 1} OFFSET $${params.length}`,\n      params\n    );\n    return json(res, { items: rows, count: rows.length });\n  } catch (e) {\n    return error(res, 'Failed to list media assets', 500, { detail: e.message });\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/media/upload.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 52,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { getUser } = require('../_lib/auth');\nconst { jsonResponse } = require('../_lib/responseWrap');\nconst { getClient } = require('../_lib/db');\nconst { randomUUID } = require('crypto');\nconst formidable = require('formidable');\nconst sharp = require('sharp');\n\n// Accepted mime types (extend as needed)\nconst ACCEPTED = new Set([\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n  'image/gif'\n]);\n\nmodule.exports = async function handler(req, res) {\n  if (req.method !== 'POST') {\n    return jsonResponse(res, 405, { error: 'method_not_allowed' });\n  }\n\n  const user = await getUser(req);\n  if (!user || !user.is_admin) {\n    return jsonResponse(res, 403, { error: 'forbidden' });\n  }\n\n  const form = formidable({ multiples: false, maxFileSize: 5 * 1024 * 1024 }); // 5MB\n\n  try {\n    const { files, fields } = await new Promise((resolve, reject) => {\n      form.parse(req, (err, fields, files) => {\n        if (err) return reject(err);\n        resolve({ files, fields });\n      });\n    });\n\n    const file = files?.file;\n    if (!file) {\n      return jsonResponse(res, 400, { error: 'no_file' });\n    }\n\n    const mime = file.mimetype || file.type;\n    if (!ACCEPTED.has(mime)) {\n      return jsonResponse(res, 415, { error: 'unsupported_media_type' });\n    }\n\n    // Extract dimensions with sharp\n    let width = null, height = null;\n    try {\n      const meta = await sharp(file.filepath).metadata();\n      width = meta.width || null;\n      height = meta.height || null;\n    } catch (e) {\n      // Ignore dimension extraction errors\n    }\n\n    // TODO: integrate with actual storage (e.g. Supabase storage or S3)\n    // For now we simulate a stored path relative to /public/assets/images\n    const id = randomUUID();\n    const ext = mime === 'image/png' ? 'png' : mime === 'image/webp' ? 'webp' : mime === 'image/gif' ? 'gif' : 'jpg';\n    const filename = `${id}.${ext}`;\n    const fs = require('fs');\n    const path = require('path');\n    const destDir = path.join(process.cwd(), 'public', 'assets', 'images');\n    if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });\n    const destPath = path.join(destDir, filename);\n    await fs.promises.copyFile(file.filepath, destPath);\n\n    const url = `/assets/images/${filename}`;\n    const tagsRaw = fields.tags || '';\n    const tags = String(tagsRaw)\n      .split(',')\n      .map(t => t.trim())\n      .filter(Boolean);\n\n    const db = await getClient();\n    const insert = `\n      INSERT INTO wisdomintech.media_assets\n        (id, url, mime_type, width, height, tags, alt_text, created_by)\n      VALUES ($1,$2,$3,$4,$5,$6,$7,$8)\n      RETURNING id, url, mime_type, width, height, tags, alt_text, created_at;`;\n    const alt = fields.alt || null;\n    const result = await db.query(insert, [id, url, mime, width, height, tags, alt, user.id]);\n\n    return jsonResponse(res, 201, { asset: result.rows[0] });\n  } catch (err) {\n    return jsonResponse(res, 500, { error: 'upload_failed', detail: err.message });\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/newsletter/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/audit.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/avatar.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/fields.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/index.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'requireAdmin' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "requireAdmin" },
            "fix": { "range": [182, 196], "text": "" },
            "desc": "Remove unused variable 'requireAdmin'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'k' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 45,
        "column": 83,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "k" },
            "fix": { "range": [2020, 2021], "text": "" },
            "desc": "Remove unused variable 'k'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'k' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 87,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "k" },
            "fix": { "range": [4315, 4316], "text": "" },
            "desc": "Remove unused variable 'k'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { json, error, getUrl } = require('../_lib/respond.js');\nconst { query } = require('../_lib/db.js');\nconst { getJsonBody } = require('../_lib/body.js');\nconst { getUserWithRole, requireAdmin } = require('../_lib/auth.js');\n\n// Simple in-memory rate limit (process scoped). For production, replace with Redis.\nconst RL_WINDOW_MS = 60_000; // 1 min\nconst RL_MAX = 10; // 10 profile writes per minute per user\nconst rateMap = new Map();\n\nfunction checkRate(userId) {\n  const now = Date.now();\n  const bucket = rateMap.get(userId) || { ts: now, count: 0 };\n  if (now - bucket.ts > RL_WINDOW_MS) { bucket.ts = now; bucket.count = 0; }\n  bucket.count += 1;\n  rateMap.set(userId, bucket);\n  if (bucket.count > RL_MAX) return false;\n  return true;\n}\n\nasync function loadRules() {\n  const { rows } = await query('SELECT field_name, enabled, editable_roles, required FROM wisdomintech.profile_field_rules', []);\n  const map = {};\n  rows.forEach(r => { map[r.field_name] = r; });\n  return map;\n}\n\nmodule.exports = async function handler(req, res) {\n  try {\n    const url = getUrl(req);\n    if (req.method === 'GET') {\n      const me = await getUserWithRole(req);\n      if (!me) return error(res, 'Unauthorized', 401);\n      const targetId = url.searchParams.get('userId') && me.role === 'admin' ? url.searchParams.get('userId') : me.id;\n      const { rows } = await query(`SELECT id, email, full_name, avatar_url, role, bio, website_url, twitter_handle, github_handle, linkedin_handle, location, headline, profile_meta, banned, warning_count FROM wisdomintech.user_profiles WHERE id = $1`, [targetId]);\n      if (!rows.length) return error(res, 'Not found', 404);\n      const rules = await loadRules();\n      // Filter out disabled fields for non-admin\n      const profile = rows[0];\n      if (me.role !== 'admin') {\n        Object.keys(rules).forEach(field => {\n          if (!rules[field].enabled) delete profile[field];\n        });\n      }\n      return json(res, { profile, editable_fields: Object.entries(rules).filter(([k,v]) => v.enabled && v.editable_roles.includes(me.role)).map(([k]) => k) });\n    }\n    if (req.method === 'PUT') {\n      const me = await getUserWithRole(req);\n      if (!me) return error(res, 'Unauthorized', 401);\n      const body = await getJsonBody(req);\n      const rules = await loadRules();\n      const targetUserId = body.userId && me.role === 'admin' ? body.userId : me.id;\n      if (!checkRate(targetUserId)) return error(res, 'Rate limit exceeded', 429);\n      // Build update\n      const allowedFields = ['full_name','bio','website_url','twitter_handle','github_handle','linkedin_handle','location','headline','profile_meta','avatar_url'];\n      const sets = []; const params = [targetUserId]; let i = 2;\n      const changed = [];\n      // Load existing for audit\n      const { rows: existingRows } = await query('SELECT * FROM wisdomintech.user_profiles WHERE id = $1', [targetUserId]);\n      const existing = existingRows[0] || {};\n      // Normalization helpers\n      const normUrl = (u) => {\n        if (!u) return u;\n        let v = String(u).trim();\n        if (!/^https?:\\/\\//i.test(v)) v = 'https://' + v; // enforce protocol\n        return v.slice(0, 500);\n      };\n      const normHandle = (h) => h ? String(h).trim().replace(/^@+/, '').slice(0,50) : h;\n      for (const f of allowedFields) {\n        if (!(f in body)) continue;\n        const rule = rules[f];\n        if (!rule || !rule.enabled) continue; // skip disabled entirely\n        if (me.role !== 'admin' && !(rule.editable_roles || []).includes(me.role)) continue;\n        let val = body[f];\n        if (f.endsWith('_handle')) val = normHandle(val);\n        if (f === 'website_url') val = normUrl(val);\n        if (f === 'avatar_url') val = normUrl(val);\n        if (typeof val === 'string') val = val.trim();\n        if (JSON.stringify(existing[f]) !== JSON.stringify(val)) {\n          changed.push({ field: f, old: existing[f], val });\n        }\n        sets.push(`${f} = $${i}`); params.push(val); i++;\n      }\n      if (!sets.length) return error(res, 'No editable fields in payload', 400);\n      // Required field enforcement (after applying user-intent but before update): ensure all required fields either already present or in payload\n      const missingRequired = Object.entries(rules)\n        .filter(([k,r]) => r.required && r.enabled)\n        .filter(([k]) => {\n          if (!allowedFields.includes(k)) return false; // not a managed field\n          const newVal = changed.find(c => c.field === k)?.val;\n          const finalVal = newVal !== undefined ? newVal : existing[k];\n          return finalVal == null || finalVal === '';\n        })\n        .map(([k]) => k);\n      if (missingRequired.length) return error(res, 'Missing required fields', 400, { fields: missingRequired });\n      sets.push('updated_at = now()');\n      const sql = `UPDATE wisdomintech.user_profiles SET ${sets.join(', ')} WHERE id = $1 RETURNING id, email, full_name, avatar_url, role, bio, website_url, twitter_handle, github_handle, linkedin_handle, location, headline, profile_meta`;\n      const { rows } = await query(sql, params);\n      if (!rows.length) return error(res, 'Not found', 404);\n      // Audit log inserts\n      for (const c of changed) {\n        await query(`INSERT INTO wisdomintech.profile_change_events (user_id, actor_id, field_name, old_value, new_value) VALUES ($1,$2,$3,$4,$5)`, [targetUserId, me.id, c.field, (c.old == null ? null : String(c.old).slice(0,1000)), (c.val == null ? null : (typeof c.val === 'string' ? c.val.slice(0,1000) : JSON.stringify(c.val).slice(0,1000)))]);\n      }\n      return json(res, rows[0]);\n    }\n    return error(res, 'Method not allowed', 405);\n  } catch (e) {\n    return error(res, 'Failed to process profile', 500, { detail: e.message });\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/publisher-approval.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 21,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { json, error } = require('../_lib/respond.js');\nconst { query } = require('../_lib/db.js');\nconst { requireAdmin } = require('../_lib/auth.js');\nconst { getJsonBody } = require('../_lib/body.js');\nconst { log } = require('../_lib/log.js');\n\n// POST { user_id, action: 'approve'|'reject' }\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'POST') return error(res, 'Method not allowed', 405);\n    const admin = await requireAdmin(req, res);\n    if (!admin) return;\n    const body = await getJsonBody(req);\n    const { user_id, action } = body;\n    if (!user_id || !['approve','reject'].includes(action)) return error(res, 'Invalid payload', 400);\n    // Capture previous state for auditing\n    let previous = null;\n    try {\n      const prevRes = await query('SELECT id, email, role, publisher_request_status FROM wisdomintech.user_profiles WHERE id = $1', [user_id]);\n      previous = prevRes.rows[0] || null;\n    } catch (e) {\n      // non-fatal; continue\n    }\n    let sql, params;\n    if (action === 'approve') {\n      sql = `UPDATE wisdomintech.user_profiles\n             SET role = 'publisher', publisher_request_status = 'approved', role_updated_at = now()\n             WHERE id = $1\n             RETURNING id, email, role, publisher_request_status`;\n      params = [user_id];\n    } else {\n      sql = `UPDATE wisdomintech.user_profiles\n             SET publisher_request_status = 'rejected'\n             WHERE id = $1\n             RETURNING id, email, role, publisher_request_status`;\n      params = [user_id];\n    }\n    const { rows } = await query(sql, params);\n    if (!rows.length) return error(res, 'Not found', 404);\n    const updated = rows[0];\n    // Structured audit log\n    log.info('publisher_request_moderated', {\n      action,\n      moderator_id: admin.id,\n      moderator_email: admin.email,\n      target_user_id: updated.id,\n      target_email: updated.email,\n      previous_role: previous?.role || null,\n      new_role: updated.role,\n      previous_status: previous?.publisher_request_status || null,\n      new_status: updated.publisher_request_status,\n      requestId: req.id\n    });\n    return json(res, updated);\n  } catch (e) {\n    log.error('publisher_request_moderated_error', { err: e.message, stack: e.stack, requestId: req.id });\n    return error(res, 'Failed to process approval', 500, { detail: e.message });\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/publisher-request.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/profile/publisher-requests.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/projects/by-id.js",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: 'import' and 'export' may appear only with 'sourceType: module'",
        "line": 1,
        "column": 1
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json, error, getUrl } from '../_lib/respond.js';\nimport { query } from '../_lib/db.js';\n\n// GET /api/projects/by-id?id=uuid\nexport default async function handler(req, res) {\n  try {\n    const url = getUrl(req);\n    const id = url.searchParams.get('id');\n    if (!id) return error(res, 'id is required');\n\n    const sql = `\n      SELECT p.*, \n             json_build_object('full_name', up.full_name, 'email', up.email) as author\n      FROM wisdomintech.projects p\n      LEFT JOIN wisdomintech.user_profiles up ON up.id = p.author_id\n      WHERE p.id = $1\n      LIMIT 1\n    `;\n\n    const { rows } = await query(sql, [id]);\n    if (!rows || rows.length === 0) return error(res, 'Not found', 404);\n    return json(res, rows[0]);\n  } catch (e) {\n    return error(res, 'Failed to load project', 500, { detail: e.message });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/projects/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/robots.txt.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 17,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { resolveBaseUrl } = require('./_lib/respond.js');\n\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') { res.statusCode = 405; res.end('Method Not Allowed'); return; }\n    const base = resolveBaseUrl();\n    const lines = [\n      'User-agent: *',\n      'Disallow:',\n      '',\n      `Sitemap: ${base}/sitemap.xml`\n    ];\n    res.statusCode = 200;\n    res.setHeader('content-type', 'text/plain; charset=utf-8');\n    res.setHeader('cache-control', 'public, max-age=3600');\n    res.end(lines.join('\\n'));\n  } catch (e) {\n    res.statusCode = 500; res.setHeader('content-type', 'text/plain'); res.end('robots generation failed');\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/settings/features.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'getUrl' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "getUrl" },
            "fix": { "range": [19, 27], "text": "" },
            "desc": "Remove unused variable 'getUrl'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { json, error, getUrl } = require('../_lib/respond.js');\nconst { query } = require('../_lib/db.js');\nconst { requireAdmin } = require('../_lib/auth.js');\nconst { getJsonBody } = require('../_lib/body.js');\n\n// GET  /api/settings/features          -> list flags\n// POST /api/settings/features { flag_key, enabled?, note? } -> upsert (admin)\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method === 'GET') {\n      const { rows } = await query('SELECT flag_key, enabled, note, updated_at FROM wisdomintech.feature_flags ORDER BY flag_key');\n      return json(res, rows);\n    }\n    if (req.method === 'POST') {\n      const user = await requireAdmin(req, res);\n      if (!user) return; // auth helper already responded\n      const body = await getJsonBody(req);\n      const key = body.flag_key || body.key;\n      if (!key) return error(res, 'flag_key required', 400);\n      const enabled = typeof body.enabled === 'boolean' ? body.enabled : true;\n      const note = body.note || null;\n      const upsertSql = `\n        INSERT INTO wisdomintech.feature_flags (flag_key, enabled, note)\n        VALUES ($1,$2,$3)\n        ON CONFLICT (flag_key)\n        DO UPDATE SET enabled = EXCLUDED.enabled, note = COALESCE(EXCLUDED.note, wisdomintech.feature_flags.note), updated_at = now()\n        RETURNING flag_key, enabled, note, updated_at\n      `;\n      const { rows } = await query(upsertSql, [key, enabled, note]);\n      return json(res, rows[0], 201);\n    }\n    return error(res, 'Method not allowed', 405);\n  } catch (e) {\n    return error(res, 'Failed to process feature flags request', 500, { detail: e.message });\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/settings/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/settings/logo-upload.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/settings/logo.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/settings/og-upload.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 45,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { requireAdmin } = require(\"../_lib/auth\");\nconst respond = require(\"../_lib/respond\");\nconst db = require(\"../_lib/db\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nmodule.exports = async function handler(req, res) {\n  if (req.method !== \"PUT\") return respond.methodNotAllowed(res);\n  const user = await requireAdmin(req, res);\n  if (!user) return;\n  try {\n    const { image } = req.body || {};\n    if (!image || typeof image !== \"string\")\n      return respond.badRequest(res, \"Missing image\");\n\n    let finalUrl = null;\n    if (/^data:image\\//i.test(image)) {\n      // data URI\n      const m = image.match(\n        /^data:(image\\/(?:png|jpeg|jpg|webp));base64,(.+)$/i,\n      );\n      if (!m) return respond.badRequest(res, \"Invalid data URI\");\n      const ext = m[1].split(\"/\")[1].replace(\"jpeg\", \"jpg\");\n      const buf = Buffer.from(m[2], \"base64\");\n      const fileName = \"og-default.\" + ext;\n      const outDir = path.join(process.cwd(), \"public\", \"assets\", \"images\");\n      if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });\n      const outPath = path.join(outDir, fileName);\n      fs.writeFileSync(outPath, buf);\n      finalUrl = \"/assets/images/\" + fileName + \"?v=\" + Date.now();\n    } else if (/^https?:\\/\\//i.test(image)) {\n      finalUrl = image;\n    } else {\n      return respond.badRequest(\n        res,\n        \"Image must be https URL or base64 data URI\",\n      );\n    }\n\n    await db.query(\n      `UPDATE site_settings SET og_default_image_url = $1, updated_at = now() WHERE id = 1`,\n      [finalUrl],\n    );\n    return respond.ok(res, { og_default_image_url: finalUrl });\n  } catch (e) {\n    return respond.error(res, \"Failed to update OG image\");\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/sitemap-categories.xml.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 17,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { resolveBaseUrl } = require('./_lib/respond.js');\nconst { query } = require('./_lib/db.js');\n\nfunction xmlEscape(str) {\n  return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') { res.statusCode = 405; res.end('Method Not Allowed'); return; }\n    const base = resolveBaseUrl();\n    const { rows } = await query(`SELECT DISTINCT category FROM wisdomintech.blog_posts WHERE status='published' AND category IS NOT NULL LIMIT 500`);\n    const nowIso = new Date().toISOString();\n    const xml = rows.filter(r => r.category).map(r => `\\n  <url><loc>${xmlEscape(base + '/blog-content-hub?category=' + encodeURIComponent(r.category))}</loc><lastmod>${xmlEscape(nowIso)}</lastmod><changefreq>daily</changefreq><priority>0.50</priority></url>`).join('');\n    const body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">${xml}\\n</urlset>`;\n    res.statusCode = 200; res.setHeader('content-type', 'application/xml; charset=utf-8'); res.setHeader('cache-control', 'public, max-age=1800'); res.end(body);\n  } catch (e) {\n    res.statusCode = 500; res.setHeader('content-type', 'text/plain'); res.end('categories sitemap generation failed');\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/sitemap-posts.xml.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 34,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { resolveBaseUrl } = require('./_lib/respond.js');\nconst { query } = require('./_lib/db.js');\n\nfunction xmlEscape(str) {\n  return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\n// Engagement weighting heuristic: base 0.5 + scaled views + likes up to 0.9.\nfunction computePriority(row) {\n  const views = Number(row.view_count || row.views || 0);\n  const likes = Number(row.like_count || row.likes || 0);\n  // logarithmic dampening\n  const viewScore = views > 0 ? Math.log10(views + 1) / 4 : 0; // ~0.5 at 10k views\n  const likeScore = likes > 0 ? Math.log10(likes + 1) / 5 : 0; // smaller influence\n  const p = 0.5 + Math.min(0.4, viewScore + likeScore);\n  return p.toFixed(2);\n}\n\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') { res.statusCode = 405; res.end('Method Not Allowed'); return; }\n    const base = resolveBaseUrl();\n    const { rows } = await query(`SELECT slug, updated_at, created_at, view_count, like_count FROM wisdomintech.blog_posts WHERE status='published' ORDER BY updated_at DESC NULLS LAST LIMIT 5000`);\n    const nowIso = new Date().toISOString();\n    const xml = rows.map(r => {\n      const lastmod = (r.updated_at || r.created_at || nowIso).toISOString ? (r.updated_at || r.created_at || nowIso).toISOString() : (r.updated_at || r.created_at || nowIso);\n      return `\\n  <url><loc>${xmlEscape(base + '/blog/' + encodeURIComponent(r.slug))}</loc><lastmod>${xmlEscape(lastmod)}</lastmod><changefreq>weekly</changefreq><priority>${computePriority(r)}</priority></url>`;\n    }).join('');\n    const body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">${xml}\\n</urlset>`;\n    res.statusCode = 200;\n    res.setHeader('content-type', 'application/xml; charset=utf-8');\n    res.setHeader('cache-control', 'public, max-age=300');\n    res.end(body);\n  } catch (e) {\n    res.statusCode = 500; res.setHeader('content-type', 'text/plain'); res.end('posts sitemap generation failed');\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/sitemap-projects.xml.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 20,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { resolveBaseUrl } = require('./_lib/respond.js');\nconst { query } = require('./_lib/db.js');\n\nfunction xmlEscape(str) {\n  return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') { res.statusCode = 405; res.end('Method Not Allowed'); return; }\n    const base = resolveBaseUrl();\n    const { rows } = await query(`SELECT id, updated_at, created_at FROM wisdomintech.projects WHERE status='published' ORDER BY updated_at DESC NULLS LAST LIMIT 2000`);\n    const nowIso = new Date().toISOString();\n    const xml = rows.map(r => {\n      const lastmod = (r.updated_at || r.created_at || nowIso).toISOString ? (r.updated_at || r.created_at || nowIso).toISOString() : (r.updated_at || r.created_at || nowIso);\n      return `\\n  <url><loc>${xmlEscape(base + '/project/' + r.id)}</loc><lastmod>${xmlEscape(lastmod)}</lastmod><changefreq>weekly</changefreq><priority>0.55</priority></url>`;\n    }).join('');\n    const body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">${xml}\\n</urlset>`;\n    res.statusCode = 200; res.setHeader('content-type', 'application/xml; charset=utf-8'); res.setHeader('cache-control', 'public, max-age=600'); res.end(body);\n  } catch (e) {\n    res.statusCode = 500; res.setHeader('content-type', 'text/plain'); res.end('projects sitemap generation failed');\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/sitemap.xml.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 27,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { resolveBaseUrl } = require('./_lib/respond.js');\n\nfunction xmlEscape(str) {\n  return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\n// This endpoint now serves as a sitemap index referencing specialized sitemaps\n// to keep payloads small & allow differential cache TTLs per content type.\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'GET') { res.statusCode = 405; res.end('Method Not Allowed'); return; }\n    const base = resolveBaseUrl();\n    const now = new Date().toISOString();\n    const sitemaps = [\n      { loc: `${base}/sitemap-posts.xml`, lastmod: now },\n      { loc: `${base}/sitemap-projects.xml`, lastmod: now },\n      { loc: `${base}/sitemap-categories.xml`, lastmod: now }\n    ];\n    const body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n` +\n      `<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">` +\n      sitemaps.map(sm => `\\n  <sitemap><loc>${xmlEscape(sm.loc)}</loc><lastmod>${xmlEscape(sm.lastmod)}</lastmod></sitemap>`).join('') +\n      `\\n</sitemapindex>`;\n    res.statusCode = 200;\n    res.setHeader('content-type', 'application/xml; charset=utf-8');\n    res.setHeader('cache-control', 'public, max-age=300');\n    res.end(body);\n  } catch (e) {\n    res.statusCode = 500; res.setHeader('content-type', 'text/plain'); res.end('sitemap index generation failed');\n  }\n};",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/slides/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/slides/reorder.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/api/views/increment.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/server.js",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Identifier 'resolveBaseUrl' has already been declared",
        "line": 109,
        "column": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Simple Express adapter to run the serverless API locally or on any Node host\nrequire('dotenv').config();\nconst express = require('express');\nconst path = require('path');\nconst cors = require('cors');\nconst crypto = require('crypto');\n\nconst { withTransform } = require('./api/_lib/responseWrap.js');\nconst { log } = require('./api/_lib/log.js');\nconst { inc, observe } = require('./api/_lib/metrics.js');\nconst app = express();\napp.use(express.json());\napp.use(cors({ origin: true, credentials: true }));\n\n// Host mismatch warning (production only)\nconst { resolveBaseUrl } = require('./api/_lib/respond.js');\nif (process.env.NODE_ENV === 'production') {\n  const configured = (() => { try { return new URL(resolveBaseUrl()).host; } catch { return null; } })();\n  if (configured) {\n    app.use((req, res, next) => {\n      const host = (req.headers.host || '').split(',')[0].trim();\n      if (host && host !== configured) {\n        // eslint-disable-next-line no-console\n        console.warn(`[host-mismatch] incoming host \"${host}\" differs from configured base host \"${configured}\"`);\n      }\n      next();\n    });\n  }\n}\n\n// Request ID + metrics + access logging middleware (must precede routes)\napp.use((req, res, next) => {\n  const start = Date.now();\n  const requestId = req.headers['x-request-id'] || crypto.randomBytes(8).toString('hex');\n  req.id = requestId;\n  res.setHeader('x-request-id', requestId);\n  inc('requests_total');\n  inc(`method_${req.method.toLowerCase()}_total`);\n  res.on('finish', () => {\n    const ms = Date.now() - start;\n    observe('latency_ms', ms);\n    inc(`status_${res.statusCode}_total`);\n    log.info('access', {\n      requestId,\n      method: req.method,\n      path: req.originalUrl,\n      status: res.statusCode,\n      ms\n    });\n  });\n  next();\n});\n\n// Updated wrapper with structured logging & metrics\nconst wrap = (handler) => async (req, res) => {\n  try {\n    await handler(req, res);\n  } catch (e) {\n    inc('handler_errors_total');\n    log.error('handler_error', { requestId: req.id, err: e.message, stack: e.stack });\n    res.status(500).json({ error: 'Internal Server Error', detail: e.message, requestId: req.id });\n  }\n};\n\n// Mount API routes by reusing the serverless handlers\napp.all('/api/settings', wrap(withTransform(require('./api/settings/index.js'), { camel: true, cacheSeconds: 30 })));\napp.all('/api/settings/features', wrap(withTransform(require('./api/settings/features.js'), { camel: true, cacheSeconds: 5 })));\napp.all('/api/projects', wrap(withTransform(require('./api/projects/index.js'), { camel: true, cacheSeconds: 10 })));\napp.all('/api/projects/by-id', wrap(withTransform(require('./api/projects/by-id.js'), { camel: true, cacheSeconds: 10 })));\napp.all('/api/blog', wrap(withTransform(require('./api/blog/index.js'), { camel: true, cacheSeconds: 15 })));\napp.all('/api/blog/by-slug', wrap(withTransform(require('./api/blog/by-slug.js'), { camel: true, cacheSeconds: 60 })));\napp.all('/api/blog/related', wrap(withTransform(require('./api/blog/related.js'), { camel: true, cacheSeconds: 30 })));\napp.all('/api/blog/revisions', wrap(withTransform(require('./api/blog/revisions.js'), { camel: true })));\napp.all('/api/blog/search', wrap(withTransform(require('./api/blog/search.js'), { camel: true, cacheSeconds: 10 })));\napp.all('/api/slides', wrap(withTransform(require('./api/slides/index.js'), { camel: true, cacheSeconds: 30 })));\napp.all('/api/slides/reorder', wrap(require('./api/slides/reorder.js')));\napp.all('/api/comments', wrap(withTransform(require('./api/comments/index.js'), { camel: true })));\napp.all('/api/comments/moderate', wrap(withTransform(require('./api/comments/moderate.js'), { camel: true })));\napp.all('/api/likes/toggle', wrap(withTransform(require('./api/likes/toggle.js'), { camel: true })));\napp.all('/api/views/increment', wrap(withTransform(require('./api/views/increment.js'), { camel: true })));\napp.all('/api/newsletter', wrap(withTransform(require('./api/newsletter/index.js'), { camel: true })));\napp.all('/api/profile/avatar', wrap(withTransform(require('./api/profile/avatar.js'), { camel: true })));\napp.all('/api/media', wrap(withTransform(require('./api/media/index.js'), { camel: true })));\napp.all('/api/media/upload', wrap(withTransform(require('./api/media/upload.js'), { camel: true })));\napp.all('/api/health', wrap(require('./api/health/index.js')));\napp.get('/sitemap.xml', wrap(require('./api/sitemap.xml.js')));\n// Publisher program related routes\napp.all('/api/profile/publisher-request', wrap(withTransform(require('./api/profile/publisher-request.js'), { camel: true })));\napp.all('/api/profile/publisher-requests', wrap(withTransform(require('./api/profile/publisher-requests.js'), { camel: true })));\napp.all('/api/profile/publisher-approval', wrap(withTransform(require('./api/profile/publisher-approval.js'), { camel: true })));\n// User management (admin)\napp.all('/api/admin/users', wrap(withTransform(require('./api/admin/users/index.js'), { camel: true })));\napp.all('/api/admin/users/warn', wrap(withTransform(require('./api/admin/users/warn.js'), { camel: true })));\napp.all('/api/admin/users/ban', wrap(withTransform(require('./api/admin/users/ban.js'), { camel: true })));\n\n// Health check\napp.get('/healthz', (req, res) => res.json({ ok: true }));\n\n// Optionally serve the built frontend in production\nif (process.env.NODE_ENV === 'production') {\n  const buildDir = path.join(__dirname, 'build');\n  app.use(express.static(buildDir));\n  app.get('*', (req, res) => res.sendFile(path.join(buildDir, 'index.html')));\n}\n\nconst argPort = process.argv[2];\nconst rawPort = (argPort || process.env.API_PORT || process.env.PORT || '5000').toString().trim();\nconst PORT = Number.parseInt(rawPort, 10) || 5000;\nconst { resolveBaseUrl } = require('./api/_lib/respond.js');\napp.listen(PORT, () => {\n  const base = resolveBaseUrl();\n  console.log(`API server listening on ${base.replace(/\\/$/, '')}/ (port ${PORT})`);\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/App.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/Routes.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BrowserRouter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BrowserRouter" },
            "fix": { "range": [36, 50], "text": "" },
            "desc": "Remove unused variable 'BrowserRouter'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BrowserRouter' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "fix": { "range": [35, 50], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BrowserRouter" },
            "fix": { "range": [36, 50], "text": "" },
            "desc": "Remove unused variable 'BrowserRouter'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RouterRoutes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RouterRoutes" },
            "fix": { "range": [49, 73], "text": "" },
            "desc": "Remove unused variable 'RouterRoutes'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'RouterRoutes' is defined but never used.",
        "line": 2,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 47,
        "fix": { "range": [50, 74], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RouterRoutes" },
            "fix": { "range": [49, 73], "text": "" },
            "desc": "Remove unused variable 'RouterRoutes'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Route' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Route" },
            "fix": { "range": [73, 80], "text": "" },
            "desc": "Remove unused variable 'Route'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Route' is defined but never used.",
        "line": 2,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 54,
        "fix": { "range": [73, 80], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Route" },
            "fix": { "range": [73, 80], "text": "" },
            "desc": "Remove unused variable 'Route'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ScrollToTop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ScrollToTop" },
            "fix": { "range": [115, 132], "text": "" },
            "desc": "Remove unused variable 'ScrollToTop'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ScrollToTop' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 19,
        "fix": { "range": [108, 158], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ScrollToTop" },
            "fix": { "range": [115, 132], "text": "" },
            "desc": "Remove unused variable 'ScrollToTop'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ErrorBoundary' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ErrorBoundary" },
            "fix": { "range": [165, 184], "text": "" },
            "desc": "Remove unused variable 'ErrorBoundary'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ErrorBoundary' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 21,
        "fix": { "range": [158, 212], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ErrorBoundary" },
            "fix": { "range": [165, 184], "text": "" },
            "desc": "Remove unused variable 'ErrorBoundary'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'PortfolioHomeHero' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PortfolioHomeHero" },
            "fix": { "range": [244, 267], "text": "" },
            "desc": "Remove unused variable 'PortfolioHomeHero'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'PortfolioHomeHero' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 25,
        "fix": { "range": [237, 296], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PortfolioHomeHero" },
            "fix": { "range": [244, 267], "text": "" },
            "desc": "Remove unused variable 'PortfolioHomeHero'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectsPortfolioGrid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectsPortfolioGrid" },
            "fix": { "range": [303, 330], "text": "" },
            "desc": "Remove unused variable 'ProjectsPortfolioGrid'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectsPortfolioGrid' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 29,
        "fix": { "range": [296, 363], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectsPortfolioGrid" },
            "fix": { "range": [303, 330], "text": "" },
            "desc": "Remove unused variable 'ProjectsPortfolioGrid'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectDetail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectDetail" },
            "fix": { "range": [370, 389], "text": "" },
            "desc": "Remove unused variable 'ProjectDetail'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectDetail' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 21,
        "fix": { "range": [363, 413], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectDetail" },
            "fix": { "range": [370, 389], "text": "" },
            "desc": "Remove unused variable 'ProjectDetail'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BlogContentHub' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogContentHub" },
            "fix": { "range": [420, 440], "text": "" },
            "desc": "Remove unused variable 'BlogContentHub'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BlogContentHub' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 22,
        "fix": { "range": [413, 466], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogContentHub" },
            "fix": { "range": [420, 440], "text": "" },
            "desc": "Remove unused variable 'BlogContentHub'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BlogPost' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogPost" },
            "fix": { "range": [473, 487], "text": "" },
            "desc": "Remove unused variable 'BlogPost'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BlogPost' is defined but never used.",
        "line": 10,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 16,
        "fix": { "range": [466, 506], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogPost" },
            "fix": { "range": [473, 487], "text": "" },
            "desc": "Remove unused variable 'BlogPost'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'SearchResultsPage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchResultsPage" },
            "fix": { "range": [513, 536], "text": "" },
            "desc": "Remove unused variable 'SearchResultsPage'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'SearchResultsPage' is defined but never used.",
        "line": 11,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 25,
        "fix": { "range": [506, 552], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchResultsPage" },
            "fix": { "range": [513, 536], "text": "" },
            "desc": "Remove unused variable 'SearchResultsPage'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Documentation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 12,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Documentation" },
            "fix": { "range": [559, 578], "text": "" },
            "desc": "Remove unused variable 'Documentation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Documentation' is defined but never used.",
        "line": 12,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 21,
        "fix": { "range": [552, 601], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Documentation" },
            "fix": { "range": [559, 578], "text": "" },
            "desc": "Remove unused variable 'Documentation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'AdminDashboardContentManagement' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AdminDashboardContentManagement" },
            "fix": { "range": [608, 645], "text": "" },
            "desc": "Remove unused variable 'AdminDashboardContentManagement'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'AdminDashboardContentManagement' is defined but never used.",
        "line": 13,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 39,
        "fix": { "range": [601, 689], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AdminDashboardContentManagement" },
            "fix": { "range": [608, 645], "text": "" },
            "desc": "Remove unused variable 'AdminDashboardContentManagement'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'MediaLibrary' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "MediaLibrary" },
            "fix": { "range": [696, 714], "text": "" },
            "desc": "Remove unused variable 'MediaLibrary'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'MediaLibrary' is defined but never used.",
        "line": 14,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 20,
        "fix": { "range": [689, 775], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "MediaLibrary" },
            "fix": { "range": [696, 714], "text": "" },
            "desc": "Remove unused variable 'MediaLibrary'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FeatureFlagsPage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FeatureFlagsPage" },
            "fix": { "range": [782, 804], "text": "" },
            "desc": "Remove unused variable 'FeatureFlagsPage'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FeatureFlagsPage' is defined but never used.",
        "line": 15,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 24,
        "fix": { "range": [775, 865], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FeatureFlagsPage" },
            "fix": { "range": [782, 804], "text": "" },
            "desc": "Remove unused variable 'FeatureFlagsPage'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RequireAdmin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RequireAdmin" },
            "fix": { "range": [872, 890], "text": "" },
            "desc": "Remove unused variable 'RequireAdmin'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'RequireAdmin' is defined but never used.",
        "line": 16,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 20,
        "fix": { "range": [865, 922], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RequireAdmin" },
            "fix": { "range": [872, 890], "text": "" },
            "desc": "Remove unused variable 'RequireAdmin'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'NotFound' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "NotFound" },
            "fix": { "range": [929, 943], "text": "" },
            "desc": "Remove unused variable 'NotFound'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'NotFound' is defined but never used.",
        "line": 17,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 16,
        "fix": { "range": [922, 961], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "NotFound" },
            "fix": { "range": [929, 943], "text": "" },
            "desc": "Remove unused variable 'NotFound'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ResetPassword' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResetPassword" },
            "fix": { "range": [968, 987], "text": "" },
            "desc": "Remove unused variable 'ResetPassword'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ResetPassword' is defined but never used.",
        "line": 18,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 21,
        "fix": { "range": [961, 1011], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResetPassword" },
            "fix": { "range": [968, 987], "text": "" },
            "desc": "Remove unused variable 'ResetPassword'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 38,
    "fixableErrorCount": 0,
    "fixableWarningCount": 19,
    "source": "import React from \"react\";\nimport { BrowserRouter, Routes as RouterRoutes, Route } from \"react-router-dom\";\nimport ScrollToTop from \"components/ScrollToTop\";\nimport ErrorBoundary from \"components/ErrorBoundary\";\n// Add your imports here\nimport PortfolioHomeHero from \"pages/portfolio-home-hero\";\nimport ProjectsPortfolioGrid from \"pages/projects-portfolio-grid\";\nimport ProjectDetail from \"pages/project-detail\";\nimport BlogContentHub from \"pages/blog-content-hub\";\nimport BlogPost from \"pages/blog-post\";\nimport SearchResultsPage from \"pages/search\";\nimport Documentation from \"pages/documentation\";\nimport AdminDashboardContentManagement from \"pages/admin-dashboard-content-management\";\nimport MediaLibrary from \"pages/admin-dashboard-content-management/MediaLibrary.jsx\";\nimport FeatureFlagsPage from \"pages/admin-dashboard-content-management/FeatureFlags.jsx\";\nimport RequireAdmin from \"components/auth/RequireAdmin\";\nimport NotFound from \"pages/NotFound\";\nimport ResetPassword from \"pages/ResetPassword\";\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <ErrorBoundary>\n      <ScrollToTop />\n      <RouterRoutes>\n        {/* Define your routes here */}\n        <Route path=\"/\" element={<PortfolioHomeHero />} />\n        <Route path=\"/portfolio-home-hero\" element={<PortfolioHomeHero />} />\n        <Route path=\"/projects-portfolio-grid\" element={<ProjectsPortfolioGrid />} />\n        <Route path=\"/project/:id\" element={<ProjectDetail />} />\n        <Route path=\"/blog-content-hub\" element={<BlogContentHub />} />\n  <Route path=\"/blog/:slug\" element={<BlogPost />} />\n  <Route path=\"/search\" element={<SearchResultsPage />} />\n        <Route path=\"/documentation\" element={<Documentation />} />\n  <Route path=\"/reset-password\" element={<ResetPassword />} />\n        <Route\n          path=\"/admin-dashboard-content-management\"\n          element={\n            <RequireAdmin>\n              <AdminDashboardContentManagement />\n            </RequireAdmin>\n          }\n        />\n        <Route path=\"/admin/media\" element={<MediaLibrary />} />\n  <Route path=\"/admin/feature-flags\" element={<RequireAdmin><FeatureFlagsPage /></RequireAdmin>} />\n        <Route path=\"*\" element={<NotFound />} />\n      </RouterRoutes>\n      </ErrorBoundary>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/AppIcon.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HelpCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HelpCircle" },
            "fix": { "range": [72, 114], "text": "" },
            "desc": "Remove unused variable 'HelpCircle'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HelpCircle' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 20,
        "fix": { "range": [72, 116], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HelpCircle" },
            "fix": { "range": [72, 114], "text": "" },
            "desc": "Remove unused variable 'HelpCircle'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}) {\n    const IconComponent = LucideIcons[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\nexport default Icon;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/AppImage.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 28], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React from 'react';\n\nfunction Image({\n  src,\n  alt = \"Image Name\",\n  className = \"\",\n  ...props\n}) {\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      onError={(e) => {\n        e.target.src = \"/assets/images/no_image.png\"\n      }}\n      {...props}\n    />\n  );\n}\n\nexport default Image;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/CommandPalette.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 77,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 77,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 80,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 80,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 102,
        "column": 21,
        "nodeType": "Identifier",
        "endLine": 102,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 109,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 109,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport useFeature from 'hooks/useFeature';\nimport { createPortal } from 'react-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { coreActions, buildEphemeralActions } from './commandPalette/actions';\nimport blogService from 'utils/blogService';\n\n// Simple fuzzy score: higher is better.\nfunction score(str, query) {\n  if (!query) return 0;\n  str = str.toLowerCase();\n  query = query.toLowerCase();\n  if (str.includes(query)) return 100 + (50 - str.indexOf(query)); // prefer early matches\n  // Non-contiguous scoring\n  let s = 0, qi = 0;\n  for (let i = 0; i < str.length && qi < query.length; i++) {\n    if (str[i] === query[qi]) { s += 5; qi++; }\n  }\n  if (qi === query.length) s += 20; // full sequence matched\n  return s;\n}\n\nexport default function CommandPalette() {\n  const enabled = useFeature('command_palette');\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState('');\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [postResults, setPostResults] = useState([]); // search suggestions\n  const [loading, setLoading] = useState(false);\n  const cacheRef = useRef(new Map());\n  const navigate = useNavigate();\n  const inputRef = useRef(null);\n\n  const listener = useCallback((e) => {\n    if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {\n      e.preventDefault();\n      setOpen(o => !o);\n    } else if (e.key === 'Escape') {\n      setOpen(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', listener);\n    return () => window.removeEventListener('keydown', listener);\n  }, [listener]);\n\n  if (!enabled) return null;\n\n  // Build action set (core + ephemeral)\n  const ephemeral = buildEphemeralActions(query);\n  let actionCandidates = [...coreActions, ...ephemeral];\n\n  const baseQuery = query.startsWith('?') ? query.slice(1) : query; // allow leading ? for explicit search intent\n\n  // Compute fuzzy scores\n  const scored = baseQuery\n    ? actionCandidates.map(a => ({ ...a, _score: score(a.title + ' ' + (a.keywords || []).join(' '), baseQuery) }))\n      .filter(a => a._score > 0)\n      .sort((a,b) => b._score - a._score)\n    : actionCandidates.map(a => ({ ...a, _score: 0 }));\n\n  // Posts group list\n  const showPostSearch = baseQuery.length > 1; // simple heuristic\n  const posts = postResults;\n\n  const groups = [];\n  groups.push({ label: 'Commands', items: scored.length ? scored : actionCandidates });\n  if (showPostSearch) groups.push({ label: 'Posts', items: posts.map(p => ({\n    id: 'post-' + p.slug,\n    title: p.title,\n    run: (nav) => nav('/blog/' + p.slug)\n  })) });\n\n  const flat = groups.flatMap(g => g.items.map(it => ({ group: g.label, ...it })));\n  const clampedActive = Math.min(activeIndex, flat.length - 1);\n  useEffect(() => { if (clampedActive !== activeIndex) setActiveIndex(clampedActive); }, [clampedActive, activeIndex]);\n\n  // Fetch post suggestions (debounced) using blogService (falls back to simple search in Supabase mode)\n  useEffect(() => {\n    if (!open) return;\n    const term = baseQuery.trim();\n    if (term.length < 2) { setPostResults([]); return; }\n    const key = term.toLowerCase();\n    if (cacheRef.current.has(key)) { setPostResults(cacheRef.current.get(key)); return; }\n    let aborted = false;\n    const t = setTimeout(async () => {\n      try {\n        setLoading(true);\n        const res = await blogService.searchPosts?.(term);\n        if (!aborted && res?.success) {\n          cacheRef.current.set(key, res.data.slice(0,5));\n          setPostResults(res.data.slice(0,5));\n        }\n      } finally {\n        if (!aborted) setLoading(false);\n      }\n    }, 240);\n    return () => { aborted = true; clearTimeout(t); };\n  }, [baseQuery, open]);\n\n  const onKeyDown = useCallback((e) => {\n    if (!open) return;\n    if (e.key === 'ArrowDown') { e.preventDefault(); setActiveIndex(i => Math.min(i + 1, flat.length - 1)); }\n    else if (e.key === 'ArrowUp') { e.preventDefault(); setActiveIndex(i => Math.max(i - 1, 0)); }\n    else if (e.key === 'Enter') { e.preventDefault(); const item = flat[activeIndex]; if (item) { item.run(navigate); setOpen(false); } }\n  }, [open, flat, activeIndex, navigate]);\n\n  useEffect(() => {\n    if (open) {\n      // Focus input when palette opened\n      setTimeout(() => inputRef.current?.focus(), 0);\n    } else {\n      setQuery('');\n      setPostResults([]);\n      setActiveIndex(0);\n    }\n  }, [open]);\n\n  return createPortal(\n    <>\n      {open && (\n        <div className=\"fixed inset-0 z-50 flex items-start justify-center pt-28\">\n          <div className=\"absolute inset-0 bg-black/40\" onClick={() => setOpen(false)} />\n          <div className=\"relative w-full max-w-xl mx-auto bg-surface border border-border-accent/30 rounded-xl shadow-xl overflow-hidden\">\n            <input\n              ref={inputRef}\n              placeholder=\"Type a command or search… (↑↓ navigate)\"\n              className=\"w-full px-4 py-3 bg-transparent outline-none text-sm border-b border-border-accent/20\"\n              value={query}\n              onChange={e => { setQuery(e.target.value); setActiveIndex(0); }}\n              onKeyDown={onKeyDown}\n            />\n            <div className=\"max-h-80 overflow-y-auto\" onKeyDown={onKeyDown}>\n              {flat.length === 0 && (\n                <div className=\"px-4 py-4 text-text-secondary text-sm\">No matches</div>\n              )}\n              {groups.map(g => (\n                <div key={g.label}>\n                  <div className=\"px-4 pt-3 pb-1 text-[10px] uppercase tracking-wide text-text-secondary\">{g.label}{g.label==='Posts' && loading ? ' • Loading…' : ''}</div>\n                  <ul>\n                    {g.items.map(item => {\n                      const idx = flat.findIndex(f => f.id === item.id && f.group === g.label);\n                      const isActive = idx === clampedActive;\n                      return (\n                        <li key={item.id}>\n                          <button\n                            className={`w-full text-left px-4 py-2 text-sm flex items-center gap-2 transition-colors ${isActive ? 'bg-primary/20 text-primary-foreground' : 'hover:bg-primary/10'}`}\n                            onClick={() => { item.run(navigate); setOpen(false); }}\n                            onMouseEnter={() => setActiveIndex(idx)}\n                          >\n                            {item.title}\n                          </button>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </div>\n              ))}\n            </div>\n            <div className=\"px-4 py-2 text-[10px] uppercase tracking-wide text-text-secondary border-t border-border-accent/20 flex justify-between\">\n              <span>Ctrl / Cmd + K</span>\n              <span>Enter run • Esc close • post:Title create</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </>,\n    document.body\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ErrorBoundary.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 58], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 10,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "error" },
            "fix": { "range": [222, 227], "text": "" },
            "desc": "Remove unused variable 'error'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React from \"react\";\nimport Icon from \"./AppIcon\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    error.__ErrorBoundary = true;\n    window.__COMPONENT_ERROR__?.(error, errorInfo);\n    // console.log(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n          <div cl assName=\"text-center p-8 max-w-md\">\n            <div className=\"flex justify-center items-center mb-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42px\" height=\"42px\" viewBox=\"0 0 32 33\" fill=\"none\">\n                <path d=\"M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z\" stroke=\"#343330\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\n                <path d=\"M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5\" stroke=\"#343330\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n            <div className=\"flex flex-col gap-1 text-center\">\n              <h1 className=\"text-2xl font-medium text-neutral-800\">Something went wrong</h1>\n              <p className=\"text-neutral-600 text-base w w-8/12 mx-auto\">We encountered an unexpected error while processing your request.</p>\n            </div>\n            <div className=\"flex justify-center items-center mt-6\">\n              <button\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm\"\n              >\n                <Icon name=\"ArrowLeft\" size={18} color=\"#fff\" />\n                Back\n              </button>\n            </div>\n          </div >\n        </div >\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ScrollToTop.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/admin/BrandingHints.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/admin/RevisionDiffViewer.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 21,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 17
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'base'. Either include it or remove the dependency array.",
        "line": 28,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 28,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [base, revisionId]",
            "fix": { "range": [1045, 1057], "text": "[base, revisionId]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useState } from 'react';\nimport { simpleLineDiff } from '../../utils/diff';\n\nexport default function RevisionDiffViewer({ revisionId, onClose }) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [diffRows, setDiffRows] = useState([]);\n  const base = import.meta.env.VITE_API_BASE_URL || '/api';\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        setLoading(true); setError(null);\n        const res = await fetch(base + '/blog/revision-diff?revisionId=' + revisionId);\n        if (!res.ok) throw new Error(await res.text());\n        const data = await res.json();\n        if (!mounted) return;\n        const diff = simpleLineDiff(data.before.content || '', data.after.content || '');\n        setDiffRows(diff.slice(0, 4000)); // safety cap\n      } catch (e) {\n        if (mounted) setError('Failed to load diff');\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => { mounted = false; };\n  }, [revisionId]);\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col bg-background/90 backdrop-blur p-6 overflow-hidden\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-semibold\">Revision Diff</h2>\n        <button onClick={onClose} className=\"px-3 py-1 rounded bg-error text-background text-sm\">Close</button>\n      </div>\n      {loading && <div className=\"text-sm text-text-secondary\">Loading…</div>}\n      {error && <div className=\"text-sm text-error mb-2\">{error}</div>}\n      <div className=\"flex-1 overflow-auto rounded border border-border-accent/30 bg-surface text-xs font-mono\">\n        {diffRows.map((r, i) => (\n          <div key={i} className={\n            r.type === 'context' ? 'flex px-2 py-0.5' : r.type === 'add' ? 'flex px-2 py-0.5 bg-success/10' : 'flex px-2 py-0.5 bg-error/10'\n          }>\n            <div className=\"w-1/2 pr-2 whitespace-pre-wrap break-words border-r border-border-accent/20\">\n              {r.before}\n            </div>\n            <div className=\"w-1/2 pl-2 whitespace-pre-wrap break-words\">\n              {r.after}\n            </div>\n          </div>\n        ))}\n        {!loading && diffRows.length === 0 && <div className=\"p-4 text-text-secondary\">No differences.</div>}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/auth/AuthModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'X' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "X" },
            "fix": { "range": [41, 74], "text": "" },
            "desc": "Remove unused variable 'X'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'X' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11,
        "fix": { "range": [41, 75], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "X" },
            "fix": { "range": [41, 74], "text": "" },
            "desc": "Remove unused variable 'X'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Login' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Login" },
            "fix": { "range": [82, 93], "text": "" },
            "desc": "Remove unused variable 'Login'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Login' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [75, 105], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Login" },
            "fix": { "range": [82, 93], "text": "" },
            "desc": "Remove unused variable 'Login'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'defaultMode' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 5,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "defaultMode" },
            "fix": { "range": [141, 164], "text": "" },
            "desc": "Remove unused variable 'defaultMode'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'mode' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "mode" },
            "fix": { "range": [182, 186], "text": "" },
            "desc": "Remove unused variable 'mode'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'setMode' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setMode" },
            "fix": { "range": [186, 195], "text": "" },
            "desc": "Remove unused variable 'setMode'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState } from 'react';\nimport { X } from 'lucide-react';\nimport Login from './Login';\n\nconst AuthModal = ({ isOpen, onClose, defaultMode = 'login' }) => {\n  const [mode, setMode] = useState('login');\n\n  if (!isOpen) return null;\n\n  const handleSuccess = () => {\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-full p-4\">\n        {/* Backdrop */}\n        <div \n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm transition-opacity\"\n          onClick={onClose}\n        />\n        \n        {/* Modal Content */}\n        <div className=\"relative w-full max-w-md\">\n          {/* Close Button */}\n          <button\n            onClick={onClose}\n            className=\"absolute -top-2 -right-2 z-10 w-8 h-8 bg-surface border border-border-accent rounded-full flex items-center justify-center text-text-secondary hover:text-text-primary hover:border-primary transition-all shadow-glow-primary\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n\n          {/* Auth Form */}\n          <Login onClose={onClose} onSuccess={handleSuccess} />\n\n          {/* Mode Switch */}\n          <div className=\"mt-4 text-center text-sm text-text-secondary\">\n            Signup is disabled. Only the site owner can access the admin dashboard.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthModal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/auth/DevOtpBanner.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [59, 71], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [52, 88], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [59, 71], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 28,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 28,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [926, 974], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState } from 'react';\nimport Button from '../ui/Button';\n\nconst DevOtpBanner = () => {\n  const [visible, setVisible] = useState(false);\n  const [code, setCode] = useState('');\n\n  useEffect(() => {\n    try {\n      const isDev = typeof import.meta !== 'undefined' && import.meta && import.meta.env && import.meta.env.DEV;\n      const isDevAdmin = typeof window !== 'undefined' && window.localStorage.getItem('dev_admin') === 'true';\n      if (isDev && isDevAdmin) {\n        setVisible(true);\n        setCode(window.localStorage.getItem('dev_admin_code') || '');\n      }\n    } catch (error) {\n      console.error('Error in useEffect:', error);\n    }\n  }, []);\n\n  if (!visible) return null;\n\n  const handleCopy = async () => {\n    try {\n      const value = window.localStorage.getItem('dev_admin_code') || code || '';\n      if (!value) return;\n      await navigator.clipboard.writeText(value);\n      console.log('Copied dev OTP code to clipboard');\n    } catch (error) {\n      console.error('Error copying OTP code:', error);\n    }\n  };\n\n  const handleHide = () => setVisible(false);\n\n  const handleClear = () => {\n    try {\n      window.localStorage.removeItem('dev_admin_code');\n      setCode('');\n    } catch (error) {\n      console.error('Error clearing OTP code:', error);\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-[60] bg-surface/95 backdrop-blur border border-yellow-400/30 rounded-lg shadow-glow-primary p-3 flex items-center gap-2\">\n      <span className=\"text-xs text-yellow-300 font-medium\">Dev OTP</span>\n      <span className=\"text-xs text-text-secondary\">Code is in console</span>\n      <Button size=\"xs\" variant=\"outline\" onClick={handleCopy} iconName=\"Clipboard\">\n        Copy\n      </Button>\n      <Button size=\"xs\" variant=\"ghost\" onClick={handleClear} iconName=\"Eraser\">\n        Clear\n      </Button>\n      <Button size=\"xs\" variant=\"ghost\" onClick={handleHide} iconName=\"X\">\n        Hide\n      </Button>\n    </div>\n  );\n};\n\nexport default DevOtpBanner;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/auth/Login.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [150, 162], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [143, 178], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [150, 162], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [185, 196], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "fix": { "range": [178, 211], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [185, 196], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'LogIn' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogIn" },
            "fix": { "range": [220, 226], "text": "" },
            "desc": "Remove unused variable 'LogIn'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'LogIn' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15,
        "fix": { "range": [219, 226], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogIn" },
            "fix": { "range": [220, 226], "text": "" },
            "desc": "Remove unused variable 'LogIn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Mail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Mail" },
            "fix": { "range": [225, 231], "text": "" },
            "desc": "Remove unused variable 'Mail'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Mail' is defined but never used.",
        "line": 6,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 21,
        "fix": { "range": [226, 232], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Mail" },
            "fix": { "range": [225, 231], "text": "" },
            "desc": "Remove unused variable 'Mail'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Lock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Lock" },
            "fix": { "range": [231, 237], "text": "" },
            "desc": "Remove unused variable 'Lock'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Lock' is defined but never used.",
        "line": 6,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27,
        "fix": { "range": [232, 238], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Lock" },
            "fix": { "range": [231, 237], "text": "" },
            "desc": "Remove unused variable 'Lock'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AlertCircle" },
            "fix": { "range": [237, 250], "text": "" },
            "desc": "Remove unused variable 'AlertCircle'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'AlertCircle' is defined but never used.",
        "line": 6,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 40,
        "fix": { "range": [238, 251], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AlertCircle" },
            "fix": { "range": [237, 250], "text": "" },
            "desc": "Remove unused variable 'AlertCircle'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Github' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Github" },
            "fix": { "range": [250, 258], "text": "" },
            "desc": "Remove unused variable 'Github'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Github' is defined but never used.",
        "line": 6,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 48,
        "fix": { "range": [250, 258], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Github" },
            "fix": { "range": [250, 258], "text": "" },
            "desc": "Remove unused variable 'Github'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 38,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 38,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1403, 1438], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 59,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 59,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2178, 2219], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'GoogleIcon' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "GoogleIcon" },
            "fix": { "range": [2375, 3223], "text": "" },
            "desc": "Remove unused variable 'GoogleIcon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '../ui/Button';\nimport Input from '../ui/Input';\nimport { LogIn, Mail, Lock, AlertCircle, Github } from 'lucide-react';\nimport { useToast } from '../../contexts/ToastContext';\nimport { ADMIN_EMAIL } from '../../utils/authService';\n\nconst Login = ({ onClose, onSuccess }) => {\n  const [email, setEmail] = useState(ADMIN_EMAIL);\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [oauthLoading, setOauthLoading] = useState(null);\n  const [error, setError] = useState('');\n\n  const { signIn, signInWithOAuth } = useAuth();\n  const { show: showToast } = useToast();\n  const navigate = useNavigate();\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    try {\n      const result = await signIn(email, password);\n      if (result.success) {\n        onSuccess?.();\n        onClose?.();\n        navigate('/admin-dashboard-content-management');\n        showToast('Login successful', { type: 'success' });\n      } else {\n        setError(result.error || 'Invalid credentials');\n        showToast(result.error || 'Invalid credentials', { type: 'error' });\n      }\n    } catch (err) {\n      setError('An unexpected error occurred');\n      console.log('Sign in error:', err);\n      showToast('An unexpected error occurred', { type: 'error' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOAuthSignIn = async (provider) => {\n    setOauthLoading(provider);\n    setError('');\n    try {\n      const result = await signInWithOAuth(provider);\n      if (result.success) {\n        showToast(`Redirecting to ${provider} authentication...`, { type: 'info' });\n        // OAuth will redirect, so we don't close the modal here\n      } else {\n        setError(result.error || 'OAuth authentication failed');\n        showToast(result.error || 'OAuth authentication failed', { type: 'error' });\n      }\n    } catch (err) {\n      setError('An unexpected error occurred during OAuth authentication');\n      console.log('OAuth sign in error:', err);\n      showToast('An unexpected error occurred during OAuth authentication', { type: 'error' });\n    } finally {\n      setOauthLoading(null);\n    }\n  };\n\n  const GoogleIcon = () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-5 h-5\">\n      <path\n        fill=\"currentColor\"\n        d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n      />\n    </svg>\n  );\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div className=\"bg-surface border border-border-accent rounded-lg p-6 shadow-glow-primary\">\n        <div className=\"text-center mb-6\">\n          <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <LogIn className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h2 className=\"text-2xl font-heading font-bold text-text-primary mb-2\">\n            Admin Access\n          </h2>\n          <p className=\"text-text-secondary\">\n            Sign in to manage your portfolio\n          </p>\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-error/10 border border-error/30 rounded-lg flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4 text-error flex-shrink-0\" />\n            <p className=\"text-error text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* OAuth Buttons */}\n        <div className=\"space-y-3 mb-6\">\n          <Button\n            onClick={() => handleOAuthSignIn('google')}\n            disabled={oauthLoading === 'google' || isLoading}\n            className=\"w-full bg-white hover:bg-gray-50 text-gray-900 border border-gray-300\"\n            iconPosition=\"left\"\n          >\n            {oauthLoading === 'google' ? (\n              <div className=\"w-5 h-5 animate-spin rounded-full border-2 border-gray-300 border-t-gray-900\" />\n            ) : (\n              <GoogleIcon />\n            )}\n            {oauthLoading === 'google' ? 'Connecting...' : 'Continue with Google'}\n          </Button>\n\n          <Button\n            onClick={() => handleOAuthSignIn('github')}\n            disabled={oauthLoading === 'github' || isLoading}\n            className=\"w-full bg-gray-900 hover:bg-gray-800 text-white\"\n            iconPosition=\"left\"\n          >\n            {oauthLoading === 'github' ? (\n              <div className=\"w-5 h-5 animate-spin rounded-full border-2 border-gray-600 border-t-white\" />\n            ) : (\n              <Github className=\"w-5 h-5\" />\n            )}\n            {oauthLoading === 'github' ? 'Connecting...' : 'Continue with GitHub'}\n          </Button>\n        </div>\n\n        {/* Divider */}\n        <div className=\"relative mb-6\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <div className=\"w-full border-t border-border-accent\"></div>\n          </div>\n          <div className=\"relative flex justify-center text-sm\">\n            <span className=\"px-2 bg-surface text-text-secondary\">Or continue with email</span>\n          </div>\n        </div>\n\n        <form onSubmit={handleSignIn} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Admin Email\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder={ADMIN_EMAIL}\n                required\n                autoComplete=\"email\"\n                className=\"w-full pl-10\"\n                disabled={isLoading || oauthLoading}\n              />\n              <Mail className=\"w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 text-text-secondary\" />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Password\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                autoComplete=\"current-password\"\n                className=\"w-full pl-10\"\n                disabled={isLoading || oauthLoading}\n              />\n              <Lock className=\"w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 text-text-secondary\" />\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"w-full shadow-glow-primary\"\n            disabled={isLoading || oauthLoading}\n            iconName={isLoading ? 'Loader2' : 'LogIn'}\n            iconPosition=\"left\"\n          >\n            {isLoading ? 'Signing In…' : 'Sign In'}\n          </Button>\n        </form>\n\n        {onClose && (\n          <div className=\"mt-4 text-center\">\n            <button\n              onClick={onClose}\n              className=\"text-text-secondary hover:text-text-primary transition-colors text-sm\"\n              disabled={isLoading || oauthLoading}\n            >\n              Cancel\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Login;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/auth/RequireAdmin.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Navigate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Navigate" },
            "fix": { "range": [61, 70], "text": "" },
            "desc": "Remove unused variable 'Navigate'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Navigate' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "fix": { "range": [60, 70], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Navigate" },
            "fix": { "range": [61, 70], "text": "" },
            "desc": "Remove unused variable 'Navigate'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport authService from '../../utils/authService';\n\nconst RequireAdmin = ({ children }) => {\n  const [allowed, setAllowed] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const location = useLocation();\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        const isAdmin = await authService.isAdmin();\n        if (mounted) {\n          setAllowed(isAdmin);\n        }\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [location.pathname]);\n\n  if (loading) return null; // optionally show a spinner\n  if (!allowed) return <Navigate to=\"/portfolio-home-hero\" replace />;\n  return children;\n};\n\nexport default RequireAdmin;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/auth/Signup.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [150, 162], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [143, 178], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [150, 162], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [185, 196], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "fix": { "range": [178, 211], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [185, 196], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Eye' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Eye" },
            "fix": { "range": [220, 224], "text": "" },
            "desc": "Remove unused variable 'Eye'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Eye' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "fix": { "range": [219, 224], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Eye" },
            "fix": { "range": [220, 224], "text": "" },
            "desc": "Remove unused variable 'Eye'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'EyeOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "EyeOff" },
            "fix": { "range": [223, 231], "text": "" },
            "desc": "Remove unused variable 'EyeOff'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'EyeOff' is defined but never used.",
        "line": 6,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 21,
        "fix": { "range": [224, 232], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "EyeOff" },
            "fix": { "range": [223, 231], "text": "" },
            "desc": "Remove unused variable 'EyeOff'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'UserPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "UserPlus" },
            "fix": { "range": [231, 241], "text": "" },
            "desc": "Remove unused variable 'UserPlus'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'UserPlus' is defined but never used.",
        "line": 6,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 31,
        "fix": { "range": [232, 242], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "UserPlus" },
            "fix": { "range": [231, 241], "text": "" },
            "desc": "Remove unused variable 'UserPlus'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AlertCircle" },
            "fix": { "range": [241, 254], "text": "" },
            "desc": "Remove unused variable 'AlertCircle'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'AlertCircle' is defined but never used.",
        "line": 6,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 44,
        "fix": { "range": [242, 255], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AlertCircle" },
            "fix": { "range": [241, 254], "text": "" },
            "desc": "Remove unused variable 'AlertCircle'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CheckCircle" },
            "fix": { "range": [254, 267], "text": "" },
            "desc": "Remove unused variable 'CheckCircle'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'CheckCircle' is defined but never used.",
        "line": 6,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 57,
        "fix": { "range": [254, 267], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CheckCircle" },
            "fix": { "range": [254, 267], "text": "" },
            "desc": "Remove unused variable 'CheckCircle'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 76,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 76,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2114, 2150], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '../ui/Button';\nimport Input from '../ui/Input';\nimport { Eye, EyeOff, UserPlus, AlertCircle, CheckCircle } from 'lucide-react';\n\nconst Signup = ({ onClose, onSuccess }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    fullName: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const { signUp } = useAuth();\n  const navigate = useNavigate();\n\n  const handleChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError(''); // Clear error when user types\n  };\n\n  const validateForm = () => {\n    if (!formData.email || !formData.password || !formData.confirmPassword || !formData.fullName) {\n      setError('All fields are required');\n      return false;\n    }\n\n    if (formData.password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return false;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const result = await signUp(formData.email, formData.password, {\n        full_name: formData.fullName,\n        role: 'admin'\n      });\n\n      if (result.success) {\n        setIsSuccess(true);\n        setTimeout(() => {\n          onSuccess?.();\n          onClose?.();\n          navigate('/admin-dashboard-content-management');\n        }, 2000);\n      } else {\n        setError(result.error || 'Signup failed');\n      }\n    } catch (error) {\n      setError('An unexpected error occurred');\n      console.log('Signup error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"w-full max-w-md mx-auto\">\n        <div className=\"bg-surface border border-success rounded-lg p-6 shadow-glow-primary text-center\">\n          <div className=\"w-16 h-16 bg-success/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-success\" />\n          </div>\n          <h2 className=\"text-2xl font-heading font-bold text-text-primary mb-2\">\n            Account Created!\n          </h2>\n          <p className=\"text-text-secondary mb-4\">\n            Welcome to WisdomInTech Admin Panel. Redirecting to dashboard...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div className=\"bg-surface border border-border-accent rounded-lg p-6 shadow-glow-primary\">\n        <div className=\"text-center mb-6\">\n          <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <UserPlus className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h2 className=\"text-2xl font-heading font-bold text-text-primary mb-2\">\n            Create Admin Account\n          </h2>\n          <p className=\"text-text-secondary\">\n            Set up your cyberpunk portfolio admin access\n          </p>\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-error/10 border border-error/30 rounded-lg flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4 text-error flex-shrink-0\" />\n            <p className=\"text-error text-sm\">{error}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Full Name\n            </label>\n            <Input\n              id=\"fullName\"\n              type=\"text\"\n              value={formData.fullName}\n              onChange={(e) => handleChange('fullName', e.target.value)}\n              placeholder=\"Mikael Kraft\"\n              required\n              autoComplete=\"name\"\n              className=\"w-full\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Email Address\n            </label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleChange('email', e.target.value)}\n              placeholder=\"admin@wisdomintech.dev\"\n              required\n              autoComplete=\"email\"\n              className=\"w-full\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Password\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                value={formData.password}\n                onChange={(e) => handleChange('password', e.target.value)}\n                placeholder=\"Create a strong password\"\n                required\n                autoComplete=\"new-password\"\n                className=\"w-full pr-10\"\n                disabled={isLoading}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-text-secondary hover:text-text-primary transition-colors\"\n                disabled={isLoading}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"w-4 h-4\" />\n                ) : (\n                  <Eye className=\"w-4 h-4\" />\n                )}\n              </button>\n            </div>\n            <p className=\"text-xs text-text-secondary mt-1\">\n              Minimum 8 characters required\n            </p>\n          </div>\n\n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-text-primary mb-2\">\n              Confirm Password\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                value={formData.confirmPassword}\n                onChange={(e) => handleChange('confirmPassword', e.target.value)}\n                placeholder=\"Confirm your password\"\n                required\n                autoComplete=\"new-password\"\n                className=\"w-full pr-10\"\n                disabled={isLoading}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-text-secondary hover:text-text-primary transition-colors\"\n                disabled={isLoading}\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"w-4 h-4\" />\n                ) : (\n                  <Eye className=\"w-4 h-4\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          <div className=\"text-sm\">\n            <label className=\"flex items-start\">\n              <input\n                type=\"checkbox\"\n                required\n                className=\"rounded border-border-primary text-primary focus:ring-primary focus:ring-offset-0 mt-1\"\n                disabled={isLoading}\n              />\n              <span className=\"ml-2 text-text-secondary\">\n                I agree to the terms of service and privacy policy for this portfolio admin system\n              </span>\n            </label>\n          </div>\n\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"w-full shadow-glow-primary\"\n            disabled={isLoading}\n            iconName={isLoading ? 'Loader2' : 'UserPlus'}\n            iconPosition=\"left\"\n          >\n            {isLoading ? 'Creating Account...' : 'Create Admin Account'}\n          </Button>\n        </form>\n\n        {onClose && (\n          <div className=\"mt-4 text-center\">\n            <button\n              onClick={onClose}\n              className=\"text-text-secondary hover:text-text-primary transition-colors text-sm\"\n              disabled={isLoading}\n            >\n              Cancel\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/commandPalette/actions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/layout/Header.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [118, 129], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [111, 145], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [118, 129], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState } from 'react';\nimport settingsService from '../../utils/settingsService';\nimport Image from '../AppImage';\n\nfunction Header() {\n  const [logo, setLogo] = useState(null);\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      const res = await settingsService.getSettings();\n      if (!mounted || !res.success) return;\n  const data = res.data || {};\n  // Prefer explicit variant logos, then legacy fields, then static mklogo asset\n  const chosen = data.logo_light_url || data.logo_dark_url || data.site_logo_url || data.logo_url || '/assets/images/mklogo.png';\n  setLogo(chosen);\n      setTitle(data.site_title || 'Site');\n    })();\n    return () => { mounted = false; };\n  }, []);\n  return (\n    <header className=\"flex items-center gap-3 p-3 border-b border-[var(--color-border)]\">\n      {logo ? (\n        <Image src={logo} alt={title + ' logo'} className=\"h-10 w-auto object-contain\" />\n      ) : (\n        <div className=\"text-xl font-heading\">{title}</div>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/seo/Canonical.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [27, 65], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [27, 66], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [27, 65], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from 'react-router-dom';\nimport { getCanonicalUrl } from '../../utils/canonical';\n\n// Canonical tag injector. Place once near root so every route updates tag.\nexport default function Canonical() {\n  const location = useLocation();\n  // External flag (window.__SUPPRESS_CANONICAL) can be toggled by routes like 404.\n  const suppress = typeof window !== 'undefined' && window.__SUPPRESS_CANONICAL;\n  if (suppress) return null;\n  const canonical = getCanonicalUrl(location.pathname + location.search);\n  return (\n    <Helmet>\n      <link rel=\"canonical\" href={canonical} />\n    </Helmet>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/seo/OGMeta.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/Button.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 67], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React from 'react';\nimport Icon from 'components/AppIcon';\n\nconst Button = React.forwardRef(({\n    children,\n    variant = 'primary',\n    size = 'md',\n    shape = 'rounded',\n    fullWidth = false,\n    disabled = false,\n    loading = false,\n    icon = null,\n    iconName = null,\n    iconPosition = 'left',\n    type = 'button',\n    iconSize = null,\n    iconColor = null,\n    className = '',\n    onClick,\n    ...rest\n}, ref) => {\n    // Base classes\n    const baseClasses = 'inline-flex items-center justify-center transition-all duration-200 font-medium focus:ring-2 focus:outline-none';\n\n    // Size classes\n    const sizeClasses = {\n        '2xs': 'text-xs py-0.5 px-1.5',\n        xs: 'text-xs py-1 px-2',\n        sm: 'text-sm py-1.5 px-3',\n        md: 'text-base py-2 px-4',\n        lg: 'text-lg py-2.5 px-5',\n        xl: 'text-xl py-3 px-6',\n        '2xl': 'text-2xl py-4 px-8',\n    };\n\n    // Shape classes\n    const shapeClasses = {\n        rounded: 'rounded',\n        square: 'rounded-none',\n        pill: 'rounded-full',\n        circle: 'rounded-full aspect-square',\n    };\n\n    // Variant classes\n    const variantClasses = {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        success: 'bg-success text-white hover:bg-opacity-90 active:bg-opacity-100 disabled:opacity-50',\n        danger: 'bg-error text-white hover:bg-opacity-90 active:bg-opacity-100 disabled:opacity-50',\n        warning: 'bg-warning text-primary-foreground hover:bg-opacity-90 active:bg-opacity-100 disabled:opacity-50',\n        info: 'bg-accent text-white hover:bg-opacity-90 active:bg-opacity-100 disabled:opacity-50',\n        ghost: 'hover:bg-primary hover:text-primary-foreground',\n        link: 'bg-transparent text-primary-foreground underline hover:text-primary-600 p-0',\n        outline: 'border border-input bg-background hover:bg-primary hover:text-primary-foreground',\n        text: 'bg-transparent text-primary-foreground hover:bg-surface hover:bg-opacity-50 active:bg-surface active:bg-opacity-70',\n    };\n\n\n    // Width classes\n    const widthClasses = fullWidth ? 'w-full' : '';\n\n    // Disabled classes\n    const disabledClasses = disabled ? 'cursor-not-allowed opacity-60' : '';\n\n    // Loading state\n    const loadingContent = loading ? (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n    ) : null;\n\n    // Icon rendering\n    const renderIcon = () => {\n        if (iconName) {\n            // Use AppIcon component when iconName is provided\n            const iconSizeMap = {\n                '2xs': 12,\n                xs: 14,\n                sm: 16,\n                md: 18,\n                lg: 20,\n                xl: 22,\n                '2xl': 24,\n            };\n\n            const calculatedSize = iconSize || iconSizeMap[size] || 18;\n\n            return (\n                <span style={{ color: iconColor || 'currentColor' }}>\n                    <Icon\n                        name={iconName}\n                        size={calculatedSize}\n                        className={`${children ? (iconPosition === 'left' ? 'mr-2' : 'ml-2') : ''}`}\n                    />\n                </span>\n\n            );\n        }\n\n        if (!icon) return null;\n\n        return React.cloneElement(icon, {\n            className: `${children ? (iconPosition === 'left' ? 'mr-2' : 'ml-2') : ''} h-5 w-5`\n        });\n    };\n\n    // Combine all classes\n    const classes = `\n                    ${baseClasses}\n                    ${sizeClasses[size] || sizeClasses.md}\n                    ${shapeClasses[shape] || shapeClasses.rounded}\n                    ${variantClasses[variant] || variantClasses.primary}\n                    ${widthClasses}\n                    ${disabledClasses}\n                    ${className}\n                    `;\n\n    return (\n        <button\n            ref={ref}\n            type={type}\n            className={classes}\n            disabled={disabled || loading}\n            onClick={onClick}\n            {...rest}\n        >\n            {loading && loadingContent}\n            {(icon || iconName) && iconPosition === 'left' && renderIcon()}\n            {children}\n            {(icon || iconName) && iconPosition === 'right' && renderIcon()}\n        </button>\n    );\n});\n\nexport default Button;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/FileUpload.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [56, 68], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [49, 80], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [56, 68], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [87, 97], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [80, 111], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [87, 97], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "message": "Definition for rule '@next/next/no-img-element' was not found.",
        "line": 86,
        "column": 17,
        "endLine": 86,
        "endColumn": 70,
        "severity": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useRef, useState } from 'react';\nimport Button from './Button';\nimport Icon from '../AppIcon';\nimport storageService from '../../utils/storageService';\n\nconst ACCEPT_MAP = {\n  image: 'image/*',\n  icon: '.ico,image/x-icon,image/vnd.microsoft.icon,image/png,image/svg+xml',\n  video: 'video/*',\n  document: '.pdf,.doc,.docx',\n};\n\nconst FileUpload = ({\n  label = 'Upload file',\n  value,\n  onChange,\n  bucket = 'media',\n  pathPrefix = 'uploads',\n  accept = 'image',\n  disabled = false,\n  helperText,\n}) => {\n  const inputRef = useRef(null);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handlePick = () => inputRef.current?.click();\n\n  const handleFile = async (file) => {\n    if (!file) return;\n    setError('');\n    setUploading(true);\n    const res = await storageService.uploadFile(file, { bucket, pathPrefix });\n    setUploading(false);\n    if (!res.success) {\n      setError(res.error || 'Upload failed');\n      return;\n    }\n    onChange?.(res.data.url, res.data);\n  };\n\n  const onInputChange = (e) => {\n    const file = e.target.files?.[0];\n    if (file) handleFile(file);\n    e.target.value = '';\n  };\n\n  const onDrop = (e) => {\n    e.preventDefault();\n    if (disabled || uploading) return;\n    const file = e.dataTransfer?.files?.[0];\n    if (file) handleFile(file);\n  };\n\n  return (\n    <div>\n      {label && <label className=\"block text-sm font-medium text-text-primary mb-2\">{label}</label>}\n      <div\n        onDragOver={(e) => e.preventDefault()}\n        onDrop={onDrop}\n        className={`flex items-center gap-3 p-3 border rounded-lg bg-surface ${uploading ? 'opacity-70' : ''} border-border-accent/20`}\n      >\n        <input ref={inputRef} type=\"file\" accept={ACCEPT_MAP[accept] || accept} className=\"hidden\" onChange={onInputChange} />\n        <div className=\"w-24 h-16 rounded bg-background/40 border border-border-accent/20 flex items-center justify-center overflow-hidden\">\n          {value ? (\n            (() => {\n              const isVideo = (accept === 'video') || /\\.(mp4|webm|ogg)(\\?|#|$)/i.test(String(value));\n              const isDocument = (accept === 'document') || /\\.(pdf|doc|docx)(\\?|#|$)/i.test(String(value));\n              if (isVideo) {\n                return (\n                  <video\n                    src={value}\n                    className=\"w-full h-full object-cover\"\n                    muted\n                    playsInline\n                    loop\n                  />\n                );\n              }\n              if (isDocument) {\n                return (\n                  <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n                );\n              }\n              return (\n                // eslint-disable-next-line @next/next/no-img-element\n                <img src={value} alt=\"preview\" className=\"w-full h-full object-cover\" />\n              );\n            })()\n          ) : (\n            <Icon name={accept === 'video' ? 'Video' : accept === 'document' ? 'FileText' : 'Image'} size={20} className=\"text-text-secondary\" />\n          )}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-xs text-text-secondary truncate\">{value || 'No file selected'}</div>\n          {helperText && <div className=\"text-[11px] text-text-secondary/70\">{helperText}</div>}\n          {error && <div className=\"text-[11px] text-error mt-1\">{error}</div>}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={handlePick} disabled={disabled || uploading}>\n            {uploading ? 'Uploading…' : 'Choose File'}\n          </Button>\n          {value && (\n            <a href={value} target=\"_blank\" rel=\"noreferrer\" className=\"text-xs text-primary hover:underline\">Open</a>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/HeaderNavigation.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [69, 74], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [68, 74], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [69, 74], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [121, 131], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [114, 145], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [121, 131], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [152, 164], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [145, 176], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [152, 164], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'AuthModal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AuthModal" },
            "fix": { "range": [237, 252], "text": "" },
            "desc": "Remove unused variable 'AuthModal'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'AuthModal' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 17,
        "fix": { "range": [230, 273], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AuthModal" },
            "fix": { "range": [237, 252], "text": "" },
            "desc": "Remove unused variable 'AuthModal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'SearchModal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchModal" },
            "fix": { "range": [280, 297], "text": "" },
            "desc": "Remove unused variable 'SearchModal'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'SearchModal' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 19,
        "fix": { "range": [273, 314], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchModal" },
            "fix": { "range": [280, 297], "text": "" },
            "desc": "Remove unused variable 'SearchModal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'isAuthenticated' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 11,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isAuthenticated" },
            "fix": { "range": [434, 458], "text": "" },
            "desc": "Remove unused variable 'isAuthenticated'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'onAuthToggle' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 11,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onAuthToggle" },
            "fix": { "range": [457, 471], "text": "" },
            "desc": "Remove unused variable 'onAuthToggle'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\nimport { useAuth } from '../../contexts/AuthContext';\nimport AuthModal from '../auth/AuthModal';\nimport SearchModal from './SearchModal';\nimport useFeature from 'hooks/useFeature';\nimport { useNavigate } from 'react-router-dom';\n\nconst HeaderNavigation = ({ isAuthenticated = false, onAuthToggle, onThemeControlsToggle, currentTheme = 'cyberpunk' }) => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [searchModalOpen, setSearchModalOpen] = useState(false);\n  const searchEnabled = useFeature('full_text_search', true);\n  const [searchVal, setSearchVal] = useState('');\n  const searchDebounceRef = useRef(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { userProfile, signOut } = useAuth();\n  const isAdmin = userProfile?.role === 'admin';\n  const isDevAdmin = typeof window !== 'undefined' && window.localStorage.getItem('dev_admin') === 'true';\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n\n  const navigationItems = [\n    {\n      label: 'Home',\n      path: '/portfolio-home-hero',\n      icon: 'Home',\n      tooltip: 'Portfolio home and hero showcase'\n    },\n    {\n      label: 'Projects',\n      path: '/projects-portfolio-grid',\n      icon: 'FolderOpen',\n      tooltip: 'Browse project portfolio'\n    },\n    {\n      label: 'Blog',\n      path: '/blog-content-hub',\n      icon: 'BookOpen',\n      tooltip: 'Read latest blog posts'\n    },\n    {\n      label: 'Dashboard',\n      path: '/admin-dashboard-content-management',\n      icon: 'Settings',\n      tooltip: 'Admin content management',\n      adminOnly: true\n    }\n  ];\n\n  const isActivePath = (path) => {\n    return location.pathname === path;\n  };\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    closeMobileMenu();\n  }, [location.pathname]);\n\n  // Close mobile menu on escape key\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        closeMobileMenu();\n      }\n    };\n\n    if (isMobileMenuOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isMobileMenuOpen]);\n\n  const filteredNavItems = navigationItems; // always show\n\n  return (\n    <>\n      <header className=\"fixed top-0 left-0 right-0 z-50 bg-surface/90 backdrop-blur-md border-b border-border-accent/20\">\n        <nav className=\"max-w-9xl mx-auto px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16 lg:h-18\">\n            {/* Logo */}\n            <Link \n              to=\"/portfolio-home-hero\" \n              className=\"flex items-center space-x-3 group\"\n              aria-label=\"WisdomInTech Portfolio Home\"\n            >\n              <div className=\"relative\">\n                <div className=\"w-8 h-8 bg-gray-800 border border-gray-300 rounded-lg flex items-center justify-center group-hover:shadow-glow-primary transition-all duration-fast\">\n                  <Icon name=\"Code\" size={20} className=\"text-white\" />\n                </div>\n                <div className=\"absolute -inset-1 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-lg blur opacity-0 group-hover:opacity-100 transition-opacity duration-fast -z-10\"></div>\n              </div>\n              <div className=\"hidden sm:block\">\n                <span className=\"font-heading font-bold text-lg text-primary group-hover:text-secondary transition-colors duration-fast\">\n                  WisdomInTech\n                </span>\n                <div className=\"text-xs text-text-secondary font-caption\">\n                  Portfolio\n                </div>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden lg:flex items-center space-x-1\">\n              {filteredNavItems.map((item) => (\n                <Link\n                  key={item.path}\n                  to={item.path}\n                  onClick={(e) => {\n                    if (item.adminOnly && !isAdmin) {\n                      e.preventDefault();\n                      setAuthModalOpen(true);\n                    }\n                  }}\n                  className={`\n                    relative px-4 py-2 rounded-lg font-medium text-sm transition-all duration-fast\n                    flex items-center space-x-2 min-h-[44px]\n                    ${isActivePath(item.path)\n                      ? 'text-primary bg-primary/10 shadow-glow-primary'\n                      : 'text-text-secondary hover:text-primary hover:bg-primary/5'\n                    }\n                  `}\n                  title={item.tooltip}\n                >\n                  <Icon name={item.icon} size={18} />\n                  <span>{item.label}</span>\n                  {isActivePath(item.path) && (\n                    <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full\"></div>\n                  )}\n                </Link>\n              ))}\n            </div>\n\n            {/* Desktop Search, Auth Toggle and Theme Controls */}\n            <div className=\"hidden lg:flex items-center space-x-4\">\n              {searchEnabled && (\n                <div className=\"relative group\">\n                  <input\n                    type=\"text\"\n                    value={searchVal}\n                    onChange={(e) => {\n                      const v = e.target.value; setSearchVal(v); clearTimeout(searchDebounceRef.current); searchDebounceRef.current = setTimeout(()=>{ if (v.trim().length>1) navigate(`/search?q=${encodeURIComponent(v.trim())}`); }, 300);\n                    }}\n                    placeholder=\"Search posts…\"\n                    className=\"w-56 px-3 py-2 rounded-lg bg-background/60 border border-border-accent/30 focus:border-primary focus:outline-none text-sm placeholder-text-secondary/50 transition\"\n                    aria-label=\"Search posts\"\n                  />\n                  <Icon name=\"Search\" size={14} className=\"absolute top-1/2 -translate-y-1/2 right-2 text-text-secondary/60\" />\n                </div>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSearchModalOpen(true)}\n                iconName=\"Search\"\n                className=\"p-2\"\n                title=\"Search portfolio\"\n              />\n              {onThemeControlsToggle && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onThemeControlsToggle}\n                  iconName=\"Palette\"\n                  className=\"p-2\"\n                  title=\"Open theme controls\"\n                />\n              )}\n              {isAdmin ? (\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={signOut}\n                  iconName=\"LogOut\"\n                  iconPosition=\"left\"\n                  className=\"min-w-[100px]\"\n                >\n                  Logout\n                </Button>\n              ) : (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setAuthModalOpen(true)}\n                  iconName=\"LogIn\"\n                  iconPosition=\"left\"\n                  className=\"min-w-[120px]\"\n                >\n                  Admin Login\n                </Button>\n              )}\n              {isDevAdmin && (\n                <span className=\"ml-2 text-xs px-2 py-1 rounded-full border border-yellow-400/40 text-yellow-300 bg-yellow-500/10\">\n                  Dev OTP\n                </span>\n              )}\n            </div>\n\n            {/* Mobile Menu Button */}\n            <div className=\"lg:hidden flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSearchModalOpen(true)}\n                iconName=\"Search\"\n                className=\"p-2\"\n                title=\"Search portfolio\"\n              />\n              {onThemeControlsToggle && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onThemeControlsToggle}\n                  iconName=\"Palette\"\n                  className=\"p-2\"\n                  title=\"Open theme controls\"\n                />\n              )}\n              {isAdmin ? (\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={signOut}\n                  iconName=\"LogOut\"\n                  className=\"p-2\"\n                  title=\"Logout\"\n                />\n              ) : (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setAuthModalOpen(true)}\n                  iconName=\"LogIn\"\n                  className=\"p-2\"\n                  title=\"Admin Login\"\n                />\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleMobileMenu}\n                iconName={isMobileMenuOpen ? \"X\" : \"Menu\"}\n                className=\"p-2\"\n                title=\"Toggle navigation menu\"\n              />\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* Mobile Menu Overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 z-40 lg:hidden\"\n          onClick={closeMobileMenu}\n        >\n          <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm\"></div>\n        </div>\n      )}\n\n      {/* Mobile Menu Drawer */}\n      <div className={`\n        fixed top-16 right-0 bottom-0 z-50 w-80 max-w-[85vw] bg-surface border-l border-border-accent/20\n        transform transition-transform duration-normal lg:hidden\n        ${isMobileMenuOpen ? 'translate-x-0' : 'translate-x-full'}\n      `}>\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex-1 overflow-y-auto py-6\">\n            <nav className=\"px-6 space-y-2\">\n              {filteredNavItems.map((item) => (\n                <Link\n                  key={item.path}\n                  to={item.path}\n                  onClick={(e) => {\n                    if (item.adminOnly && !isAdmin) {\n                      e.preventDefault();\n                      setAuthModalOpen(true);\n                      return;\n                    }\n                    closeMobileMenu();\n                  }}\n                  className={`\n                    flex items-center space-x-3 px-4 py-3 rounded-lg font-medium\n                    transition-all duration-fast min-h-[48px]\n                    ${isActivePath(item.path)\n                      ? 'text-primary bg-primary/10 shadow-glow-primary'\n                      : 'text-text-secondary hover:text-primary hover:bg-primary/5'\n                    }\n                  `}\n                >\n                  <Icon name={item.icon} size={20} />\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{item.label}</div>\n                    <div className=\"text-xs text-text-secondary font-caption\">\n                      {item.tooltip}\n                    </div>\n                  </div>\n                  {isActivePath(item.path) && (\n                    <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                  )}\n                </Link>\n              ))}\n            </nav>\n          </div>\n\n          {/* Mobile Menu Footer */}\n          <div className=\"border-t border-border-accent/20 p-6\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-text-secondary font-caption\">\n                WisdomInTech\n              </div>\n              <div className=\"text-xs text-text-secondary/60 mt-1\">\n                Neo-Cyberpunk Experience\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Search Modal */}\n      <SearchModal \n        isOpen={searchModalOpen} \n        onClose={() => setSearchModalOpen(false)} \n        currentTheme={currentTheme}\n      />\n\n      {/* Auth Modal */}\n      <AuthModal isOpen={authModalOpen} onClose={() => setAuthModalOpen(false)} defaultMode=\"login\" />\n\n      {/* Floating Admin badge */}\n      {!isAdmin && (\n        <button\n          onClick={() => setAuthModalOpen(true)}\n          className=\"fixed bottom-6 left-6 z-50 px-3 py-1.5 rounded-full bg-surface border border-border-accent/40 text-xs text-text-secondary hover:text-text-primary hover:border-primary/60 shadow backdrop-blur-sm\"\n          title=\"Admin? Click to login\"\n        >\n          Admin?\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default HeaderNavigation;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/Input.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { forwardRef } from \"react\";\n\nconst Input = forwardRef(({ className = \"\", type = \"text\", ...props }, ref) => {\n\n    // CheckBox-specific styles\n    if (type === \"checkbox\") {\n        const checkboxClass =\n            \"h-4 w-4 mx-1 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n        return (\n            <input\n                type=\"checkbox\"\n                className={checkboxClass}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n\n    // Radio button-specific styles\n    if (type === \"radio\") {\n        const radioClass =\n            \"h-4 w-4 mx-1 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n        return (\n            <input\n                type=\"radio\"\n                className={radioClass + \" \" + className}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n\n    const baseClass =\n        \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\";\n\n    return (\n        <input\n            type={type}\n            className={baseClass + \" \" + className}\n            ref={ref}\n            {...props}\n        />\n    );\n});\n\nInput.displayName = \"Input\";\n\nexport default Input;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/LogoCarousel.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [67, 78], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 13,
        "fix": { "range": [60, 94], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [67, 78], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState, useRef } from 'react';\nimport Image from '../AppImage';\n\nconst LogoCarousel = ({ images = [], autoPlay = true, speed = 3000, showDots = true }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Create infinite loop by duplicating images\n  const infiniteImages = images.length > 0 ? [...images, ...images, ...images] : [];\n  const startIndex = images.length; // Start from the middle set\n\n  useEffect(() => {\n    if (images.length > 0) {\n      setCurrentIndex(startIndex);\n    }\n  }, [images.length, startIndex]);\n\n  useEffect(() => {\n    if (!autoPlay || images.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setIsTransitioning(true);\n      setCurrentIndex(prevIndex => {\n        const nextIndex = prevIndex + 1;\n        \n        // If we've reached the end of the last set, reset to the beginning of the middle set\n        if (nextIndex >= infiniteImages.length) {\n          setTimeout(() => {\n            setIsTransitioning(false);\n            setCurrentIndex(startIndex);\n          }, 50);\n          return startIndex;\n        }\n        \n        // If we've completed the middle set, smoothly transition\n        if (nextIndex >= startIndex + images.length) {\n          setTimeout(() => {\n            setIsTransitioning(false);\n            setCurrentIndex(startIndex);\n          }, speed);\n        }\n        \n        return nextIndex;\n      });\n    }, speed);\n\n    return () => clearInterval(interval);\n  }, [autoPlay, images.length, speed, infiniteImages.length, startIndex]);\n\n  if (!images.length) {\n    return (\n      <div className=\"flex items-center justify-center h-32 bg-surface/20 rounded-lg border border-border-accent/20\">\n        <p className=\"text-text-secondary\">No logos to display</p>\n      </div>\n    );\n  }\n\n  if (images.length === 1) {\n    return (\n      <div className=\"flex items-center justify-center h-32 p-4 bg-surface/20 rounded-lg border border-border-accent/20\">\n        <Image\n          src={images[0]}\n          alt=\"Logo\"\n          className=\"max-h-20 max-w-full object-contain hover:scale-110 transition-transform duration-300\"\n        />\n      </div>\n    );\n  }\n\n  const itemWidth = 100 / Math.min(images.length, 4);\n\n  return (\n    <div className=\"relative overflow-hidden rounded-lg bg-surface/20 border border-border-accent/20\">\n      {/* Infinite scroll container */}\n      <div className=\"flex h-32 items-center\">\n        <div \n          ref={carouselRef}\n          className={`flex transition-transform duration-1000 ease-in-out ${isTransitioning ? '' : 'transition-none'}`}\n          style={{\n            transform: `translateX(-${currentIndex * itemWidth}%)`,\n            width: `${infiniteImages.length * itemWidth}%`\n          }}\n        >\n          {infiniteImages.map((image, index) => (\n            <div\n              key={`${index}-${image}`}\n              className=\"flex-shrink-0 flex items-center justify-center p-4 group\"\n              style={{ width: `${100 / infiniteImages.length}%` }}\n            >\n              <Image\n                src={image}\n                alt={`Logo ${(index % images.length) + 1}`}\n                className=\"max-h-20 max-w-full object-contain filter hover:brightness-110 transition-all duration-300 group-hover:scale-110 cursor-pointer\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation dots - only show if requested and more than 4 images */}\n      {showDots && images.length > 4 && (\n        <div className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          {images.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => {\n                setIsTransitioning(true);\n                setCurrentIndex(startIndex + index);\n              }}\n              className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                (currentIndex - startIndex) % images.length === index\n                  ? 'bg-primary scale-125'\n                  : 'bg-border-accent/40 hover:bg-border-accent/60'\n              }`}\n              aria-label={`View logo ${index + 1}`}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Gradient overlays for seamless effect */}\n      <div className=\"absolute top-0 left-0 w-8 h-full bg-gradient-to-r from-surface/20 to-transparent pointer-events-none z-10\"></div>\n      <div className=\"absolute top-0 right-0 w-8 h-full bg-gradient-to-l from-surface/20 to-transparent pointer-events-none z-10\"></div>\n    </div>\n  );\n};\n\nexport default LogoCarousel;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/MarkdownToolbar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/RoleBadge.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 28], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React from 'react';\n\n// Shared RoleBadge component honoring theme semantic classes.\n// Props: role (admin|publisher|viewer), email (optional for super-admin detection), adminEmail (optional override)\nexport default function RoleBadge({ role, email, adminEmail }) {\n  if (!role) return null;\n  const isSuper = role === 'admin' && adminEmail && email && email === adminEmail;\n  const base = 'inline-flex items-center gap-1 px-1.5 py-0.5 rounded text-[10px] font-semibold tracking-wide border uppercase';\n  if (isSuper) return <span className={base + ' bg-gradient-to-r from-primary to-accent border-primary/60 text-background shadow-glow-primary'}>SUPER ADMIN</span>;\n  if (role === 'admin') return <span className={base + ' bg-primary/15 border-primary/40 text-primary'}>ADMIN</span>;\n  if (role === 'publisher') return <span className={base + ' bg-warning/15 border-warning/40 text-warning'}>PUBLISHER</span>;\n  return <span className={base + ' bg-surface/60 border-border-accent/30 text-text-secondary'}>VIEWER</span>;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/components/ui/SearchModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [60, 100], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [60, 101], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [60, 100], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [108, 118], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [101, 133], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [108, 118], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'searchableContent'. Either include it or remove the dependency array.",
        "line": 96,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 96,
        "endColumn": 19,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [searchQuery, searchableContent]",
            "fix": {
              "range": [3919, 3932],
              "text": "[searchQuery, searchableContent]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../AppIcon';\n\nconst SearchModal = ({ isOpen, onClose, currentTheme }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  // Mock search data - in real app, this would come from API\n  const searchableContent = [\n    { type: 'page', title: 'Home', url: '/portfolio-home-hero', description: 'Portfolio homepage with projects and skills' },\n    { type: 'page', title: 'Projects', url: '/projects-portfolio-grid', description: 'Browse all portfolio projects' },\n    { type: 'page', title: 'Blog', url: '/blog-content-hub', description: 'Read blog posts and articles' },\n    { type: 'page', title: 'Admin Dashboard', url: '/admin-dashboard-content-management', description: 'Content management and settings' },\n    { type: 'page', title: 'Documentation', url: '/documentation', description: 'API documentation and usage guides' },\n    { type: 'project', title: 'E-commerce Platform', url: '/project/1', description: 'Full-stack e-commerce solution with React and Node.js' },\n    { type: 'project', title: 'Mobile App Design', url: '/project/2', description: 'UI/UX design for iOS and Android application' },\n    { type: 'blog', title: 'React Best Practices', url: '/blog/react-best-practices', description: 'Essential tips for React development' },\n    { type: 'blog', title: 'Web Performance Optimization', url: '/blog/web-performance', description: 'Techniques to improve website speed' },\n  ];\n\n  const getThemeClasses = () => {\n    switch (currentTheme) {\n      case 'light':\n        return {\n          modal: 'bg-white border-gray-200',\n          text: 'text-gray-900',\n          textSecondary: 'text-gray-600',\n          input: 'bg-gray-50 border-gray-200 text-gray-900 placeholder-gray-500',\n          item: 'hover:bg-gray-50',\n          badge: {\n            page: 'bg-blue-100 text-blue-800',\n            project: 'bg-green-100 text-green-800',\n            blog: 'bg-purple-100 text-purple-800'\n          }\n        };\n      case 'dark':\n        return {\n          modal: 'bg-gray-800 border-gray-600',\n          text: 'text-gray-100',\n          textSecondary: 'text-gray-400',\n          input: 'bg-gray-700 border-gray-600 text-gray-100 placeholder-gray-400',\n          item: 'hover:bg-gray-700',\n          badge: {\n            page: 'bg-blue-800 text-blue-200',\n            project: 'bg-green-800 text-green-200',\n            blog: 'bg-purple-800 text-purple-200'\n          }\n        };\n      default: // cyberpunk, neural, futuristic\n        return {\n          modal: 'bg-surface border-primary/20',\n          text: 'text-text-primary',\n          textSecondary: 'text-text-secondary',\n          input: 'bg-background border-primary/30 text-text-primary placeholder-text-secondary',\n          item: 'hover:bg-primary/10',\n          badge: {\n            page: 'bg-primary/20 text-primary',\n            project: 'bg-secondary/20 text-secondary',\n            blog: 'bg-accent/20 text-accent'\n          }\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!searchQuery.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setLoading(true);\n    \n    // Simulate API delay\n    const timeoutId = setTimeout(() => {\n      const results = searchableContent.filter(item => \n        item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.description.toLowerCase().includes(searchQuery.toLowerCase())\n      ).slice(0, 8); // Limit to 8 results\n      \n      setSearchResults(results);\n      setLoading(false);\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery]);\n\n  const handleClose = () => {\n    setSearchQuery('');\n    setSearchResults([]);\n    onClose();\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape') {\n      handleClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-start justify-center pt-20\"\n      onClick={handleClose}\n    >\n      <div \n        className={`w-full max-w-2xl mx-4 ${themeClasses.modal} rounded-lg shadow-2xl border overflow-hidden`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Search Input */}\n        <div className=\"p-4 border-b border-current border-opacity-10\">\n          <div className=\"flex items-center gap-3\">\n            <Icon name=\"Search\" size={20} className={themeClasses.textSecondary} />\n            <input\n              ref={inputRef}\n              type=\"text\"\n              placeholder=\"Search pages, projects, and blog posts...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={handleKeyDown}\n              className={`flex-1 bg-transparent border-none outline-none text-lg ${themeClasses.text} placeholder:${themeClasses.textSecondary}`}\n            />\n            <button\n              onClick={handleClose}\n              className={`p-1 rounded hover:bg-current hover:bg-opacity-10 ${themeClasses.textSecondary}`}\n            >\n              <Icon name=\"X\" size={16} />\n            </button>\n          </div>\n        </div>\n\n        {/* Search Results */}\n        <div className=\"max-h-96 overflow-y-auto\">\n          {loading && (\n            <div className=\"p-4 text-center\">\n              <div className={`inline-flex items-center gap-2 ${themeClasses.textSecondary}`}>\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\"></div>\n                Searching...\n              </div>\n            </div>\n          )}\n\n          {!loading && searchQuery && searchResults.length === 0 && (\n            <div className=\"p-4 text-center\">\n              <Icon name=\"Search\" size={32} className={themeClasses.textSecondary} />\n              <p className={`mt-2 ${themeClasses.textSecondary}`}>\n                No results found for \"{searchQuery}\"\n              </p>\n            </div>\n          )}\n\n          {!loading && searchResults.length > 0 && (\n            <div className=\"p-2\">\n              {searchResults.map((result, index) => (\n                <Link\n                  key={index}\n                  to={result.url}\n                  onClick={handleClose}\n                  className={`block p-3 rounded-lg ${themeClasses.item} transition-colors duration-fast`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      <Icon \n                        name={result.type === 'page' ? 'FileText' : result.type === 'project' ? 'Folder' : 'BookOpen'} \n                        size={16} \n                        className={themeClasses.textSecondary} \n                      />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className={`font-medium ${themeClasses.text} truncate`}>\n                          {result.title}\n                        </h3>\n                        <span className={`px-2 py-1 text-xs rounded-full ${themeClasses.badge[result.type]}`}>\n                          {result.type}\n                        </span>\n                      </div>\n                      <p className={`text-sm ${themeClasses.textSecondary} line-clamp-1`}>\n                        {result.description}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n\n          {!searchQuery && (\n            <div className=\"p-4\">\n              <p className={`text-sm ${themeClasses.textSecondary} mb-3`}>\n                Popular searches:\n              </p>\n              <div className=\"flex flex-wrap gap-2\">\n                {['Projects', 'Blog', 'React', 'Documentation', 'Admin'].map((term) => (\n                  <button\n                    key={term}\n                    onClick={() => setSearchQuery(term)}\n                    className={`px-3 py-1 text-sm rounded-full border ${themeClasses.textSecondary} hover:${themeClasses.text} border-current border-opacity-20 hover:border-opacity-40 transition-colors duration-fast`}\n                  >\n                    {term}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className={`px-4 py-2 border-t border-current border-opacity-10 ${themeClasses.textSecondary} text-xs`}>\n          <div className=\"flex items-center justify-between\">\n            <span>Press ESC to close</span>\n            <span>↑↓ to navigate • ↵ to select</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchModal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/contexts/AuthContext.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'_' is defined but never used.",
        "line": 35,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 19
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 59,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 59,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [2191, 2240], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 118,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 118,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3836, 3873], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 140,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 140,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4569, 4606], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 160,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 160,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5199, 5242], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 180,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 180,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5769, 5807], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 209,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 209,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6620, 6664], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 230,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 230,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [7241, 7285], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport authService from \"../utils/authService\";\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    // Initialize auth state\n    const initializeAuth = async () => {\n      try {\n        setLoading(true);\n        setAuthError(null);\n\n        // Dev-only admin bootstrap: if dev_admin flag is present, synthesize admin user/profile\n        try {\n          const isDev = typeof import.meta !== 'undefined' && import.meta && import.meta.env && import.meta.env.DEV;\n          if (isDev && typeof window !== 'undefined' && window.localStorage.getItem('dev_admin') === 'true') {\n            const email = window.localStorage.getItem('dev_admin_email') || 'admin@local.dev';\n            const syntheticUser = { id: 'dev-admin', email };\n            const syntheticProfile = { id: 'dev-admin', email, full_name: 'Dev Admin', role: 'admin' };\n            if (isMounted) {\n              setUser(syntheticUser);\n              setUserProfile(syntheticProfile);\n              setLoading(false);\n              return; // Skip Supabase check\n            }\n          }\n        } catch (_) {}\n\n        const sessionResult = await authService.getSession();\n\n        if (\n          sessionResult?.success &&\n          sessionResult?.data?.session?.user &&\n          isMounted\n        ) {\n          const authUser = sessionResult.data.session.user;\n          setUser(authUser);\n\n          // Fetch user profile\n          const profileResult = await authService.getUserProfile(authUser.id);\n\n          if (profileResult?.success && isMounted) {\n            setUserProfile(profileResult.data);\n          } else if (isMounted) {\n            setAuthError(profileResult?.error || \"Failed to load user profile\");\n          }\n        }\n      } catch (error) {\n        if (isMounted) {\n          setAuthError(\"Failed to initialize authentication\");\n          console.log(\"Auth initialization error:\", error);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = authService.onAuthStateChange(async (event, session) => {\n      if (!isMounted) return;\n\n      setAuthError(null);\n\n      if (event === \"SIGNED_IN\" && session?.user) {\n        setUser(session.user);\n\n        // Fetch user profile for signed in user\n        authService.getUserProfile(session.user.id).then((profileResult) => {\n          if (profileResult?.success && isMounted) {\n            setUserProfile(profileResult.data);\n          } else if (isMounted) {\n            setAuthError(profileResult?.error || \"Failed to load user profile\");\n          }\n        });\n      } else if (event === \"SIGNED_OUT\") {\n        setUser(null);\n        setUserProfile(null);\n      } else if (event === \"TOKEN_REFRESHED\" && session?.user) {\n        setUser(session.user);\n      }\n    });\n\n    return () => {\n      isMounted = false;\n      subscription?.unsubscribe?.();\n    };\n  }, []);\n\n  // Sign in function\n  const signIn = async (email, password) => {\n    try {\n      setAuthError(null);\n      const result = await authService.signIn(email, password);\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"Login failed\");\n        return { success: false, error: result?.error };\n      }\n\n      return { success: true, data: result.data };\n    } catch (error) {\n      const errorMsg = \"Something went wrong during login. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"Sign in error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // OTP flow removed for production; dev fallback remains in authService for local testing only\n\n  // Sign up function\n  const signUp = async (email, password, userData = {}) => {\n    try {\n      setAuthError(null);\n      const result = await authService.signUp(email, password, userData);\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"Signup failed\");\n        return { success: false, error: result?.error };\n      }\n\n      return { success: true, data: result.data };\n    } catch (error) {\n      const errorMsg = \"Something went wrong during signup. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"Sign up error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // OAuth sign in function\n  const signInWithOAuth = async (provider) => {\n    try {\n      setAuthError(null);\n      const result = await authService.signInWithOAuth(provider);\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"OAuth login failed\");\n        return { success: false, error: result?.error };\n      }\n\n      return { success: true, data: result.data };\n    } catch (error) {\n      const errorMsg = \"Something went wrong during OAuth login. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"OAuth sign in error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      setAuthError(null);\n      const result = await authService.signOut();\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"Logout failed\");\n        return { success: false, error: result?.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      const errorMsg = \"Something went wrong during logout. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"Sign out error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async (updates) => {\n    try {\n      setAuthError(null);\n\n      if (!user?.id) {\n        const errorMsg = \"User not authenticated\";\n        setAuthError(errorMsg);\n        return { success: false, error: errorMsg };\n      }\n\n      const result = await authService.updateUserProfile(user.id, updates);\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"Profile update failed\");\n        return { success: false, error: result?.error };\n      }\n\n      setUserProfile(result.data);\n      return { success: true, data: result.data };\n    } catch (error) {\n      const errorMsg =\n        \"Something went wrong updating profile. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"Update profile error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // Reset password function\n  const resetPassword = async (email) => {\n    try {\n      setAuthError(null);\n      const result = await authService.resetPassword(email);\n\n      if (!result?.success) {\n        setAuthError(result?.error || \"Password reset failed\");\n        return { success: false, error: result?.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      const errorMsg =\n        \"Something went wrong sending reset email. Please try again.\";\n      setAuthError(errorMsg);\n      console.log(\"Reset password error:\", error);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    authError,\n    signIn,\n    signUp,\n    signInWithOAuth,\n    signOut,\n    updateProfile,\n    resetPassword,\n    clearError: () => setAuthError(null),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport default AuthContext;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/contexts/ToastContext.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { createContext, useCallback, useContext, useMemo, useState } from 'react';\n\nconst ToastContext = createContext(null);\n\nlet idSeq = 1;\n\nexport const ToastProvider = ({ children, defaultDuration = 3500 }) => {\n  const [toasts, setToasts] = useState([]);\n\n  const remove = useCallback((id) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n  }, []);\n\n  const show = useCallback((message, opts = {}) => {\n    const id = idSeq++;\n    const toast = {\n      id,\n      message,\n      type: opts.type || 'info', // success | error | warning | info\n      duration: opts.duration ?? defaultDuration,\n    };\n    setToasts((prev) => [...prev, toast]);\n    if (toast.duration > 0) {\n      setTimeout(() => remove(id), toast.duration);\n    }\n    return id;\n  }, [defaultDuration, remove]);\n\n  const value = useMemo(() => ({ show, remove, toasts }), [show, remove, toasts]);\n\n  return (\n    <ToastContext.Provider value={value}>{children}</ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const ctx = useContext(ToastContext);\n  if (!ctx) throw new Error('useToast must be used within ToastProvider');\n  return ctx;\n};\n\nexport const ToastContainer = () => {\n  const { toasts, remove } = useToast();\n  return (\n    <div className=\"fixed right-4 top-20 sm:top-24 z-40 space-y-2 pointer-events-none\">\n      {toasts.map((t) => (\n        <div\n          key={t.id}\n          role=\"status\"\n          className={\n            `min-w-[260px] max-w-sm px-4 py-3 rounded-lg shadow-lg border text-sm transition-all ` +\n            (t.type === 'success' ? 'bg-success/15 border-success/30 text-success' :\n             t.type === 'error' ? 'bg-error/15 border-error/30 text-error' :\n             t.type === 'warning' ? 'bg-warning/15 border-warning/30 text-warning' :\n             'bg-surface border-border-accent/30 text-text-primary')\n          }\n          style={{ pointerEvents: 'auto' }}\n        >\n          <div className=\"flex items-start gap-3\">\n            <span className=\"flex-1\">{t.message}</span>\n            <button\n              className=\"text-text-secondary hover:text-text-primary\"\n              onClick={() => remove(t.id)}\n              aria-label=\"Dismiss\"\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ToastContext;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/hooks/useFeature.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Inspector' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Inspector" },
            "fix": { "range": [27, 75], "text": "" },
            "desc": "Remove unused variable 'Inspector'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Inspector' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19,
        "fix": { "range": [27, 76], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Inspector" },
            "fix": { "range": [27, 75], "text": "" },
            "desc": "Remove unused variable 'Inspector'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'App' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "App" },
            "fix": { "range": [130, 139], "text": "" },
            "desc": "Remove unused variable 'App'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'App' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 11,
        "fix": { "range": [123, 148], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "App" },
            "fix": { "range": [130, 139], "text": "" },
            "desc": "Remove unused variable 'App'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React from \"react\";\nimport { Inspector } from \"react-dev-inspector\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./styles/tailwind.css\";\nimport \"./styles/index.css\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\n\nconst Root = (\n\t<React.StrictMode>\n\t\t{import.meta.env.DEV ? (\n\t\t\t<Inspector>\n\t\t\t\t<App />\n\t\t\t</Inspector>\n\t\t) : (\n\t\t\t<App />\n\t\t)}\n\t</React.StrictMode>\n);\n\nroot.render(Root);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/NotFound.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [97, 109], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [90, 133], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [97, 109], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [140, 150], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "fix": { "range": [133, 173], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [140, 150], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'components/ui/Button';\nimport Icon from 'components/AppIcon';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.__SUPPRESS_CANONICAL = true;\n    }\n    return () => {\n      if (typeof window !== 'undefined') delete window.__SUPPRESS_CANONICAL;\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"text-center max-w-md\">\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"relative\">\n            <h1 className=\"text-9xl font-bold text-primary opacity-20\">404</h1>\n          </div>\n        </div>\n\n        <h2 className=\"text-2xl font-medium text-onBackground mb-2\">Page Not Found</h2>\n        <p className=\"text-onBackground/70 mb-8\">\n          The page you're looking for doesn't exist. Let's get you back!\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            variant=\"primary\"\n            icon={<Icon name=\"ArrowLeft\" />}\n            iconPosition=\"left\"\n            onClick={() => window.history.back()}\n          >\n            Go Back\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            icon={<Icon name=\"Home\" />}\n            iconPosition=\"left\"\n            onClick={handleGoHome}\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/ResetPassword.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [153, 164], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [146, 190], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [153, 164], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [197, 209], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "fix": { "range": [190, 236], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [197, 209], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [243, 253], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "fix": { "range": [236, 279], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [243, 253], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'data' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "data" },
            "fix": { "range": [717, 722], "text": "" },
            "desc": "Remove unused variable 'data'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 22,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 22,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [830, 882], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 30,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 59,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../utils/supabase';\nimport Input from '../components/ui/Input';\nimport Button from '../components/ui/Button';\nimport Icon from '../components/AppIcon';\n\nconst ResetPassword = () => {\n  const navigate = useNavigate();\n  const [status, setStatus] = useState('init'); // init | ready | error | done\n  const [error, setError] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        // Exchange recovery token for a session if present in URL\n        const { data, error } = await supabase.auth.exchangeCodeForSession(window.location.href);\n        if (error) {\n          console.log('exchangeCodeForSession error:', error);\n          if (mounted) {\n            setStatus('error');\n            setError('Invalid or expired reset link. Please request a new one.');\n          }\n          return;\n        }\n        if (mounted) setStatus('ready');\n      } catch (e) {\n        if (mounted) {\n          setStatus('error');\n          setError('Something went wrong initializing password reset.');\n        }\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    if (!password || password.length < 8) {\n      setError('Password must be at least 8 characters long.');\n      return;\n    }\n    if (password !== confirm) {\n      setError('Passwords do not match.');\n      return;\n    }\n    try {\n      const { error } = await supabase.auth.updateUser({ password });\n      if (error) {\n        setError(error.message || 'Failed to update password.');\n        return;\n      }\n      setStatus('done');\n      setTimeout(() => navigate('/admin-dashboard-content-management'), 1500);\n    } catch (e) {\n      setError('Unexpected error while updating password.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-md bg-surface border border-border-accent/20 rounded-lg p-6 shadow-glow-primary\">\n        <div className=\"text-center mb-6\">\n          <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Icon name=\"Lock\" size={24} className=\"text-primary\" />\n          </div>\n          <h1 className=\"text-2xl font-heading font-bold text-text-primary\">Reset Password</h1>\n          <p className=\"text-text-secondary text-sm mt-1\">Set a new password for your admin account.</p>\n        </div>\n\n        {status === 'init' && (\n          <div className=\"text-center text-text-secondary text-sm\">Preparing reset…</div>\n        )}\n\n        {status === 'error' && (\n          <div className=\"text-error text-sm mb-4\">{error}</div>\n        )}\n\n        {status === 'ready' && (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && <div className=\"text-error text-sm\">{error}</div>}\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">New Password</label>\n              <Input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Enter new password\" autoFocus />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">Confirm Password</label>\n              <Input type=\"password\" value={confirm} onChange={(e) => setConfirm(e.target.value)} placeholder=\"Re-enter new password\" />\n            </div>\n            <Button type=\"submit\" variant=\"primary\" className=\"w-full\">Update Password</Button>\n          </form>\n        )}\n\n        {status === 'done' && (\n          <div className=\"text-success text-center text-sm\">Password updated. Redirecting…</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/FeatureFlags.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [59, 81], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 24,
        "fix": { "range": [52, 115], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [59, 81], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",
        "line": 45,
        "column": 32,
        "nodeType": "ArrayExpression",
        "endLine": 45,
        "endColumn": 34,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [load]",
            "fix": { "range": [1801, 1803], "text": "[load]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState } from 'react';\nimport HeaderNavigation from 'components/ui/HeaderNavigation';\nimport useFeature, { resetAllFeatureOverrides } from 'hooks/useFeature';\n\nexport default function FeatureFlagsPage() {\n  const adminGateEnabled = useFeature('feature_flags_admin', true); // always true until gated separately\n  const [flags, setFlags] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [saving, setSaving] = useState(null); // flag key currently saving\n  const [creating, setCreating] = useState(false);\n  const [newFlag, setNewFlag] = useState({ key: '', note: '', enabled: true });\n  const [editingNoteKey, setEditingNoteKey] = useState(null);\n  const [noteDraft, setNoteDraft] = useState('');\n  const [overrideKeys, setOverrideKeys] = useState(() => {\n    if (typeof window === 'undefined') return [];\n    try {\n      const raw = localStorage.getItem('featureFlagOverrides:v1');\n      if (!raw) return [];\n      return Object.keys(JSON.parse(raw));\n    } catch { return []; }\n  });\n\n  function refreshOverrideKeys() {\n    if (typeof window === 'undefined') return;\n    try {\n      const raw = localStorage.getItem('featureFlagOverrides:v1');\n      setOverrideKeys(raw ? Object.keys(JSON.parse(raw)) : []);\n    } catch { /* ignore */ }\n  }\n\n  async function load() {\n    setLoading(true); setError(null);\n    try {\n      const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/settings/features');\n      if (!res.ok) throw new Error(await res.text());\n      const data = await res.json();\n      setFlags(data);\n      refreshOverrideKeys();\n    } catch (e) {\n      setError(e.message || 'Failed to load flags');\n    } finally { setLoading(false); }\n  }\n\n  useEffect(() => { load(); }, []);\n\n  async function upsertFlag({ key, enabled, note }) {\n    setSaving(key);\n    try {\n      const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/settings/features', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ flag_key: key, enabled, note })\n      });\n      if (!res.ok) throw new Error(await res.text());\n      const updated = await res.json();\n      setFlags(f => {\n        const exists = f.some(ff => ff.flagKey === updated.flagKey);\n        return exists ? f.map(ff => ff.flagKey === updated.flagKey ? updated : ff) : [...f, updated];\n      });\n      return updated;\n    } catch (e) {\n      alert('Update failed: ' + e.message);\n    } finally { setSaving(null); }\n  }\n\n  async function toggleFlag(key, current) {\n    await upsertFlag({ key, enabled: !current });\n  }\n\n  async function createFlag(e) {\n    e.preventDefault();\n    if (!newFlag.key.trim()) return;\n    await upsertFlag({ key: newFlag.key.trim(), enabled: newFlag.enabled, note: newFlag.note || null });\n    setNewFlag({ key: '', note: '', enabled: true });\n    setCreating(false);\n  }\n\n  function startEditNote(flag) {\n    setEditingNoteKey(flag.flagKey);\n    setNoteDraft(flag.note || '');\n  }\n  async function saveNote(flag) {\n    await upsertFlag({ key: flag.flagKey, enabled: flag.enabled, note: noteDraft });\n    setEditingNoteKey(null);\n  }\n\n  function overrideBadge(flagKey) {\n    const overridden = overrideKeys.includes(flagKey);\n    if (!overridden) return null;\n    return <span className=\"ml-2 text-[10px] px-1.5 py-0.5 rounded bg-amber-500/15 text-amber-400 border border-amber-500/30\">overridden</span>;\n  }\n\n  function resetOverrides() {\n    resetAllFeatureOverrides();\n    refreshOverrideKeys();\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeaderNavigation />\n      <main className=\"max-w-5xl mx-auto pt-28 px-6 pb-24\">\n        <div className=\"flex items-start justify-between gap-4 mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-semibold\">Feature Flags</h1>\n            <p className=\"text-text-secondary/80 text-sm mt-1\">Runtime‑fetch flags with local overrides via ?ff=flag:on,other:off. Overrides persist locally.</p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            {overrideKeys.length > 0 && (\n              <button onClick={resetOverrides} className=\"text-xs px-3 py-1.5 rounded bg-amber-500/10 hover:bg-amber-500/20 border border-amber-500/30 text-amber-400\">Reset Overrides ({overrideKeys.length})</button>\n            )}\n            {!creating && (\n              <button onClick={() => setCreating(true)} className=\"text-xs px-3 py-1.5 rounded bg-primary/10 hover:bg-primary/20 border border-primary/40 text-primary\">New Flag</button>\n            )}\n          </div>\n        </div>\n        {!adminGateEnabled && <p className=\"text-text-secondary\">Access disabled.</p>}\n        {adminGateEnabled && (\n          <>\n            {creating && (\n              <form onSubmit={createFlag} className=\"mb-6 p-4 border border-border-accent/30 rounded-lg bg-surface space-y-3\">\n                <div className=\"flex gap-4 flex-wrap\">\n                  <div className=\"flex-1 min-w-[160px]\">\n                    <label className=\"block text-[11px] uppercase tracking-wide text-text-secondary mb-1\">Key</label>\n                    <input value={newFlag.key} onChange={e => setNewFlag(f => ({ ...f, key: e.target.value }))} className=\"w-full px-2 py-1.5 rounded border border-border-accent/40 bg-background\" placeholder=\"e.g. search_snippets\" required />\n                  </div>\n                  <div className=\"w-32\">\n                    <label className=\"block text-[11px] uppercase tracking-wide text-text-secondary mb-1\">Default</label>\n                    <select value={newFlag.enabled ? 'on' : 'off'} onChange={e => setNewFlag(f => ({ ...f, enabled: e.target.value === 'on' }))} className=\"w-full px-2 py-1.5 rounded border border-border-accent/40 bg-background\">\n                      <option value=\"on\">On</option>\n                      <option value=\"off\">Off</option>\n                    </select>\n                  </div>\n                  <div className=\"flex-1 min-w-[200px]\">\n                    <label className=\"block text-[11px] uppercase tracking-wide text-text-secondary mb-1\">Note</label>\n                    <input value={newFlag.note} onChange={e => setNewFlag(f => ({ ...f, note: e.target.value }))} className=\"w-full px-2 py-1.5 rounded border border-border-accent/40 bg-background\" placeholder=\"Purpose / context\" />\n                  </div>\n                </div>\n                <div className=\"flex gap-3 text-xs\">\n                  <button type=\"submit\" disabled={!newFlag.key.trim()} className=\"px-3 py-1.5 rounded bg-primary/10 hover:bg-primary/20 border border-primary/40 text-primary disabled:opacity-50\">Create</button>\n                  <button type=\"button\" onClick={() => { setCreating(false); setNewFlag({ key: '', note: '', enabled: true }); }} className=\"px-3 py-1.5 rounded border border-border-accent/40 hover:bg-border-accent/10\">Cancel</button>\n                </div>\n              </form>\n            )}\n            {loading && <p className=\"text-sm text-text-secondary\">Loading…</p>}\n            {error && <p className=\"text-error text-sm\">{error}</p>}\n            <div className=\"overflow-x-auto border border-border-accent/20 rounded-lg shadow-sm bg-surface\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"bg-border-accent/10 text-text-secondary\">\n                  <tr>\n                    <th className=\"text-left px-4 py-2 font-medium\">Flag</th>\n                    <th className=\"text-left px-4 py-2 font-medium\">Enabled</th>\n                    <th className=\"text-left px-4 py-2 font-medium\">Note</th>\n                    <th className=\"px-4 py-2\" />\n                  </tr>\n                </thead>\n                <tbody>\n                  {flags.map(f => (\n                    <tr key={f.flagKey} className=\"border-t border-border-accent/10\">\n                      <td className=\"px-4 py-2 font-mono text-xs flex items-center\">{f.flagKey}{overrideBadge(f.flagKey)}</td>\n                      <td className=\"px-4 py-2\">\n                        <button\n                          disabled={saving === f.flagKey}\n                          onClick={() => toggleFlag(f.flagKey, f.enabled)}\n                          className={`text-[10px] px-2 py-1 rounded border transition-colors ${f.enabled ? 'bg-green-500/10 text-green-400 border-green-500/30 hover:bg-green-500/20' : 'bg-border-accent/20 text-text-secondary border-border-accent/40 hover:bg-border-accent/30'} disabled:opacity-50`}\n                        >\n                          {saving === f.flagKey ? '…' : (f.enabled ? 'On' : 'Off')}\n                        </button>\n                      </td>\n                      <td className=\"px-4 py-2 text-text-secondary/80 max-w-[320px]\">\n                        {editingNoteKey === f.flagKey ? (\n                          <div className=\"flex items-center gap-2\">\n                            <input value={noteDraft} onChange={e => setNoteDraft(e.target.value)} className=\"flex-1 px-2 py-1 rounded border border-border-accent/40 bg-background text-xs\" />\n                            <button onClick={() => saveNote(f)} className=\"text-[10px] px-2 py-1 rounded bg-primary/10 text-primary border border-primary/30\">Save</button>\n                            <button onClick={() => setEditingNoteKey(null)} className=\"text-[10px] px-2 py-1 rounded border border-border-accent/40\">Cancel</button>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <span title={f.note || ''} className=\"truncate text-xs\">{f.note || '—'}</span>\n                            <button onClick={() => startEditNote(f)} className=\"text-[10px] px-2 py-0.5 rounded border border-border-accent/30 hover:bg-border-accent/10\">Edit</button>\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"px-4 py-2 text-right\" />\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <p className=\"mt-4 text-[11px] text-text-secondary/70\">Changes propagate to clients within ~30s (stale-while-revalidate loop & focus re-fetch). URL overrides via <code>?ff=myFlag:on,otherFlag:off</code>.</p>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/MediaLibrary.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAssets'. Either include it or remove the dependency array.",
        "line": 18,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 18,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAssets, page, tag]",
            "fix": { "range": [625, 636], "text": "[fetchAssets, page, tag]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext.jsx';\n\nexport default function MediaLibrary() {\n  const { user } = useAuth();\n  const [assets, setAssets] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [tag, setTag] = useState('');\n  const [file, setFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [alt, setAlt] = useState('');\n  const pageSize = 24;\n\n  useEffect(() => {\n    fetchAssets(); // eslint-disable-next-line\n  }, [page, tag]);\n\n  async function fetchAssets() {\n    setLoading(true); setError(null);\n    try {\n      const params = new URLSearchParams({ limit: pageSize, offset: (page - 1) * pageSize });\n      if (tag) params.set('tag', tag);\n      const res = await fetch(`/api/media?${params.toString()}`);\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || 'Failed');\n      setAssets(data.items || []);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleUpload(e) {\n    e.preventDefault();\n    if (!file) return;\n    setUploading(true);\n    try {\n      const form = new FormData();\n      form.append('file', file);\n      if (alt) form.append('alt', alt);\n      if (tag) form.append('tags', tag);\n      const res = await fetch('/api/media/upload', { method: 'POST', body: form });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || 'Upload failed');\n      setFile(null); setAlt('');\n      fetchAssets();\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setUploading(false);\n    }\n  }\n\n  if (!user?.is_admin) {\n    return <div className=\"p-6 text-red-600\">Admin access required.</div>;\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-semibold mb-4\">Media Library</h1>\n      <form onSubmit={handleUpload} className=\"mb-6 flex flex-col gap-2 md:flex-row md:items-end\">\n        <div>\n          <label className=\"block text-sm font-medium\">File</label>\n          <input type=\"file\" accept=\"image/*\" onChange={e => setFile(e.target.files?.[0] || null)} />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium\">Alt Text</label>\n          <input className=\"border rounded px-2 py-1\" value={alt} onChange={e => setAlt(e.target.value)} />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium\">Tag</label>\n            <input className=\"border rounded px-2 py-1\" value={tag} onChange={e => { setTag(e.target.value); setPage(1); }} />\n        </div>\n        <button disabled={uploading || !file} className=\"bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50\" type=\"submit\">\n          {uploading ? 'Uploading...' : 'Upload'}\n        </button>\n      </form>\n      {error && <div className=\"text-red-600 mb-4\">{error}</div>}\n      {loading ? <div>Loading...</div> : (\n        <div className=\"grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6\">\n          {assets.map(a => (\n            <figure key={a.id} className=\"border rounded overflow-hidden bg-white shadow-sm\">\n              <div className=\"aspect-square bg-gray-100 flex items-center justify-center overflow-hidden\">\n                <img src={a.url} alt={a.altText || ''} className=\"object-cover w-full h-full\" loading=\"lazy\" />\n              </div>\n              <figcaption className=\"p-2 text-xs break-words\">\n                <div className=\"font-medium truncate\" title={a.url}>{a.url.split('/').pop()}</div>\n                <div className=\"text-gray-500\">{a.width}x{a.height}</div>\n                {a.tags?.length ? <div className=\"mt-1 flex flex-wrap gap-1\">{a.tags.map(t => <span key={t} className=\"bg-gray-200 px-1 rounded\">{t}</span>)}</div> : null}\n              </figcaption>\n            </figure>\n          ))}\n        </div>\n      )}\n      <div className=\"mt-6 flex gap-2\">\n        <button disabled={page === 1} onClick={() => setPage(p => Math.max(1, p - 1))} className=\"px-3 py-1 border rounded disabled:opacity-50\">Prev</button>\n        <span className=\"px-2 py-1\">Page {page}</span>\n        <button onClick={() => setPage(p => p + 1)} className=\"px-3 py-1 border rounded\">Next</button>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/AnalyticsOverview.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BarChart" },
            "fix": { "range": [61, 70], "text": "" },
            "desc": "Remove unused variable 'BarChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BarChart' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "fix": { "range": [60, 70], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BarChart" },
            "fix": { "range": [61, 70], "text": "" },
            "desc": "Remove unused variable 'BarChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Bar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Bar" },
            "fix": { "range": [69, 74], "text": "" },
            "desc": "Remove unused variable 'Bar'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Bar' is defined but never used.",
        "line": 2,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "fix": { "range": [70, 75], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Bar" },
            "fix": { "range": [69, 74], "text": "" },
            "desc": "Remove unused variable 'Bar'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'XAxis' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "XAxis" },
            "fix": { "range": [74, 81], "text": "" },
            "desc": "Remove unused variable 'XAxis'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'XAxis' is defined but never used.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 30,
        "fix": { "range": [75, 82], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "XAxis" },
            "fix": { "range": [74, 81], "text": "" },
            "desc": "Remove unused variable 'XAxis'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'YAxis' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "YAxis" },
            "fix": { "range": [81, 88], "text": "" },
            "desc": "Remove unused variable 'YAxis'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'YAxis' is defined but never used.",
        "line": 2,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "fix": { "range": [82, 89], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "YAxis" },
            "fix": { "range": [81, 88], "text": "" },
            "desc": "Remove unused variable 'YAxis'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'CartesianGrid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CartesianGrid" },
            "fix": { "range": [88, 103], "text": "" },
            "desc": "Remove unused variable 'CartesianGrid'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'CartesianGrid' is defined but never used.",
        "line": 2,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 52,
        "fix": { "range": [89, 104], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CartesianGrid" },
            "fix": { "range": [88, 103], "text": "" },
            "desc": "Remove unused variable 'CartesianGrid'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Tooltip" },
            "fix": { "range": [103, 112], "text": "" },
            "desc": "Remove unused variable 'Tooltip'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Tooltip' is defined but never used.",
        "line": 2,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 61,
        "fix": { "range": [104, 113], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Tooltip" },
            "fix": { "range": [103, 112], "text": "" },
            "desc": "Remove unused variable 'Tooltip'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ResponsiveContainer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResponsiveContainer" },
            "fix": { "range": [112, 133], "text": "" },
            "desc": "Remove unused variable 'ResponsiveContainer'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ResponsiveContainer' is defined but never used.",
        "line": 2,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 82,
        "fix": { "range": [113, 134], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResponsiveContainer" },
            "fix": { "range": [112, 133], "text": "" },
            "desc": "Remove unused variable 'ResponsiveContainer'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'LineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 84,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 93,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LineChart" },
            "fix": { "range": [133, 144], "text": "" },
            "desc": "Remove unused variable 'LineChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'LineChart' is defined but never used.",
        "line": 2,
        "column": 84,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 93,
        "fix": { "range": [134, 145], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LineChart" },
            "fix": { "range": [133, 144], "text": "" },
            "desc": "Remove unused variable 'LineChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Line' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 95,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 99,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Line" },
            "fix": { "range": [144, 150], "text": "" },
            "desc": "Remove unused variable 'Line'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Line' is defined but never used.",
        "line": 2,
        "column": 95,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 99,
        "fix": { "range": [145, 151], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Line" },
            "fix": { "range": [144, 150], "text": "" },
            "desc": "Remove unused variable 'Line'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'PieChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 101,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 109,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PieChart" },
            "fix": { "range": [150, 160], "text": "" },
            "desc": "Remove unused variable 'PieChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'PieChart' is defined but never used.",
        "line": 2,
        "column": 101,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 109,
        "fix": { "range": [151, 161], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PieChart" },
            "fix": { "range": [150, 160], "text": "" },
            "desc": "Remove unused variable 'PieChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Pie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 111,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 114,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Pie" },
            "fix": { "range": [160, 165], "text": "" },
            "desc": "Remove unused variable 'Pie'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Pie' is defined but never used.",
        "line": 2,
        "column": 111,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 114,
        "fix": { "range": [161, 166], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Pie" },
            "fix": { "range": [160, 165], "text": "" },
            "desc": "Remove unused variable 'Pie'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Cell' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 116,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 120,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Cell" },
            "fix": { "range": [165, 171], "text": "" },
            "desc": "Remove unused variable 'Cell'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Cell' is defined but never used.",
        "line": 2,
        "column": 116,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 120,
        "fix": { "range": [165, 171], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Cell" },
            "fix": { "range": [165, 171], "text": "" },
            "desc": "Remove unused variable 'Cell'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [198, 208], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [191, 240], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [198, 208], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 14,
    "source": "import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\nimport Icon from '../../../components/AppIcon';\n\nconst AnalyticsOverview = () => {\n  const [analytics, setAnalytics] = useState({\n    totalViews: 0,\n    uniqueVisitors: 0,\n    pageViews: [],\n    topPages: [],\n    browserStats: [],\n    deviceStats: [],\n    trafficSources: []\n  });\n  const [timeRange, setTimeRange] = useState('7d');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadAnalytics();\n  }, [timeRange]);\n\n  const loadAnalytics = async () => {\n    setLoading(true);\n    try {\n      // Mock analytics data for demonstration\n      // In a real implementation, this would fetch from your analytics API\n      const mockData = {\n        totalViews: 15420,\n        uniqueVisitors: 8930,\n        pageViews: [\n          { date: '2025-09-18', views: 1250, visitors: 890 },\n          { date: '2025-09-19', views: 1350, visitors: 920 },\n          { date: '2025-09-20', views: 1180, visitors: 780 },\n          { date: '2025-09-21', views: 1420, visitors: 980 },\n          { date: '2025-09-22', views: 1680, visitors: 1120 },\n          { date: '2025-09-23', views: 1890, visitors: 1200 },\n          { date: '2025-09-24', views: 2150, visitors: 1340 }\n        ],\n        topPages: [\n          { page: '/portfolio-home-hero', views: 4250, title: 'Home' },\n          { page: '/projects-portfolio-grid', views: 3180, title: 'Projects' },\n          { page: '/blog-content-hub', views: 2890, title: 'Blog' },\n          { page: '/documentation', views: 1670, title: 'Documentation' },\n          { page: '/project/crypto-platform', views: 950, title: 'Crypto Platform' }\n        ],\n        browserStats: [\n          { name: 'Chrome', value: 65, count: 5850 },\n          { name: 'Firefox', value: 18, count: 1607 },\n          { name: 'Safari', value: 12, count: 1072 },\n          { name: 'Edge', value: 5, count: 447 }\n        ],\n        deviceStats: [\n          { name: 'Desktop', value: 68, count: 6072 },\n          { name: 'Mobile', value: 28, count: 2500 },\n          { name: 'Tablet', value: 4, count: 357 }\n        ],\n        trafficSources: [\n          { source: 'Direct', visits: 3580, percentage: 40 },\n          { source: 'Google', visits: 2865, percentage: 32 },\n          { source: 'GitHub', visits: 1250, percentage: 14 },\n          { source: 'LinkedIn', visits: 895, percentage: 10 },\n          { source: 'Twitter', visits: 340, percentage: 4 }\n        ]\n      };\n\n      setAnalytics(mockData);\n    } catch (error) {\n      console.error('Failed to load analytics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const COLORS = ['#00FFFF', '#FF0080', '#39FF14', '#FFB000', '#8B5CF6'];\n\n  const statCards = [\n    {\n      title: 'Total Views',\n      value: analytics.totalViews.toLocaleString(),\n      change: '+15.3%',\n      changeType: 'positive',\n      icon: 'Eye',\n      color: 'primary'\n    },\n    {\n      title: 'Unique Visitors',\n      value: analytics.uniqueVisitors.toLocaleString(),\n      change: '+12.8%',\n      changeType: 'positive',\n      icon: 'Users',\n      color: 'secondary'\n    },\n    {\n      title: 'Avg. Session Duration',\n      value: '3m 42s',\n      change: '+8.2%',\n      changeType: 'positive',\n      icon: 'Clock',\n      color: 'accent'\n    },\n    {\n      title: 'Bounce Rate',\n      value: '32.5%',\n      change: '-5.1%',\n      changeType: 'positive',\n      icon: 'TrendingDown',\n      color: 'success'\n    }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-heading font-bold text-primary\">Analytics Overview</h1>\n            <p className=\"text-text-secondary font-caption mt-2\">\n              Track your portfolio performance and visitor insights\n            </p>\n          </div>\n        </div>\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-surface/20 rounded-lg p-6 h-32\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Analytics Overview</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Track your portfolio performance and visitor insights\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <select \n            value={timeRange} \n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => (\n          <div\n            key={index}\n            className=\"bg-surface/20 border border-border-accent/20 rounded-lg p-6 hover:border-primary/40 transition-colors duration-fast\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className={`w-12 h-12 rounded-lg bg-${stat.color}/20 flex items-center justify-center`}>\n                <Icon name={stat.icon} size={24} className={`text-${stat.color}`} />\n              </div>\n              <div className={`text-sm font-medium ${stat.changeType === 'positive' ? 'text-success' : 'text-error'}`}>\n                {stat.change}\n              </div>\n            </div>\n            <div className=\"text-2xl font-heading font-bold text-text-primary mb-1\">\n              {stat.value}\n            </div>\n            <div className=\"text-sm text-text-secondary font-caption\">\n              {stat.title}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Page Views Chart */}\n        <div className=\"bg-surface/20 border border-border-accent/20 rounded-lg p-6\">\n          <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-6\">Page Views Over Time</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={analytics.pageViews}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" fontSize={12} />\n              <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#1F2937', \n                  border: '1px solid #374151',\n                  borderRadius: '8px',\n                  color: '#F3F4F6'\n                }} \n              />\n              <Line type=\"monotone\" dataKey=\"views\" stroke=\"#00FFFF\" strokeWidth={2} dot={{ fill: '#00FFFF' }} />\n              <Line type=\"monotone\" dataKey=\"visitors\" stroke=\"#FF0080\" strokeWidth={2} dot={{ fill: '#FF0080' }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Device Stats */}\n        <div className=\"bg-surface/20 border border-border-accent/20 rounded-lg p-6\">\n          <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-6\">Device Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={analytics.deviceStats}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                label={({ name, value }) => `${name}: ${value}%`}\n              >\n                {analytics.deviceStats.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#1F2937', \n                  border: '1px solid #374151',\n                  borderRadius: '8px',\n                  color: '#F3F4F6'\n                }} \n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Top Pages and Traffic Sources */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Top Pages */}\n        <div className=\"bg-surface/20 border border-border-accent/20 rounded-lg p-6\">\n          <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-6\">Top Pages</h3>\n          <div className=\"space-y-4\">\n            {analytics.topPages.map((page, index) => (\n              <div key={index} className=\"flex items-center justify-between py-3 border-b border-border-accent/10\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 rounded-full bg-${index === 0 ? 'primary' : index === 1 ? 'secondary' : 'accent'}/20 flex items-center justify-center text-xs font-bold text-${index === 0 ? 'primary' : index === 1 ? 'secondary' : 'accent'}`}>\n                    {index + 1}\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-text-primary\">{page.title}</div>\n                    <div className=\"text-sm text-text-secondary font-caption\">{page.page}</div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold text-text-primary\">{page.views.toLocaleString()}</div>\n                  <div className=\"text-sm text-text-secondary font-caption\">views</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Traffic Sources */}\n        <div className=\"bg-surface/20 border border-border-accent/20 rounded-lg p-6\">\n          <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-6\">Traffic Sources</h3>\n          <div className=\"space-y-4\">\n            {analytics.trafficSources.map((source, index) => (\n              <div key={index} className=\"flex items-center justify-between py-3 border-b border-border-accent/10\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 rounded-full bg-${COLORS[index]}/20 flex items-center justify-center`}>\n                    <Icon \n                      name={source.source === 'Direct' ? 'Globe' : source.source === 'Google' ? 'Search' : 'Share2'} \n                      size={16} \n                      style={{ color: COLORS[index] }}\n                    />\n                  </div>\n                  <div className=\"font-medium text-text-primary\">{source.source}</div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold text-text-primary\">{source.visits.toLocaleString()}</div>\n                  <div className=\"text-sm text-text-secondary font-caption\">{source.percentage}%</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsOverview;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/BlogEditor.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ReactMarkdown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ReactMarkdown" },
            "fix": { "range": [76, 95], "text": "" },
            "desc": "Remove unused variable 'ReactMarkdown'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ReactMarkdown' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 21,
        "fix": { "range": [69, 113], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ReactMarkdown" },
            "fix": { "range": [76, 95], "text": "" },
            "desc": "Remove unused variable 'ReactMarkdown'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [120, 132], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [113, 165], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [120, 132], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [172, 183], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [165, 215], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [172, 183], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [222, 232], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "fix": { "range": [215, 263], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [222, 232], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [328, 344], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FileUpload' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "fix": { "range": [321, 381], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [328, 344], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'MarkdownEditor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "MarkdownEditor" },
            "fix": { "range": [442, 4326], "text": "" },
            "desc": "Remove unused variable 'MarkdownEditor'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'base'. Either include it or remove the dependency array.",
        "line": 137,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 137,
        "endColumn": 29,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [mode, initialData.id, base]",
            "fix": {
              "range": [5816, 5839],
              "text": "[mode, initialData.id, base]"
            }
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RevisionDiffViewer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 367,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 367,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RevisionDiffViewer" },
            "fix": { "range": [18218, 18242], "text": "" },
            "desc": "Remove unused variable 'RevisionDiffViewer'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'RevisionDiffViewer' is defined but never used.",
        "line": 367,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 367,
        "endColumn": 26,
        "fix": { "range": [18211, 18290], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RevisionDiffViewer" },
            "fix": { "range": [18218, 18242], "text": "" },
            "desc": "Remove unused variable 'RevisionDiffViewer'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RevisionDiffPortal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 368,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 368,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RevisionDiffPortal" },
            "fix": { "range": [18290, 18421], "text": "" },
            "desc": "Remove unused variable 'RevisionDiffPortal'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "import React, { useMemo, useRef, useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Icon from '../../../components/AppIcon';\nimport { validateBlog } from '../../../utils/validation';\nimport FileUpload from '../../../components/ui/FileUpload';\nimport storageService from '../../../utils/storageService';\n\nconst MarkdownEditor = ({ id = 'md-editor', value, onChange, placeholder = 'Write your post in Markdown...' }) => {\n  const fileInputRef = useRef(null);\n  const applyWrap = (prefix, suffix = prefix) => {\n    const ta = document.getElementById(id);\n    if (!ta) return onChange((value || '') + `${prefix}${suffix}`);\n    const start = ta.selectionStart ?? 0;\n    const end = ta.selectionEnd ?? 0;\n    const before = value.slice(0, start);\n    const selected = value.slice(start, end);\n    const after = value.slice(end);\n    const next = `${before}${prefix}${selected || 'text'}${suffix}${after}`;\n    onChange(next);\n    setTimeout(() => { ta.focus(); }, 0);\n  };\n  const insertLink = () => {\n    const url = prompt('Enter URL');\n    if (url) applyWrap('[', `](${url})`);\n  };\n  const insertCodeBlock = () => {\n    const ta = document.getElementById(id);\n    const lang = prompt('Language (optional)') || '';\n    const start = ta?.selectionStart ?? 0;\n    const end = ta?.selectionEnd ?? 0;\n    const before = value.slice(0, start);\n    const selected = value.slice(start, end) || 'code';\n    const after = value.slice(end);\n    const block = '\\n\\n```' + lang + '\\n' + selected + '\\n```\\n\\n';\n    onChange(before + block + after);\n    setTimeout(() => { ta?.focus(); }, 0);\n  };\n  const insertList = (ordered = false) => {\n    const ta = document.getElementById(id);\n    const bullet = ordered ? '1.' : '-';\n    if (!ta) return onChange(`${value || ''}\\n${bullet} item`);\n    const start = ta.selectionStart ?? 0;\n    const end = ta.selectionEnd ?? 0;\n    const before = value.slice(0, start);\n    const selected = (value.slice(start, end) || 'item').replace(/^/gm, `${bullet} `);\n    const after = value.slice(end);\n    const next = `${before}\\n${selected}${after}`;\n    onChange(next);\n  };\n  const onPickImage = () => fileInputRef.current?.click();\n  const onFileChange = async (e) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const res = await storageService.uploadFile(file, { bucket: 'media', pathPrefix: 'blog/content' });\n    if (res.success) {\n      const url = res.data.url;\n      const ta = document.getElementById(id);\n      const start = ta?.selectionStart ?? value.length;\n      const end = ta?.selectionEnd ?? value.length;\n      const before = value.slice(0, start);\n      const after = value.slice(end);\n      const md = `![image](${url})`;\n      onChange(before + md + after);\n    }\n    e.target.value = '';\n  };\n  return (\n    <div>\n      <div className=\"flex flex-wrap gap-2 mb-2\">\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('**')}>Bold</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('*')}>Italic</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('`')}>Code</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={insertCodeBlock}>Code Block</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('> ' , '')}>Quote</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => insertList(false)}>• List</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => insertList(true)}>1. List</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={insertLink}>Link</Button>\n        <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={onPickImage} iconName=\"Image\">Image</Button>\n        <input ref={fileInputRef} type=\"file\" accept=\"image/*\" className=\"hidden\" onChange={onFileChange} />\n      </div>\n      <textarea\n        id={id}\n        className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg min-h-[320px] font-mono text-sm\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n\nconst BlogEditor = ({ mode = 'create', initialData = {}, onCancel, onSave }) => {\n  const [form, setForm] = useState(() => ({\n    title: '',\n    excerpt: '',\n    content: '',\n    category: '',\n    tags: '',\n    featuredImage: '',\n    status: 'draft',\n    readTime: 5,\n    slug: '',\n    featured: false,\n    sourceUrl: '',\n    metaTitle: '',\n    metaDescription: '',\n    publishedAt: '',\n    ...initialData,\n    ...(initialData?.tags !== undefined ? { tags: Array.isArray(initialData.tags) ? initialData.tags.join(', ') : (initialData.tags || '') } : {}),\n  }));\n  const [errors, setErrors] = useState({});\n  const [preview, setPreview] = useState(false);\n  const [revisions, setRevisions] = useState([]);\n  const [revLoading, setRevLoading] = useState(false);\n  const [diffRevisionId, setDiffRevisionId] = useState(null);\n  const [showRevisionsPanel, setShowRevisionsPanel] = useState(false);\n  const base = import.meta.env.VITE_API_BASE_URL || '/api';\n\n  useEffect(() => {\n    let mounted = true;\n    const loadRevisions = async () => {\n      if (mode !== 'edit' || !initialData?.id) return;\n      setRevLoading(true);\n      try {\n        const res = await fetch(base + '/blog/revisions?postId=' + initialData.id + '&limit=20');\n        if (res.ok) {\n          const data = await res.json();\n          if (mounted) setRevisions(data);\n        }\n      } catch {}\n      finally { if (mounted) setRevLoading(false); }\n    };\n    loadRevisions();\n    return () => { mounted = false; };\n  }, [mode, initialData?.id]);\n\n  const headerTitle = useMemo(() => mode === 'edit' ? 'Edit Blog Post' : 'Create Blog Post', [mode]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const errs = validateBlog(form);\n    setErrors(errs);\n    if (Object.keys(errs).length) return;\n    const tags = (form.tags || '')\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean);\n    const slug = (form.slug || form.title || '')\n      .toLowerCase()\n      .replace(/[^a-z0-9-]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n    const words = (form.content || '').trim().split(/\\s+/).filter(Boolean).length;\n    const estRead = Math.max(1, Math.ceil(words / 200));\n    await onSave({\n      title: form.title,\n      excerpt: form.excerpt,\n      content: form.content,\n      category: form.category || undefined,\n      tags,\n      featuredImage: form.featuredImage || undefined,\n      status: form.status,\n      readTime: Number(form.readTime || estRead) || estRead,\n      slug,\n      featured: !!form.featured,\n      sourceUrl: form.sourceUrl || undefined,\n      metaTitle: form.metaTitle || undefined,\n      metaDescription: form.metaDescription || undefined,\n      publishDate: form.publishedAt || (form.status === 'published' ? new Date().toISOString() : null),\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Sticky header */}\n      <div className=\"sticky top-0 z-30 bg-surface/95 backdrop-blur-sm border-b border-border-accent/20 p-4\">\n        <div className=\"max-w-5xl mx-auto flex items-center justify-between gap-3\">\n          <div>\n            <h2 className=\"text-xl font-heading font-semibold text-text-primary\">{headerTitle}</h2>\n            <p className=\"text-xs text-text-secondary font-caption\">Write comfortably with full-page editor</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {mode === 'edit' && (\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant={showRevisionsPanel ? 'solid' : 'outline'}\n                iconName=\"History\"\n                onClick={() => setShowRevisionsPanel(v => !v)}\n              >\n                {showRevisionsPanel ? 'Hide Revisions' : 'Revisions'}\n              </Button>\n            )}\n            <Button variant=\"outline\" onClick={onCancel} iconName=\"ArrowLeft\" iconPosition=\"left\">Back</Button>\n            <Button onClick={handleSubmit} iconName=\"Save\" iconPosition=\"left\">{mode === 'edit' ? 'Save Changes' : 'Create Post'}</Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Body with optional side panel */}\n      <div className=\"flex-1 overflow-hidden flex\">\n        {showRevisionsPanel && mode === 'edit' && (\n          <aside className=\"w-72 border-r border-border-accent/20 bg-background/60 backdrop-blur-sm flex flex-col\">\n            <div className=\"p-3 border-b border-border-accent/10 flex items-center justify-between\">\n              <span className=\"text-xs font-semibold tracking-wide uppercase text-text-secondary\">Revisions</span>\n              <button type=\"button\" className=\"text-text-secondary hover:text-text-primary\" onClick={() => setShowRevisionsPanel(false)}>\n                <Icon name=\"X\" size={14} />\n              </button>\n            </div>\n            <div className=\"flex-1 overflow-auto p-2 space-y-1\">\n              {revLoading && <div className=\"text-xs text-text-secondary py-2\">Loading…</div>}\n              {!revLoading && revisions.length === 0 && <div className=\"text-xs text-text-secondary py-2\">No revisions yet.</div>}\n              {!revLoading && revisions.map(r => (\n                <div key={r.id} className=\"group border border-border-accent/10 rounded-md px-2 py-1 hover:border-primary/50 transition flex flex-col gap-0.5\">\n                  <button type=\"button\" onClick={() => setDiffRevisionId(r.id)} className=\"text-left text-xs font-medium text-text-primary/90 hover:text-primary truncate\">\n                    {new Date(r.created_at).toLocaleString()}\n                  </button>\n                  <div className=\"text-[10px] text-text-secondary line-clamp-2\">{r.title}</div>\n                  <div className=\"flex gap-1 mt-1\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setDiffRevisionId(r.id)}\n                      className=\"text-[10px] px-1.5 py-0.5 rounded bg-primary/10 text-primary hover:bg-primary/20\"\n                    >Diff</button>\n                    <button\n                      type=\"button\"\n                      onClick={async () => {\n                        if (!confirm('Restore this revision? This will overwrite the current content.')) return;\n                        try {\n                          const resp = await fetch(base + '/blog/revisions/restore', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ revisionId: r.id }) });\n                          if (resp.ok) {\n                            // Reload revisions (new revision should be created on next save anyway) and maybe refetch post? For now update local form.\n                            setDiffRevisionId(null);\n                            setShowRevisionsPanel(false);\n                            // We could fetch the post again; assuming parent refresh after onSave not available yet.\n                          } else {\n                            console.error('Failed to restore');\n                          }\n                        } catch (e) { console.error(e); }\n                      }}\n                      className=\"text-[10px] px-1.5 py-0.5 rounded bg-warning/10 text-warning hover:bg-warning/20\"\n                    >Restore</button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </aside>\n        )}\n        <div className=\"flex-1 overflow-auto\">\n        <form onSubmit={handleSubmit} className=\"max-w-5xl mx-auto p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={form.title} onChange={(e) => setForm({ ...form, title: e.target.value })} required />\n              {errors.title && <p className=\"mt-1 text-xs text-error\">{errors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Slug</label>\n              <Input value={form.slug} onChange={(e) => setForm({ ...form, slug: e.target.value })} placeholder=\"auto-generated from title\" />\n              {errors.slug && <p className=\"mt-1 text-xs text-error\">{errors.slug}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={form.status} onChange={(e) => setForm({ ...form, status: e.target.value })}>\n                <option value=\"draft\">Draft</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <input id=\"featured\" type=\"checkbox\" className=\"w-4 h-4\" checked={!!form.featured} onChange={(e) => setForm({ ...form, featured: e.target.checked })} />\n              <label htmlFor=\"featured\" className=\"text-sm text-text-secondary\">Featured</label>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm text-text-secondary mb-1\">Excerpt</label>\n            <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={form.excerpt} onChange={(e) => setForm({ ...form, excerpt: e.target.value })} />\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Content</label>\n              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => setPreview(v => !v)}>\n                {preview ? 'Hide Preview' : 'Preview Markdown'}\n              </Button>\n            </div>\n            <MarkdownEditor id=\"blog-md-editor\" value={form.content} onChange={(val) => setForm({ ...form, content: val })} />\n            {errors.content && <p className=\"mt-1 text-xs text-error\">{errors.content}</p>}\n            {preview && (\n              <div className=\"mt-3 p-3 border border-border-accent/20 rounded bg-background/40 prose prose-invert max-w-none\">\n                <ReactMarkdown>{form.content || ''}</ReactMarkdown>\n              </div>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Category</label>\n              <Input value={form.category} onChange={(e) => setForm({ ...form, category: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Tags (comma-separated)</label>\n              <Input value={form.tags} onChange={(e) => setForm({ ...form, tags: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Featured Image\"\n                value={form.featuredImage}\n                onChange={(url) => setForm({ ...form, featuredImage: url })}\n                bucket=\"media\"\n                pathPrefix=\"blog/featured\"\n                accept=\"image\"\n                helperText=\"Select or drop an image to upload.\"\n              />\n              {errors.featuredImage && <p className=\"mt-1 text-xs text-error\">{errors.featuredImage}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Source URL (optional)</label>\n              <Input \n                type=\"url\" \n                value={form.sourceUrl || ''} \n                onChange={(e) => setForm({ ...form, sourceUrl: e.target.value })}\n                placeholder=\"https://example.com/original-source\"\n                helperText=\"Reference link if content is based on or inspired by another source\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Read Time (minutes)</label>\n              <Input type=\"number\" min=\"1\" value={form.readTime} onChange={(e) => setForm({ ...form, readTime: e.target.value })} />\n              {errors.readTime && <p className=\"mt-1 text-xs text-error\">{errors.readTime}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Publish Date</label>\n              <Input type=\"datetime-local\" value={form.publishedAt || ''} onChange={(e) => setForm({ ...form, publishedAt: e.target.value })} />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Title</label>\n              <Input value={form.metaTitle} onChange={(e) => setForm({ ...form, metaTitle: e.target.value })} />\n              {errors.metaTitle && <p className=\"mt-1 text-xs text-error\">{errors.metaTitle}</p>}\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Description</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={form.metaDescription} onChange={(e) => setForm({ ...form, metaDescription: e.target.value })} />\n              {errors.metaDescription && <p className=\"mt-1 text-xs text-error\">{errors.metaDescription}</p>}\n            </div>\n          </div>\n        </form>\n        </div>\n      </div>\n      {diffRevisionId && (\n        <React.Suspense fallback={<div className=\"fixed inset-0 flex items-center justify-center bg-background/80 text-sm\">Loading diff…</div>}>\n          {/* Inline import fallback if code splitting added later */}\n          <RevisionDiffPortal revisionId={diffRevisionId} onClose={() => setDiffRevisionId(null)} />\n        </React.Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default BlogEditor;\n\n// Local portal component referencing already bundled viewer\nimport RevisionDiffViewer from '../../../components/admin/RevisionDiffViewer';\nfunction RevisionDiffPortal({ revisionId, onClose }) {\n  return <RevisionDiffViewer revisionId={revisionId} onClose={onClose} />;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/BlogManagement.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RoleBadge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RoleBadge" },
            "fix": { "range": [59, 74], "text": "" },
            "desc": "Remove unused variable 'RoleBadge'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'RoleBadge' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 17,
        "fix": { "range": [52, 110], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RoleBadge" },
            "fix": { "range": [59, 74], "text": "" },
            "desc": "Remove unused variable 'RoleBadge'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ReactMarkdown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ReactMarkdown" },
            "fix": { "range": [117, 136], "text": "" },
            "desc": "Remove unused variable 'ReactMarkdown'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ReactMarkdown' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21,
        "fix": { "range": [110, 154], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ReactMarkdown" },
            "fix": { "range": [117, 136], "text": "" },
            "desc": "Remove unused variable 'ReactMarkdown'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [219, 229], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "fix": { "range": [212, 260], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [219, 229], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [267, 279], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 14,
        "fix": { "range": [260, 312], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [267, 279], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [319, 330], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "fix": { "range": [312, 362], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [319, 330], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [369, 380], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 13,
        "fix": { "range": [362, 412], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [369, 380], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [419, 435], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FileUpload' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 18,
        "fix": { "range": [412, 473], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [419, 435], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'MarkdownEditor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 12,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "MarkdownEditor" },
            "fix": { "range": [575, 3675], "text": "" },
            "desc": "Remove unused variable 'MarkdownEditor'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Modal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Modal" },
            "fix": { "range": [4310, 5297], "text": "" },
            "desc": "Remove unused variable 'Modal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'PostRow' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 276,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 276,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PostRow" },
            "fix": { "range": [10718, 14796], "text": "" },
            "desc": "Remove unused variable 'PostRow'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "import React, { useState, useEffect } from 'react';\nimport RoleBadge from '../../../components/ui/RoleBadge';\nimport ReactMarkdown from 'react-markdown';\nimport { validateBlog } from '../../../utils/validation';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Image from '../../../components/AppImage';\nimport FileUpload from '../../../components/ui/FileUpload';\n\nconst BlogManagement = ({ blogPosts, onPostUpdate, onPostDelete, onPostCreate, onOpenEditor }) => {\n  const MarkdownEditor = ({ id = 'md-editor', value, onChange, placeholder = 'Write your post in Markdown...' }) => {\n    const applyWrap = (prefix, suffix = prefix) => {\n      const ta = document.getElementById(id);\n      if (!ta) return onChange((value || '') + `${prefix}${suffix}`);\n      const start = ta.selectionStart ?? 0;\n      const end = ta.selectionEnd ?? 0;\n      const before = value.slice(0, start);\n      const selected = value.slice(start, end);\n      const after = value.slice(end);\n      const next = `${before}${prefix}${selected || 'text'}${suffix}${after}`;\n      onChange(next);\n      setTimeout(() => {\n        ta.focus();\n      }, 0);\n    };\n    const insertLink = () => {\n      const url = prompt('Enter URL');\n      if (url) applyWrap('[', `](${url})`);\n    };\n    const insertCodeBlock = () => {\n      const ta = document.getElementById(id);\n      const lang = prompt('Language (optional)') || '';\n      if (!ta) return onChange(`${value || ''}\\n\\n\\\n\\n\\n`);\n      const start = ta.selectionStart ?? 0;\n      const end = ta.selectionEnd ?? 0;\n      const before = value.slice(0, start);\n      const selected = value.slice(start, end) || 'code';\n      const after = value.slice(end);\n      const next = `${before}\\n\\n\\\n${lang}\\n${selected}\\n\\\n\\n\\n${after}`;\n      onChange(next);\n    };\n    const insertList = (ordered = false) => {\n      const ta = document.getElementById(id);\n      const bullet = ordered ? '1.' : '-';\n      if (!ta) return onChange(`${value || ''}\\n${bullet} item`);\n      const start = ta.selectionStart ?? 0;\n      const end = ta.selectionEnd ?? 0;\n      const before = value.slice(0, start);\n      const selected = (value.slice(start, end) || 'item').replace(/^/gm, `${bullet} `);\n      const after = value.slice(end);\n      const next = `${before}\\n${selected}${after}`;\n      onChange(next);\n    };\n    return (\n      <div>\n        <div className=\"flex flex-wrap gap-2 mb-2\">\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('**')}>Bold</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('*')}>Italic</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('`')}>Code</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={insertCodeBlock}>Code Block</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => applyWrap('> ' , '')}>Quote</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => insertList(false)}>• List</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => insertList(true)}>1. List</Button>\n          <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={insertLink}>Link</Button>\n        </div>\n        <textarea\n          id={id}\n          className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg min-h-[220px] font-mono text-sm\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder={placeholder}\n        />\n      </div>\n    );\n  };\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPosts, setSelectedPosts] = useState([]);\n  const [editingPost, setEditingPost] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [sortBy, setSortBy] = useState('date');\n  const [sortOrder, setSortOrder] = useState('desc');\n  const [isLoading, setIsLoading] = useState(false);\n  const [formErrors, setFormErrors] = useState({});\n  const [showCreatePreview, setShowCreatePreview] = useState(false);\n  const [showEditPreview, setShowEditPreview] = useState(false);\n\n  const Modal = ({ title, onClose, onSubmit, submitText = 'Save', children }) => (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n      <div className=\"bg-surface border border-border-accent/20 rounded-lg shadow-glow-primary w-full max-w-3xl\">\n        <div className=\"px-6 py-4 border-b border-border-accent/20 flex items-center justify-between\">\n          <h3 className=\"text-lg font-heading font-semibold text-text-primary\">{title}</h3>\n          <button onClick={onClose} className=\"text-text-secondary hover:text-primary\">✕</button>\n        </div>\n        <form onSubmit={onSubmit} className=\"p-6 space-y-4\">\n          {children}\n          <div className=\"flex items-center justify-end space-x-2 pt-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n            <Button type=\"submit\" variant=\"primary\">{submitText}</Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n\n  // Create/Edit form state\n  const [createForm, setCreateForm] = useState({\n    title: '',\n    excerpt: '',\n    content: '',\n    category: '',\n    tags: '',\n    featuredImage: '',\n    status: 'draft',\n    readTime: 5,\n    slug: '',\n    featured: false,\n    metaTitle: '',\n    metaDescription: '',\n    publishedAt: '',\n  });\n  const [editForm, setEditForm] = useState({});\n\n  // Disable demo auto-seeding when a create handler is provided (wired to backend)\n  useEffect(() => {\n    if ((!blogPosts || blogPosts.length === 0) && !onPostCreate) {\n      // Keep UI empty if parent manages data; demo seed only when unmanaged\n      // (No-op when onPostCreate exists)\n    }\n  }, [blogPosts, onPostCreate]);\n\n  const filteredPosts = (blogPosts || [])\n    .filter(post => {\n      const matchesSearch = post?.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           post?.excerpt?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           post?.tags?.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n      const matchesStatus = filterStatus === 'all' || post?.status === filterStatus;\n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      const modifier = sortOrder === 'asc' ? 1 : -1;\n      if (sortBy === 'date') return (new Date(a?.publishDate || 0) - new Date(b?.publishDate || 0)) * modifier;\n      if (sortBy === 'title') return (a?.title || '').localeCompare(b?.title || '') * modifier;\n      if (sortBy === 'views') return ((a?.views || 0) - (b?.views || 0)) * modifier;\n      if (sortBy === 'comments') return ((a?.comments || 0) - (b?.comments || 0)) * modifier;\n      return 0;\n    });\n\n  const handleSelectPost = (postId) => {\n    setSelectedPosts(prev => \n      prev.includes(postId) \n        ? prev.filter(id => id !== postId)\n        : [...prev, postId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    setSelectedPosts(\n      selectedPosts.length === filteredPosts.length \n        ? [] \n        : filteredPosts.map(p => p?.id).filter(Boolean)\n    );\n  };\n\n  const handleBulkDelete = async () => {\n    if (window.confirm(`Delete ${selectedPosts.length} selected posts?`)) {\n      setIsLoading(true);\n      try {\n        for (const id of selectedPosts) {\n          if (onPostDelete) {\n            await onPostDelete(id);\n          }\n        }\n        setSelectedPosts([]);\n      } catch (error) {\n        console.error('Error deleting posts:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleSort = (field) => {\n    if (sortBy === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(field);\n      setSortOrder('asc');\n    }\n  };\n\n  const openCreate = () => {\n    if (onOpenEditor) return onOpenEditor({ mode: 'create' });\n    setCreateForm({ title: '', excerpt: '', content: '', category: '', tags: '', featuredImage: '', status: 'draft', readTime: 5 });\n    setShowCreateModal(true);\n  };\n\n  const openEdit = (post) => {\n    if (onOpenEditor) return onOpenEditor({ mode: 'edit', post });\n    // Initialize edit form from the selected post\n    setEditForm({\n      title: post?.title || '',\n      excerpt: post?.excerpt || '',\n      content: post?.content || '',\n      category: post?.category || '',\n      tags: (post?.tags || []).join(', '),\n      featuredImage: post?.featuredImage || '',\n      status: post?.status || 'draft',\n      readTime: post?.readTime || 5,\n      slug: post?.slug || '',\n      featured: !!post?.featured,\n      metaTitle: post?.metaTitle || '',\n      metaDescription: post?.metaDescription || '',\n      publishedAt: post?.publishedAt || '',\n    });\n    setEditingPost(post);\n  };\n\n  const submitCreate = async (e) => {\n    e.preventDefault();\n    const errs = validateBlog(createForm);\n    setFormErrors(errs);\n    if (Object.keys(errs).length) return;\n    const tags = (createForm.tags || '')\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean);\n    // auto-generate slug if empty\n    const slug = (createForm.slug || createForm.title || '')\n      .toLowerCase()\n      .replace(/[^a-z0-9-]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n\n    // naive read-time estimation: ~200 wpm\n    const words = (createForm.content || '').trim().split(/\\s+/).filter(Boolean).length;\n    const estRead = Math.max(1, Math.ceil(words / 200));\n\n    await onPostCreate({\n      title: createForm.title,\n      excerpt: createForm.excerpt,\n      content: createForm.content,\n      category: createForm.category || undefined,\n      tags,\n      featuredImage: createForm.featuredImage || undefined,\n      status: createForm.status,\n      readTime: Number(createForm.readTime || estRead) || estRead,\n      slug,\n      featured: !!createForm.featured,\n      metaTitle: createForm.metaTitle || undefined,\n      metaDescription: createForm.metaDescription || undefined,\n      publishDate: createForm.publishedAt || (createForm.status === 'published' ? new Date().toISOString() : null),\n    });\n    setShowCreateModal(false);\n    setShowCreatePreview(false);\n  };\n\n  const handleDeletePost = async (postId) => {\n    if (window.confirm('Delete this post?')) {\n      setIsLoading(true);\n      try {\n        if (onPostDelete) {\n          await onPostDelete(postId);\n        }\n      } catch (error) {\n        console.error('Error deleting post:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const PostRow = ({ post }) => (\n    <tr className=\"border-b border-border-accent/10 hover:bg-primary/5 transition-colors duration-fast\">\n      <td className=\"px-4 py-4\">\n        <input\n          type=\"checkbox\"\n          checked={selectedPosts.includes(post?.id)}\n          onChange={() => handleSelectPost(post?.id)}\n          className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n        />\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-16 h-12 rounded-lg overflow-hidden bg-surface\">\n            <Image \n              src={post?.featuredImage || '/assets/images/no_image.png'} \n              alt={post?.title || 'Post image'}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"font-medium text-text-primary truncate\">{post?.title || 'Untitled'}</div>\n              <RoleBadge role={post?.authorRole} />\n            </div>\n            <div className=\"text-sm text-text-secondary font-caption truncate\">\n              {post?.excerpt || 'No excerpt available'}\n            </div>\n            <div className=\"flex items-center space-x-4 mt-1\">\n              <div className=\"flex items-center space-x-1 text-xs text-text-secondary font-caption\">\n                <Icon name=\"Eye\" size={12} />\n                <span>{post?.views || 0}</span>\n              </div>\n              <div className=\"flex items-center space-x-1 text-xs text-text-secondary font-caption\">\n                <Icon name=\"MessageCircle\" size={12} />\n                <span>{post?.comments || 0}</span>\n              </div>\n              <div className=\"flex items-center space-x-1 text-xs text-text-secondary font-caption\">\n                <Icon name=\"Heart\" size={12} />\n                <span>{post?.likes || 0}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex flex-wrap gap-1\">\n          {(post?.tags || []).slice(0, 2).map((tag, index) => (\n            <span key={index} className=\"px-2 py-1 bg-secondary/10 text-secondary text-xs rounded-full font-caption\">\n              {tag}\n            </span>\n          ))}\n          {(post?.tags || []).length > 2 && (\n            <span className=\"px-2 py-1 bg-surface text-text-secondary text-xs rounded-full font-caption\">\n              +{(post?.tags || []).length - 2}\n            </span>\n          )}\n        </div>\n      </td>\n      <td className=\"px-4 py-4\">\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n          post?.status === 'published' ? 'bg-success/10 text-success' :\n          post?.status === 'draft' ? 'bg-warning/10 text-warning' : 'bg-error/10 text-error'\n        }`}>\n          {post?.status || 'draft'}\n        </span>\n      </td>\n      <td className=\"px-4 py-4 text-sm text-text-secondary font-caption\">\n        {post?.publishDate ? new Date(post.publishDate).toLocaleDateString() : 'No date'}\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => openEdit(post)}\n            iconName=\"Edit\"\n            className=\"p-2\"\n            title=\"Edit post\"\n            disabled={isLoading}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleDeletePost(post?.id)}\n            iconName=\"Trash2\"\n            className=\"p-2 text-error hover:text-error\"\n            title=\"Delete post\"\n            disabled={isLoading}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => window.open(`/blog/${post?.slug || post?.id}`, '_blank')}\n            iconName=\"ExternalLink\"\n            className=\"p-2\"\n            title=\"View post\"\n          />\n        </div>\n      </td>\n    </tr>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Blog Management</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Create, edit, and manage your blog content\n          </p>\n        </div>\n        <Button\n          variant=\"primary\"\n          onClick={openCreate}\n          iconName=\"PenTool\"\n          iconPosition=\"left\"\n          disabled={isLoading}\n        >\n          New Blog Post\n        </Button>\n      </div>\n\n      {/* Filters & Search */}\n      <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex-1 max-w-md\">\n            <Input\n              type=\"search\"\n              placeholder=\"Search blog posts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-text-secondary font-caption\">Status:</span>\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                className=\"bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All</option>\n                <option value=\"published\">Published</option>\n                <option value=\"draft\">Draft</option>\n                <option value=\"archived\">Archived</option>\n              </select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-text-secondary font-caption\">Sort by:</span>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n                className=\"bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"date\">Date</option>\n                <option value=\"title\">Title</option>\n                <option value=\"views\">Views</option>\n                <option value=\"comments\">Comments</option>\n              </select>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                iconName={sortOrder === 'asc' ? 'ArrowUp' : 'ArrowDown'}\n                className=\"p-2\"\n              />\n            </div>\n            {selectedPosts.length > 0 && (\n              <Button\n                variant=\"danger\"\n                size=\"sm\"\n                onClick={handleBulkDelete}\n                iconName=\"Trash2\"\n                iconPosition=\"left\"\n                disabled={isLoading}\n              >\n                Delete ({selectedPosts.length})\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Blog Posts Table */}\n      <div className=\"bg-surface rounded-lg border border-border-accent/20 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-primary/5 border-b border-border-accent/20\">\n              <tr>\n                <th className=\"px-4 py-4 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedPosts.length === filteredPosts.length && filteredPosts.length > 0}\n                    onChange={handleSelectAll}\n                    className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n                  />\n                </th>\n                <th className=\"px-4 py-4 text-left\">\n                  <button\n                    onClick={() => handleSort('title')}\n                    className=\"flex items-center space-x-2 text-sm font-heading font-semibold text-text-primary hover:text-primary transition-colors duration-fast\"\n                  >\n                    <span>Post</span>\n                    <Icon name=\"ArrowUpDown\" size={14} />\n                  </button>\n                </th>\n                <th className=\"px-4 py-4 text-left text-sm font-heading font-semibold text-text-primary\">\n                  Tags\n                </th>\n                <th className=\"px-4 py-4 text-left text-sm font-heading font-semibold text-text-primary\">\n                  Status\n                </th>\n                <th className=\"px-4 py-4 text-left\">\n                  <button\n                    onClick={() => handleSort('date')}\n                    className=\"flex items-center space-x-2 text-sm font-heading font-semibold text-text-primary hover:text-primary transition-colors duration-fast\"\n                  >\n                    <span>Date</span>\n                    <Icon name=\"ArrowUpDown\" size={14} />\n                  </button>\n                </th>\n                <th className=\"px-4 py-4 text-left text-sm font-heading font-semibold text-text-primary\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredPosts.map((post) => (\n                <PostRow key={post?.id} post={post} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {filteredPosts.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"BookOpen\" size={48} className=\"text-text-secondary/50 mx-auto mb-4\" />\n            <div className=\"text-text-secondary font-caption\">\n              {searchTerm || filterStatus !== 'all' ? 'No posts match your filters' : 'No blog posts found'}\n            </div>\n            <Button\n              variant=\"primary\"\n              onClick={openCreate}\n              iconName=\"PenTool\"\n              iconPosition=\"left\"\n              className=\"mt-4\"\n              disabled={isLoading}\n            >\n              Create Your First Post\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-primary\">{(blogPosts || []).length}</div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Posts</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-success\">\n            {(blogPosts || []).filter(p => p?.status === 'published').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Published</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-warning\">\n            {(blogPosts || []).filter(p => p?.status === 'draft').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Drafts</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-text-primary\">\n            {(blogPosts || []).reduce((sum, post) => sum + (post?.views || 0), 0).toLocaleString()}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Views</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-text-primary\">\n            {(blogPosts || []).reduce((sum, post) => sum + (post?.comments || 0), 0)}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Comments</div>\n        </div>\n      </div>\n\n      {/* Loading Overlay */}\n      {isLoading && (\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50\">\n          <div className=\"bg-surface rounded-lg p-6 flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"text-text-primary\">Processing...</span>\n          </div>\n        </div>\n      )}\n\n      {/* Create Modal */}\n      {showCreateModal && (\n        <Modal title=\"Create Blog Post\" onClose={() => setShowCreateModal(false)} onSubmit={submitCreate} submitText=\"Create\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={createForm.title} onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })} required />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Slug</label>\n              <Input value={createForm.slug} onChange={(e) => setCreateForm({ ...createForm, slug: e.target.value })} placeholder=\"auto-generated from title\" />\n              {formErrors.slug && <p className=\"mt-1 text-xs text-error\">{formErrors.slug}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={createForm.status} onChange={(e) => setCreateForm({ ...createForm, status: e.target.value })}>\n                <option value=\"draft\">Draft</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <input id=\"create-featured\" type=\"checkbox\" className=\"w-4 h-4\" checked={!!createForm.featured} onChange={(e) => setCreateForm({ ...createForm, featured: e.target.checked })} />\n              <label htmlFor=\"create-featured\" className=\"text-sm text-text-secondary\">Featured</label>\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Excerpt</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={createForm.excerpt} onChange={(e) => setCreateForm({ ...createForm, excerpt: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"block text-sm text-text-secondary mb-1\">Content</label>\n                <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => setShowCreatePreview(v => !v)}>\n                  {showCreatePreview ? 'Hide Preview' : 'Preview Markdown'}\n                </Button>\n              </div>\n              <MarkdownEditor id=\"md-editor-create\" value={createForm.content} onChange={(val) => setCreateForm({ ...createForm, content: val })} />\n              {formErrors.content && <p className=\"mt-1 text-xs text-error\">{formErrors.content}</p>}\n              {showCreatePreview && (\n                <div className=\"mt-3 p-3 border border-border-accent/20 rounded bg-background/40 prose prose-invert max-w-none\">\n                  <ReactMarkdown>{createForm.content || ''}</ReactMarkdown>\n                </div>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Category</label>\n              <Input value={createForm.category} onChange={(e) => setCreateForm({ ...createForm, category: e.target.value })} />\n            </div>\n            {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Tags (comma-separated)</label>\n              <Input value={createForm.tags} onChange={(e) => setCreateForm({ ...createForm, tags: e.target.value })} />\n            </div>\n            {formErrors.featuredImage && <p className=\"mt-1 text-xs text-error\">{formErrors.featuredImage}</p>}\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Featured Image\"\n                value={createForm.featuredImage}\n                onChange={(url) => setCreateForm({ ...createForm, featuredImage: url })}\n                bucket=\"media\"\n                pathPrefix=\"blog/featured\"\n                accept=\"image\"\n                helperText=\"Select or drop an image to upload.\"\n              />\n            </div>\n            {formErrors.readTime && <p className=\"mt-1 text-xs text-error\">{formErrors.readTime}</p>}\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Read Time (minutes)</label>\n              <Input type=\"number\" min=\"1\" value={createForm.readTime} onChange={(e) => setCreateForm({ ...createForm, readTime: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Publish Date</label>\n              <Input type=\"datetime-local\" value={createForm.publishedAt} onChange={(e) => setCreateForm({ ...createForm, publishedAt: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Title</label>\n              <Input value={createForm.metaTitle} onChange={(e) => setCreateForm({ ...createForm, metaTitle: e.target.value })} />\n              {formErrors.metaTitle && <p className=\"mt-1 text-xs text-error\">{formErrors.metaTitle}</p>}\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Description</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={createForm.metaDescription} onChange={(e) => setCreateForm({ ...createForm, metaDescription: e.target.value })} />\n              {formErrors.metaDescription && <p className=\"mt-1 text-xs text-error\">{formErrors.metaDescription}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {/* Edit Modal */}\n      {editingPost && (\n        <Modal title=\"Edit Blog Post\" onClose={() => { setEditingPost(null); setShowEditPreview(false); }} onSubmit={async (e) => {\n          e.preventDefault();\n          const errs = validateBlog(editForm);\n          setFormErrors(errs);\n          if (Object.keys(errs).length) return;\n          const tags = (editForm.tags || '')\n            .split(',')\n            .map((t) => t.trim())\n            .filter(Boolean);\n          // auto-generate slug if empty or changed\n          const slug = (editForm.slug || editForm.title || '')\n            .toLowerCase()\n            .replace(/[^a-z0-9-]+/g, '-')\n            .replace(/(^-|-$)/g, '');\n          // recompute read time if content changed and readTime not provided\n          const words = (editForm.content || '').trim().split(/\\s+/).filter(Boolean).length;\n          const estRead = Math.max(1, Math.ceil(words / 200));\n          await onPostUpdate(editingPost.id, {\n            title: editForm.title,\n            excerpt: editForm.excerpt,\n            content: editForm.content,\n            category: editForm.category || undefined,\n            tags,\n            featuredImage: editForm.featuredImage || undefined,\n            status: editForm.status,\n            readTime: Number(editForm.readTime || estRead) || estRead,\n            slug,\n            featured: !!editForm.featured,\n            metaTitle: editForm.metaTitle || undefined,\n            metaDescription: editForm.metaDescription || undefined,\n            publishDate: editForm.publishedAt || (editForm.status === 'published' ? (editingPost.publishDate || new Date().toISOString()) : null),\n          });\n          setEditingPost(null);\n          setShowEditPreview(false);\n        }} submitText=\"Save Changes\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={editForm.title || ''} onChange={(e) => setEditForm({ ...editForm, title: e.target.value })} required />\n              {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Slug</label>\n              <Input value={editForm.slug || ''} onChange={(e) => setEditForm({ ...editForm, slug: e.target.value })} />\n              {formErrors.slug && <p className=\"mt-1 text-xs text-error\">{formErrors.slug}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={editForm.status || 'draft'} onChange={(e) => setEditForm({ ...editForm, status: e.target.value })}>\n                <option value=\"draft\">Draft</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <input id=\"edit-featured\" type=\"checkbox\" className=\"w-4 h-4\" checked={!!editForm.featured} onChange={(e) => setEditForm({ ...editForm, featured: e.target.checked })} />\n              <label htmlFor=\"edit-featured\" className=\"text-sm text-text-secondary\">Featured</label>\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Excerpt</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={editForm.excerpt || ''} onChange={(e) => setEditForm({ ...editForm, excerpt: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"block text-sm text-text-secondary mb-1\">Content</label>\n                <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => setShowEditPreview(v => !v)}>\n                  {showEditPreview ? 'Hide Preview' : 'Preview Markdown'}\n                </Button>\n              </div>\n              <MarkdownEditor id=\"md-editor-edit\" value={editForm.content || ''} onChange={(val) => setEditForm({ ...editForm, content: val })} />\n              {formErrors.content && <p className=\"mt-1 text-xs text-error\">{formErrors.content}</p>}\n              {showEditPreview && (\n                <div className=\"mt-3 p-3 border border-border-accent/20 rounded bg-background/40 prose prose-invert max-w-none\">\n                  <ReactMarkdown>{editForm.content || ''}</ReactMarkdown>\n                </div>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Category</label>\n              <Input value={editForm.category || ''} onChange={(e) => setEditForm({ ...editForm, category: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Tags (comma-separated)</label>\n              <Input value={editForm.tags || ''} onChange={(e) => setEditForm({ ...editForm, tags: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Featured Image\"\n                value={editForm.featuredImage || ''}\n                onChange={(url) => setEditForm({ ...editForm, featuredImage: url })}\n                bucket=\"media\"\n                pathPrefix=\"blog/featured\"\n                accept=\"image\"\n                helperText=\"Select or drop an image to upload.\"\n              />\n              {formErrors.featuredImage && <p className=\"mt-1 text-xs text-error\">{formErrors.featuredImage}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Read Time (minutes)</label>\n              <Input type=\"number\" min=\"1\" value={editForm.readTime || 5} onChange={(e) => setEditForm({ ...editForm, readTime: e.target.value })} />\n              {formErrors.readTime && <p className=\"mt-1 text-xs text-error\">{formErrors.readTime}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Publish Date</label>\n              <Input type=\"datetime-local\" value={editForm.publishedAt || ''} onChange={(e) => setEditForm({ ...editForm, publishedAt: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Title</label>\n              <Input value={editForm.metaTitle || ''} onChange={(e) => setEditForm({ ...editForm, metaTitle: e.target.value })} />\n              {formErrors.metaTitle && <p className=\"mt-1 text-xs text-error\">{formErrors.metaTitle}</p>}\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Meta Description</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={3} value={editForm.metaDescription || ''} onChange={(e) => setEditForm({ ...editForm, metaDescription: e.target.value })} />\n              {formErrors.metaDescription && <p className=\"mt-1 text-xs text-error\">{formErrors.metaDescription}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default BlogManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/DashboardOverview.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BarChart" },
            "fix": { "range": [36, 45], "text": "" },
            "desc": "Remove unused variable 'BarChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BarChart' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 18,
        "fix": { "range": [35, 45], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BarChart" },
            "fix": { "range": [36, 45], "text": "" },
            "desc": "Remove unused variable 'BarChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Bar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Bar" },
            "fix": { "range": [44, 49], "text": "" },
            "desc": "Remove unused variable 'Bar'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Bar' is defined but never used.",
        "line": 2,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 23,
        "fix": { "range": [45, 50], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Bar" },
            "fix": { "range": [44, 49], "text": "" },
            "desc": "Remove unused variable 'Bar'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'XAxis' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "XAxis" },
            "fix": { "range": [49, 56], "text": "" },
            "desc": "Remove unused variable 'XAxis'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'XAxis' is defined but never used.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 30,
        "fix": { "range": [50, 57], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "XAxis" },
            "fix": { "range": [49, 56], "text": "" },
            "desc": "Remove unused variable 'XAxis'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'YAxis' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "YAxis" },
            "fix": { "range": [56, 63], "text": "" },
            "desc": "Remove unused variable 'YAxis'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'YAxis' is defined but never used.",
        "line": 2,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "fix": { "range": [57, 64], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "YAxis" },
            "fix": { "range": [56, 63], "text": "" },
            "desc": "Remove unused variable 'YAxis'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'CartesianGrid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CartesianGrid" },
            "fix": { "range": [63, 78], "text": "" },
            "desc": "Remove unused variable 'CartesianGrid'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'CartesianGrid' is defined but never used.",
        "line": 2,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 52,
        "fix": { "range": [64, 79], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CartesianGrid" },
            "fix": { "range": [63, 78], "text": "" },
            "desc": "Remove unused variable 'CartesianGrid'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Tooltip" },
            "fix": { "range": [78, 87], "text": "" },
            "desc": "Remove unused variable 'Tooltip'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Tooltip' is defined but never used.",
        "line": 2,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 61,
        "fix": { "range": [79, 88], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Tooltip" },
            "fix": { "range": [78, 87], "text": "" },
            "desc": "Remove unused variable 'Tooltip'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ResponsiveContainer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResponsiveContainer" },
            "fix": { "range": [87, 108], "text": "" },
            "desc": "Remove unused variable 'ResponsiveContainer'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ResponsiveContainer' is defined but never used.",
        "line": 2,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 82,
        "fix": { "range": [88, 109], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ResponsiveContainer" },
            "fix": { "range": [87, 108], "text": "" },
            "desc": "Remove unused variable 'ResponsiveContainer'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'LineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 84,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 93,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LineChart" },
            "fix": { "range": [108, 119], "text": "" },
            "desc": "Remove unused variable 'LineChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'LineChart' is defined but never used.",
        "line": 2,
        "column": 84,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 93,
        "fix": { "range": [109, 120], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LineChart" },
            "fix": { "range": [108, 119], "text": "" },
            "desc": "Remove unused variable 'LineChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Line' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 95,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 99,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Line" },
            "fix": { "range": [119, 125], "text": "" },
            "desc": "Remove unused variable 'Line'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Line' is defined but never used.",
        "line": 2,
        "column": 95,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 99,
        "fix": { "range": [120, 126], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Line" },
            "fix": { "range": [119, 125], "text": "" },
            "desc": "Remove unused variable 'Line'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'PieChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 101,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 109,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PieChart" },
            "fix": { "range": [125, 135], "text": "" },
            "desc": "Remove unused variable 'PieChart'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'PieChart' is defined but never used.",
        "line": 2,
        "column": 101,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 109,
        "fix": { "range": [126, 136], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "PieChart" },
            "fix": { "range": [125, 135], "text": "" },
            "desc": "Remove unused variable 'PieChart'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Pie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 111,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 114,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Pie" },
            "fix": { "range": [135, 140], "text": "" },
            "desc": "Remove unused variable 'Pie'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Pie' is defined but never used.",
        "line": 2,
        "column": 111,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 114,
        "fix": { "range": [136, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Pie" },
            "fix": { "range": [135, 140], "text": "" },
            "desc": "Remove unused variable 'Pie'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Cell' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 116,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 120,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Cell" },
            "fix": { "range": [140, 146], "text": "" },
            "desc": "Remove unused variable 'Cell'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Cell' is defined but never used.",
        "line": 2,
        "column": 116,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 120,
        "fix": { "range": [140, 146], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Cell" },
            "fix": { "range": [140, 146], "text": "" },
            "desc": "Remove unused variable 'Cell'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [173, 183], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [166, 215], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [173, 183], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 14,
    "source": "import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\nimport Icon from '../../../components/AppIcon';\n\nconst DashboardOverview = ({ stats, analytics }) => {\n  const statCards = [\n    {\n      title: 'Total Projects',\n      value: stats.projects,\n      change: '+12%',\n      changeType: 'positive',\n      icon: 'FolderOpen',\n      color: 'primary'\n    },\n    {\n      title: 'Blog Posts',\n      value: stats.blogPosts,\n      change: '+8%',\n      changeType: 'positive',\n      icon: 'BookOpen',\n      color: 'secondary'\n    },\n    {\n      title: 'Hero Slides',\n      value: stats.slides,\n      change: '+3%',\n      changeType: 'positive',\n      icon: 'Image',\n      color: 'accent'\n    },\n    {\n      title: 'Total Views',\n      value: '24.7K',\n      change: '+15%',\n      changeType: 'positive',\n      icon: 'Eye',\n      color: 'success'\n    }\n  ];\n\n  const COLORS = ['#00FFFF', '#FF0080', '#39FF14', '#FFB000'];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Dashboard Overview</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Welcome back, Mikael. Here's your content performance summary.\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm text-text-secondary font-caption\">\n          <Icon name=\"Calendar\" size={16} />\n          <span>Last updated: {new Date().toLocaleDateString()}</span>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => (\n          <div key={index} className=\"bg-surface rounded-lg p-6 border border-border-accent/20 hover:shadow-glow-primary transition-all duration-fast\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center bg-${stat.color}/10`}>\n                <Icon name={stat.icon} size={24} className={`text-${stat.color}`} />\n              </div>\n              <div className={`text-sm font-medium ${stat.changeType === 'positive' ? 'text-success' : 'text-error'}`}>\n                {stat.change}\n              </div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"text-2xl font-heading font-bold text-text-primary\">{stat.value}</div>\n              <div className=\"text-sm text-text-secondary font-caption\">{stat.title}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Visitor Analytics */}\n        <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Visitor Analytics</h3>\n            <Icon name=\"TrendingUp\" size={20} className=\"text-primary\" />\n          </div>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={analytics.visitorData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(0, 255, 255, 0.1)\" />\n                <XAxis dataKey=\"date\" stroke=\"#A0A0B0\" fontSize={12} />\n                <YAxis stroke=\"#A0A0B0\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1A1A2E', \n                    border: '1px solid rgba(0, 255, 255, 0.2)',\n                    borderRadius: '8px',\n                    color: '#E0E0E0'\n                  }} \n                />\n                <Line type=\"monotone\" dataKey=\"visitors\" stroke=\"#00FFFF\" strokeWidth={2} dot={{ fill: '#00FFFF', strokeWidth: 2 }} />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Content Performance */}\n        <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Content Performance</h3>\n            <Icon name=\"BarChart3\" size={20} className=\"text-secondary\" />\n          </div>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={analytics.contentData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(0, 255, 255, 0.1)\" />\n                <XAxis dataKey=\"type\" stroke=\"#A0A0B0\" fontSize={12} />\n                <YAxis stroke=\"#A0A0B0\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1A1A2E', \n                    border: '1px solid rgba(0, 255, 255, 0.2)',\n                    borderRadius: '8px',\n                    color: '#E0E0E0'\n                  }} \n                />\n                <Bar dataKey=\"views\" fill=\"#FF0080\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Activity & Popular Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Activity */}\n        <div className=\"lg:col-span-2 bg-surface rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Recent Activity</h3>\n            <Icon name=\"Activity\" size={20} className=\"text-accent\" />\n          </div>\n          <div className=\"space-y-4\">\n            {analytics.recentActivity.map((activity, index) => (\n              <div key={index} className=\"flex items-center space-x-4 p-3 rounded-lg hover:bg-primary/5 transition-colors duration-fast\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center bg-${activity.type === 'create' ? 'success' : activity.type === 'update' ? 'warning' : 'error'}/10`}>\n                  <Icon \n                    name={activity.type === 'create' ? 'Plus' : activity.type === 'update' ? 'Edit' : 'Trash2'} \n                    size={16} \n                    className={`text-${activity.type === 'create' ? 'success' : activity.type === 'update' ? 'warning' : 'error'}`} \n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium text-text-primary\">{activity.action}</div>\n                  <div className=\"text-xs text-text-secondary font-caption\">{activity.timestamp}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Popular Content */}\n        <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Popular Content</h3>\n            <Icon name=\"Star\" size={20} className=\"text-warning\" />\n          </div>\n          <div className=\"h-48\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={analytics.popularContent}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={40}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {analytics.popularContent.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1A1A2E', \n                    border: '1px solid rgba(0, 255, 255, 0.2)',\n                    borderRadius: '8px',\n                    color: '#E0E0E0'\n                  }} \n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"mt-4 space-y-2\">\n            {analytics.popularContent.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-3 h-3 rounded-full`} style={{ backgroundColor: COLORS[index % COLORS.length] }}></div>\n                  <span className=\"text-text-secondary font-caption\">{item.name}</span>\n                </div>\n                <span className=\"text-text-primary font-medium\">{item.value}%</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardOverview;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/DashboardSidebar.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 75], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [82, 94], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [75, 128], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [82, 94], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst DashboardSidebar = ({ activeSection, onSectionChange, stats }) => {\n  const navigationItems = [\n    {\n      id: 'overview',\n      label: 'Dashboard Overview',\n      icon: 'BarChart3',\n      description: 'Analytics & metrics'\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      icon: 'TrendingUp',\n      description: 'Visit tracking & stats'\n    },\n    {\n      id: 'projects',\n      label: 'Projects',\n      icon: 'FolderOpen',\n      description: 'Portfolio management',\n      count: stats.projects\n    },\n    {\n      id: 'blog',\n      label: 'Blog Posts',\n      icon: 'BookOpen',\n      description: 'Content publishing',\n      count: stats.blogPosts\n    },\n    {\n      id: 'moderation',\n      label: 'Moderation',\n      icon: 'ShieldCheck',\n      description: 'Comments review'\n    },\n    {\n      id: 'slides',\n      label: 'Hero Slides',\n      icon: 'Image',\n      description: 'Carousel content',\n      count: stats.slides\n    },\n    {\n      id: 'settings',\n      label: 'Site Settings',\n      icon: 'Settings',\n      description: 'Configuration'\n    }\n  ];\n\n  const quickActions = [\n    {\n      id: 'new-project',\n      label: 'New Project',\n      icon: 'Plus',\n      variant: 'primary',\n      action: () => onSectionChange('projects', 'create')\n    },\n    {\n      id: 'new-post',\n      label: 'New Blog Post',\n      icon: 'PenTool',\n      variant: 'secondary',\n      action: () => onSectionChange('blog', 'create')\n    },\n    {\n      id: 'new-slide',\n      label: 'New Slide',\n      icon: 'ImagePlus',\n      variant: 'outline',\n      action: () => onSectionChange('slides', 'create')\n    }\n  ];\n\n  return (\n    <div className=\"w-full h-full bg-surface border-r border-border-accent/20 flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border-accent/20\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n            <Icon name=\"Shield\" size={20} className=\"text-background\" />\n          </div>\n          <div>\n            <h2 className=\"font-heading font-bold text-lg text-primary\">Admin Panel</h2>\n            <p className=\"text-xs text-text-secondary font-caption\">Content Management</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex-1 overflow-y-auto py-6\">\n        <nav className=\"px-4 space-y-2\">\n          {navigationItems.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => onSectionChange(item.id)}\n              className={`\n                w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left\n                transition-all duration-fast group min-h-[52px]\n                ${activeSection === item.id\n                  ? 'bg-primary/10 text-primary shadow-glow-primary'\n                  : 'text-text-secondary hover:text-primary hover:bg-primary/5'\n                }\n              `}\n            >\n              <Icon \n                name={item.icon} \n                size={20} \n                className={activeSection === item.id ? 'text-primary' : 'text-text-secondary group-hover:text-primary'} \n              />\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"font-medium truncate\">{item.label}</div>\n                <div className=\"text-xs text-text-secondary/80 font-caption truncate\">\n                  {item.description}\n                </div>\n              </div>\n              {item.count !== undefined && (\n                <div className={`\n                  px-2 py-1 rounded-full text-xs font-medium\n                  ${activeSection === item.id\n                    ? 'bg-primary/20 text-primary' :'bg-surface text-text-secondary'\n                  }\n                `}>\n                  {item.count}\n                </div>\n              )}\n            </button>\n          ))}\n        </nav>\n\n        {/* Quick Actions */}\n        <div className=\"px-4 mt-8\">\n          <h3 className=\"text-sm font-heading font-semibold text-text-primary mb-4\">Quick Actions</h3>\n          <div className=\"space-y-2\">\n            {quickActions.map((action) => (\n              <Button\n                key={action.id}\n                variant={action.variant}\n                size=\"sm\"\n                onClick={action.action}\n                iconName={action.icon}\n                iconPosition=\"left\"\n                className=\"w-full justify-start\"\n              >\n                {action.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border-accent/20\">\n        <div className=\"text-center\">\n          <div className=\"text-xs text-text-secondary font-caption\">\n            WisdomInTech Admin v2.0\n          </div>\n          <div className=\"text-xs text-text-secondary/60 mt-1\">\n            Secure Content Management\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardSidebar;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/ProjectsManagement.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'isValidUrl' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isValidUrl" },
            "fix": { "range": [65, 77], "text": "" },
            "desc": "Remove unused variable 'isValidUrl'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'isValidUrl' is defined but never used.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 37,
        "fix": { "range": [65, 77], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isValidUrl" },
            "fix": { "range": [65, 77], "text": "" },
            "desc": "Remove unused variable 'isValidUrl'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [121, 131], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [114, 162], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [121, 131], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [169, 181], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [162, 214], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [169, 181], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [221, 232], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "fix": { "range": [214, 264], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [221, 232], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [271, 282], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "fix": { "range": [264, 314], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [271, 282], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [321, 337], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FileUpload' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "fix": { "range": [314, 375], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [321, 337], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Modal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Modal" },
            "fix": { "range": [821, 1808], "text": "" },
            "desc": "Remove unused variable 'Modal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectRow' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 180,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 180,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectRow" },
            "fix": { "range": [6208, 9073], "text": "" },
            "desc": "Remove unused variable 'ProjectRow'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "import React, { useState } from 'react';\nimport { validateProject, isValidUrl } from '../../../utils/validation';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Image from '../../../components/AppImage';\nimport FileUpload from '../../../components/ui/FileUpload';\n\nconst ProjectsManagement = ({ projects, onProjectUpdate, onProjectDelete, onProjectCreate }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedProjects, setSelectedProjects] = useState([]);\n  const [editingProject, setEditingProject] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [sortBy, setSortBy] = useState('date');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  const Modal = ({ title, onClose, onSubmit, submitText = 'Save', children }) => (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n      <div className=\"bg-surface border border-border-accent/20 rounded-lg shadow-glow-primary w-full max-w-2xl\">\n        <div className=\"px-6 py-4 border-b border-border-accent/20 flex items-center justify-between\">\n          <h3 className=\"text-lg font-heading font-semibold text-text-primary\">{title}</h3>\n          <button onClick={onClose} className=\"text-text-secondary hover:text-primary\">✕</button>\n        </div>\n        <form onSubmit={onSubmit} className=\"p-6 space-y-4\">\n          {children}\n          <div className=\"flex items-center justify-end space-x-2 pt-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n            <Button type=\"submit\" variant=\"primary\">{submitText}</Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n\n  const [createForm, setCreateForm] = useState({\n    title: '',\n    description: '',\n    featured_image: '',\n    gallery_images: [],\n    type: 'image',\n    video_url: '',\n    video_poster: '',\n    technologies: '',\n    status: 'draft',\n    github_url: '',\n    live_url: '',\n  });\n\n  const [editForm, setEditForm] = useState({});\n  const [formErrors, setFormErrors] = useState({});\n\n  const openEdit = (project) => {\n    setEditingProject(project);\n    setEditForm({\n      title: project.title || '',\n      description: project.description || '',\n      featured_image: project.featured_image || '',\n      gallery_images: project.gallery_images || [],\n      type: project.type || 'image',\n      video_url: project.video_url || '',\n      video_poster: project.video_poster || '',\n      technologies: (project.technologies || []).join(', '),\n      status: project.status || 'draft',\n      github_url: project.github_url || '',\n      live_url: project.live_url || '',\n    });\n  };\n\n  const submitCreate = (e) => {\n    e.preventDefault();\n    const errs = validateProject(createForm);\n    setFormErrors(errs);\n    if (Object.keys(errs).length) return;\n    const technologies = (createForm.technologies || '')\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean);\n    onProjectCreate({\n      title: createForm.title,\n      description: createForm.description,\n      featured_image: createForm.featured_image,\n      gallery_images: createForm.gallery_images,\n      type: createForm.type,\n      video_url: createForm.video_url,\n      video_poster: createForm.video_poster,\n      technologies,\n      status: createForm.status,\n      github_url: createForm.github_url || undefined,\n      live_url: createForm.live_url || undefined,\n      date: new Date().toISOString(),\n    });\n    setShowCreateModal(false);\n    setCreateForm({ \n      title: '', \n      description: '', \n      featured_image: '', \n      gallery_images: [], \n      type: 'image',\n      video_url: '',\n      video_poster: '',\n      technologies: '', \n      status: 'draft', \n      github_url: '', \n      live_url: '' \n    });\n  };\n\n  const submitEdit = (e) => {\n    e.preventDefault();\n    if (!editingProject) return;\n    const errs = validateProject(editForm);\n    setFormErrors(errs);\n    if (Object.keys(errs).length) return;\n    const technologies = (editForm.technologies || '')\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean);\n    onProjectUpdate(editingProject.id, {\n      title: editForm.title,\n      description: editForm.description,\n      featured_image: editForm.featured_image,\n      gallery_images: editForm.gallery_images,\n      type: editForm.type,\n      video_url: editForm.video_url,\n      video_poster: editForm.video_poster,\n      technologies,\n      status: editForm.status,\n      github_url: editForm.github_url || undefined,\n      live_url: editForm.live_url || undefined,\n    });\n    setEditingProject(null);\n  };\n\n  const filteredProjects = projects\n    .filter(project => \n      project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      project.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      project.technologies.some(tech => tech.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => {\n      const modifier = sortOrder === 'asc' ? 1 : -1;\n      if (sortBy === 'date') return (new Date(a.date) - new Date(b.date)) * modifier;\n      if (sortBy === 'title') return a.title.localeCompare(b.title) * modifier;\n      if (sortBy === 'status') return a.status.localeCompare(b.status) * modifier;\n      return 0;\n    });\n\n  const handleSelectProject = (projectId) => {\n    setSelectedProjects(prev => \n      prev.includes(projectId) \n        ? prev.filter(id => id !== projectId)\n        : [...prev, projectId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    setSelectedProjects(\n      selectedProjects.length === filteredProjects.length \n        ? [] \n        : filteredProjects.map(p => p.id)\n    );\n  };\n\n  const handleBulkDelete = () => {\n    if (window.confirm(`Delete ${selectedProjects.length} selected projects?`)) {\n      selectedProjects.forEach(id => onProjectDelete(id));\n      setSelectedProjects([]);\n    }\n  };\n\n  const handleSort = (field) => {\n    if (sortBy === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(field);\n      setSortOrder('asc');\n    }\n  };\n\n  const ProjectRow = ({ project }) => (\n    <tr className=\"border-b border-border-accent/10 hover:bg-primary/5 transition-colors duration-fast\">\n      <td className=\"px-4 py-4\">\n        <input\n          type=\"checkbox\"\n          checked={selectedProjects.includes(project.id)}\n          onChange={() => handleSelectProject(project.id)}\n          className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n        />\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 rounded-lg overflow-hidden bg-surface\">\n            <Image \n              src={project.image} \n              alt={project.title}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <div>\n            <div className=\"font-medium text-text-primary\">{project.title}</div>\n            <div className=\"text-sm text-text-secondary font-caption truncate max-w-xs\">\n              {project.description}\n            </div>\n          </div>\n        </div>\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex flex-wrap gap-1\">\n          {project.technologies.slice(0, 3).map((tech, index) => (\n            <span key={index} className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded-full font-caption\">\n              {tech}\n            </span>\n          ))}\n          {project.technologies.length > 3 && (\n            <span className=\"px-2 py-1 bg-surface text-text-secondary text-xs rounded-full font-caption\">\n              +{project.technologies.length - 3}\n            </span>\n          )}\n        </div>\n      </td>\n      <td className=\"px-4 py-4\">\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n          project.status === 'published' ? 'bg-success/10 text-success' :\n          project.status === 'draft'? 'bg-warning/10 text-warning' : 'bg-error/10 text-error'\n        }`}>\n          {project.status}\n        </span>\n      </td>\n      <td className=\"px-4 py-4 text-sm text-text-secondary font-caption\">\n        {new Date(project.date).toLocaleDateString()}\n      </td>\n      <td className=\"px-4 py-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => openEdit(project)}\n            iconName=\"Edit\"\n            className=\"p-2\"\n            title=\"Edit project\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              if (window.confirm('Delete this project?')) {\n                onProjectDelete(project.id);\n              }\n            }}\n            iconName=\"Trash2\"\n            className=\"p-2 text-error hover:text-error\"\n            title=\"Delete project\"\n          />\n        </div>\n      </td>\n    </tr>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Projects Management</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Manage your portfolio projects and showcase content\n          </p>\n        </div>\n        <Button\n          variant=\"primary\"\n          onClick={() => setShowCreateModal(true)}\n          iconName=\"Plus\"\n          iconPosition=\"left\"\n        >\n          New Project\n        </Button>\n      </div>\n\n      {/* Filters & Search */}\n      <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex-1 max-w-md\">\n            <Input\n              type=\"search\"\n              placeholder=\"Search projects...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-text-secondary font-caption\">Sort by:</span>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n                className=\"bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"date\">Date</option>\n                <option value=\"title\">Title</option>\n                <option value=\"status\">Status</option>\n              </select>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                iconName={sortOrder === 'asc' ? 'ArrowUp' : 'ArrowDown'}\n                className=\"p-2\"\n              />\n            </div>\n            {selectedProjects.length > 0 && (\n              <Button\n                variant=\"danger\"\n                size=\"sm\"\n                onClick={handleBulkDelete}\n                iconName=\"Trash2\"\n                iconPosition=\"left\"\n              >\n                Delete ({selectedProjects.length})\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Projects Table */}\n      <div className=\"bg-surface rounded-lg border border-border-accent/20 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-primary/5 border-b border-border-accent/20\">\n              <tr>\n                <th className=\"px-4 py-4 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedProjects.length === filteredProjects.length && filteredProjects.length > 0}\n                    onChange={handleSelectAll}\n                    className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n                  />\n                </th>\n                <th className=\"px-4 py-4 text-left\">\n                  <button\n                    onClick={() => handleSort('title')}\n                    className=\"flex items-center space-x-2 text-sm font-heading font-semibold text-text-primary hover:text-primary transition-colors duration-fast\"\n                  >\n                    <span>Project</span>\n                    <Icon name=\"ArrowUpDown\" size={14} />\n                  </button>\n                </th>\n                <th className=\"px-4 py-4 text-left text-sm font-heading font-semibold text-text-primary\">\n                  Technologies\n                </th>\n                <th className=\"px-4 py-4 text-left\">\n                  <button\n                    onClick={() => handleSort('status')}\n                    className=\"flex items-center space-x-2 text-sm font-heading font-semibold text-text-primary hover:text-primary transition-colors duration-fast\"\n                  >\n                    <span>Status</span>\n                    <Icon name=\"ArrowUpDown\" size={14} />\n                  </button>\n                </th>\n                <th className=\"px-4 py-4 text-left\">\n                  <button\n                    onClick={() => handleSort('date')}\n                    className=\"flex items-center space-x-2 text-sm font-heading font-semibold text-text-primary hover:text-primary transition-colors duration-fast\"\n                  >\n                    <span>Date</span>\n                    <Icon name=\"ArrowUpDown\" size={14} />\n                  </button>\n                </th>\n                <th className=\"px-4 py-4 text-left text-sm font-heading font-semibold text-text-primary\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredProjects.map((project) => (\n                <ProjectRow key={project.id} project={project} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {filteredProjects.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FolderOpen\" size={48} className=\"text-text-secondary/50 mx-auto mb-4\" />\n            <div className=\"text-text-secondary font-caption\">\n              {searchTerm ? 'No projects match your search' : 'No projects found'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-primary\">{projects.length}</div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Projects</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-success\">\n            {projects.filter(p => p.status === 'published').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Published</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-warning\">\n            {projects.filter(p => p.status === 'draft').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Drafts</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-text-primary\">{filteredProjects.length}</div>\n          <div className=\"text-sm text-text-secondary font-caption\">Filtered Results</div>\n        </div>\n      </div>\n\n      {/* Create Modal */}\n      {showCreateModal && (\n        <Modal title=\"Create Project\" onClose={() => setShowCreateModal(false)} onSubmit={submitCreate} submitText=\"Create\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={createForm.title} onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })} required />\n              {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Project Type</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={createForm.type} onChange={(e) => setCreateForm({ ...createForm, type: e.target.value })}>\n                <option value=\"image\">Image Project</option>\n                <option value=\"video\">Video Project</option>\n                <option value=\"gallery\">Image Gallery</option>\n                <option value=\"logo_gallery\">Logo Gallery</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={createForm.status} onChange={(e) => setCreateForm({ ...createForm, status: e.target.value })}>\n                <option value=\"draft\">Draft</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Description</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={4} value={createForm.description} onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Featured Image\"\n                value={createForm.featured_image}\n                onChange={(url) => setCreateForm({ ...createForm, featured_image: url })}\n                bucket=\"media\"\n                pathPrefix=\"projects\"\n                accept=\"image\"\n                helperText=\"Upload a representative image for this project.\"\n              />\n              {formErrors.featured_image && <p className=\"mt-1 text-xs text-error\">{formErrors.featured_image}</p>}\n            </div>\n            {(createForm.type === 'video') && (\n              <>\n                <div className=\"md:col-span-2\">\n                  <FileUpload\n                    label=\"Video File\"\n                    value={createForm.video_url}\n                    onChange={(url) => setCreateForm({ ...createForm, video_url: url })}\n                    bucket=\"media\"\n                    pathPrefix=\"videos\"\n                    accept=\"video\"\n                    helperText=\"Upload video file (MP4, WebM, OGG).\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <FileUpload\n                    label=\"Video Poster Image\"\n                    value={createForm.video_poster}\n                    onChange={(url) => setCreateForm({ ...createForm, video_poster: url })}\n                    bucket=\"media\"\n                    pathPrefix=\"videos\"\n                    accept=\"image\"\n                    helperText=\"Upload a poster image for the video.\"\n                  />\n                </div>\n              </>\n            )}\n            {(createForm.type === 'gallery' || createForm.type === 'logo_gallery') && (\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm text-text-secondary mb-1\">Gallery Images (comma-separated URLs)</label>\n                <textarea \n                  className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" \n                  rows={3} \n                  value={Array.isArray(createForm.gallery_images) ? createForm.gallery_images.join(', ') : createForm.gallery_images} \n                  onChange={(e) => setCreateForm({ ...createForm, gallery_images: e.target.value.split(',').map(url => url.trim()).filter(Boolean) })}\n                  placeholder=\"https://example.com/image1.jpg, https://example.com/image2.jpg\"\n                />\n              </div>\n            )}\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Technologies (comma-separated)</label>\n              <Input value={createForm.technologies} onChange={(e) => setCreateForm({ ...createForm, technologies: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">GitHub URL</label>\n              <Input type=\"url\" value={createForm.github_url} onChange={(e) => setCreateForm({ ...createForm, github_url: e.target.value })} />\n              {formErrors.github_url && <p className=\"mt-1 text-xs text-error\">{formErrors.github_url}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Live URL</label>\n              <Input type=\"url\" value={createForm.live_url} onChange={(e) => setCreateForm({ ...createForm, live_url: e.target.value })} />\n              {formErrors.live_url && <p className=\"mt-1 text-xs text-error\">{formErrors.live_url}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {/* Edit Modal */}\n      {editingProject && (\n        <Modal title=\"Edit Project\" onClose={() => setEditingProject(null)} onSubmit={submitEdit} submitText=\"Update\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={editForm.title} onChange={(e) => setEditForm({ ...editForm, title: e.target.value })} required />\n              {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Project Type</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={editForm.type} onChange={(e) => setEditForm({ ...editForm, type: e.target.value })}>\n                <option value=\"image\">Image Project</option>\n                <option value=\"video\">Video Project</option>\n                <option value=\"gallery\">Image Gallery</option>\n                <option value=\"logo_gallery\">Logo Gallery</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={editForm.status} onChange={(e) => setEditForm({ ...editForm, status: e.target.value })}>\n                <option value=\"draft\">Draft</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm text-text-secondary mb-1\">Description</label>\n              <textarea className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" rows={4} value={editForm.description} onChange={(e) => setEditForm({ ...editForm, description: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Featured Image\"\n                value={editForm.featured_image}\n                onChange={(url) => setEditForm({ ...editForm, featured_image: url })}\n                bucket=\"media\"\n                pathPrefix=\"projects\"\n                accept=\"image\"\n                helperText=\"Upload a representative image for this project.\"\n              />\n              {formErrors.featured_image && <p className=\"mt-1 text-xs text-error\">{formErrors.featured_image}</p>}\n            </div>\n            {(editForm.type === 'video') && (\n              <>\n                <div className=\"md:col-span-2\">\n                  <FileUpload\n                    label=\"Video File\"\n                    value={editForm.video_url}\n                    onChange={(url) => setEditForm({ ...editForm, video_url: url })}\n                    bucket=\"media\"\n                    pathPrefix=\"videos\"\n                    accept=\"video\"\n                    helperText=\"Upload video file (MP4, WebM, OGG).\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <FileUpload\n                    label=\"Video Poster Image\"\n                    value={editForm.video_poster}\n                    onChange={(url) => setEditForm({ ...editForm, video_poster: url })}\n                    bucket=\"media\"\n                    pathPrefix=\"videos\"\n                    accept=\"image\"\n                    helperText=\"Upload a poster image for the video.\"\n                  />\n                </div>\n              </>\n            )}\n            {(editForm.type === 'gallery' || editForm.type === 'logo_gallery') && (\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm text-text-secondary mb-1\">Gallery Images (comma-separated URLs)</label>\n                <textarea \n                  className=\"w-full px-3 py-2 bg-surface border border-border-accent/20 rounded-lg\" \n                  rows={3} \n                  value={Array.isArray(editForm.gallery_images) ? editForm.gallery_images.join(', ') : editForm.gallery_images} \n                  onChange={(e) => setEditForm({ ...editForm, gallery_images: e.target.value.split(',').map(url => url.trim()).filter(Boolean) })}\n                  placeholder=\"https://example.com/image1.jpg, https://example.com/image2.jpg\"\n                />\n              </div>\n            )}\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Technologies (comma-separated)</label>\n              <Input value={editForm.technologies} onChange={(e) => setEditForm({ ...editForm, technologies: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">GitHub URL</label>\n              <Input type=\"url\" value={editForm.github_url} onChange={(e) => setEditForm({ ...editForm, github_url: e.target.value })} />\n              {formErrors.github_url && <p className=\"mt-1 text-xs text-error\">{formErrors.github_url}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Live URL</label>\n              <Input type=\"url\" value={editForm.live_url} onChange={(e) => setEditForm({ ...editForm, live_url: e.target.value })} />\n              {formErrors.live_url && <p className=\"mt-1 text-xs text-error\">{formErrors.live_url}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectsManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/SiteSettings.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [41, 89], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [89, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [141, 191], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [198, 214], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FileUpload' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 18,
        "fix": { "range": [191, 252], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [198, 214], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport FileUpload from '../../../components/ui/FileUpload';\n\nconst SiteSettings = ({ settings, onSettingsUpdate }) => {\n  const [activeTab, setActiveTab] = useState('general');\n  const [localSettings, setLocalSettings] = useState(settings);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const tabs = [\n    { id: 'general', label: 'General', icon: 'Settings' },\n    { id: 'appearance', label: 'Appearance', icon: 'Palette' },\n    { id: 'content', label: 'Content', icon: 'FileText' },\n    { id: 'tech', label: 'Tech Stack', icon: 'Cpu' },\n    { id: 'social', label: 'Social Media', icon: 'Share2' },\n    { id: 'seo', label: 'SEO', icon: 'Search' },\n    { id: 'monetization', label: 'Monetization', icon: 'DollarSign' },\n    { id: 'advanced', label: 'Advanced', icon: 'Code' }\n  ];\n\n  const handleSettingChange = (key, value) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    setHasChanges(true);\n  };\n\n  const handleUiSettingChange = (key, value) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      ui: { ...(prev.ui || {}), [key]: value }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleAdsSettingChange = (key, value) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      ads: { ...(prev.ads || {}), [key]: value }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleTechStackChange = (next) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      ui: { ...(prev.ui || {}), tech_stack: next }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleDemoProjectsChange = (next) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      ui: { ...(prev.ui || {}), demo_projects: next }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    onSettingsUpdate(localSettings);\n    setHasChanges(false);\n  };\n\n  const handleReset = () => {\n    setLocalSettings(settings);\n    setHasChanges(false);\n  };\n\n  const renderGeneralSettings = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Site Title</label>\n          <Input\n            type=\"text\"\n            value={localSettings.siteTitle}\n            onChange={(e) => handleSettingChange('siteTitle', e.target.value)}\n            placeholder=\"WisdomInTech\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Site Tagline</label>\n          <Input\n            type=\"text\"\n            value={localSettings.siteTagline}\n            onChange={(e) => handleSettingChange('siteTagline', e.target.value)}\n            placeholder=\"Neo-Cyberpunk Experience\"\n          />\n        </div>\n      </div>\n      \n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Site Description</label>\n        <textarea\n          value={localSettings.siteDescription}\n          onChange={(e) => handleSettingChange('siteDescription', e.target.value)}\n          rows={4}\n          className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-primary resize-none\"\n          placeholder=\"A futuristic portfolio showcasing cutting-edge development work...\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Contact Email</label>\n          <Input\n            type=\"email\"\n            value={localSettings.contactEmail}\n            onChange={(e) => handleSettingChange('contactEmail', e.target.value)}\n            placeholder=\"hello@wisdomintech.dev\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Admin Email</label>\n          <Input\n            type=\"email\"\n            value={localSettings.adminEmail}\n            onChange={(e) => handleSettingChange('adminEmail', e.target.value)}\n            placeholder=\"admin@wisdomintech.dev\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Toast Duration (ms)</label>\n          <Input\n            type=\"number\"\n            min=\"1000\"\n            step=\"500\"\n            value={(localSettings.ui?.toast_duration_ms ?? 3500)}\n            onChange={(e) => handleUiSettingChange('toast_duration_ms', Math.max(0, Number(e.target.value) || 0))}\n            placeholder=\"3500\"\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">How long to show notifications. Set to 0 to require manual dismissal.</div>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between p-4 bg-primary/5 rounded-lg border border-primary/20\">\n        <div className=\"flex items-center space-x-3\">\n          <Icon name=\"Video\" size={20} className=\"text-primary\" />\n          <div>\n            <div className=\"font-medium text-text-primary\">Video Display</div>\n            <div className=\"text-sm text-text-secondary font-caption\">Enable video backgrounds and media</div>\n          </div>\n        </div>\n        <label className=\"relative inline-flex items-center cursor-pointer\">\n          <input\n            type=\"checkbox\"\n            checked={!!localSettings.enableVideo}\n            onChange={(e) => handleSettingChange('enableVideo', e.target.checked)}\n            className=\"sr-only peer\"\n          />\n          <div className=\"w-11 h-6 bg-surface peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n        </label>\n      </div>\n    </div>\n  );\n\n  const renderAppearanceSettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-4\">Default Theme</label>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {Array.isArray(localSettings.ui?.theme_presets) && localSettings.ui.theme_presets.length > 0 ? (\n            localSettings.ui.theme_presets.map((preset) => (\n              <button\n                key={preset.name}\n                onClick={() => handleSettingChange('defaultTheme', preset.name)}\n                className={`p-4 rounded-lg border-2 transition-all duration-fast ${\n                  localSettings.defaultTheme === preset.name\n                    ? 'border-primary bg-primary/10' :'border-border-accent/20 hover:border-primary/50'\n                }`}\n              >\n                <div\n                  className=\"w-full h-16 rounded-lg mb-3 flex overflow-hidden\"\n                  style={{\n                    background: preset.background || '#111827'\n                  }}\n                >\n                  <div className=\"flex-1 h-full\" style={{ background: preset.primary || '#6366f1', opacity: 0.85 }}></div>\n                  <div className=\"flex-1 h-full\" style={{ background: preset.accent || '#f59e0b', opacity: 0.65 }}></div>\n                </div>\n                <div className=\"text-sm font-medium text-text-primary capitalize flex items-center justify-between\">\n                  <span>{preset.name}</span>\n                  {localSettings.defaultTheme === preset.name && (\n                    <Icon name=\"Check\" size={16} className=\"text-primary\" />\n                  )}\n                </div>\n              </button>\n            ))\n          ) : (\n            ['cyberpunk', 'neural', 'futuristic', 'light'].map((theme) => (\n              <button\n                key={theme}\n                onClick={() => handleSettingChange('defaultTheme', theme)}\n                className={`p-4 rounded-lg border-2 transition-all duration-fast ${\n                  localSettings.defaultTheme === theme\n                    ? 'border-primary bg-primary/10' :'border-border-accent/20 hover:border-primary/50'\n                }`}\n              >\n                <div className={`w-full h-16 rounded-lg mb-3 ${\n                  theme === 'cyberpunk' ? 'bg-gradient-to-br from-primary to-secondary' :\n                  theme === 'neural' ? 'bg-gradient-to-br from-accent to-primary' :\n                  theme === 'futuristic'? 'bg-gradient-to-br from-secondary to-accent' : 'bg-gradient-to-br from-gray-300 to-gray-500'\n                }`}></div>\n                <div className=\"text-sm font-medium text-text-primary capitalize\">{theme}</div>\n              </button>\n            ))\n          )}\n        </div>\n        {Array.isArray(localSettings.ui?.theme_presets) && (\n          <div className=\"mt-4 text-xs text-text-secondary font-caption\">\n            Theme presets are stored in settings.ui.theme_presets. You can extend them via a migration/patch.\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-4\">Font Size Options</label>\n        <div className=\"flex items-center space-x-4\">\n          {['small', 'medium', 'large'].map((size) => (\n            <button\n              key={size}\n              onClick={() => handleSettingChange('defaultFontSize', size)}\n              className={`px-4 py-2 rounded-lg border transition-all duration-fast ${\n                localSettings.defaultFontSize === size\n                  ? 'border-primary bg-primary/10 text-primary' :'border-border-accent/20 text-text-secondary hover:border-primary/50'\n              }`}\n            >\n              <span className={`${\n                size === 'small' ? 'text-sm' :\n                size === 'large' ? 'text-lg' : 'text-base'\n              }`}>\n                {size.charAt(0).toUpperCase() + size.slice(1)}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <FileUpload\n            label=\"Logo\"\n            value={localSettings.logoUrl}\n            onChange={(url) => handleSettingChange('logoUrl', url)}\n            bucket=\"logos\"\n            pathPrefix=\"logos\"\n            accept=\"image\"\n            helperText=\"Upload a PNG/SVG logo.\"\n          />\n        </div>\n        <div>\n          <FileUpload\n            label=\"Favicon\"\n            value={localSettings.faviconUrl}\n            onChange={(url) => handleSettingChange('faviconUrl', url)}\n            bucket=\"logos\"\n            pathPrefix=\"favicons\"\n            accept=\"icon\"\n            helperText=\"Upload a .ico or PNG square icon.\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <FileUpload\n          label=\"Resume/CV\"\n          value={localSettings.resumeUrl}\n          onChange={(url) => handleSettingChange('resumeUrl', url)}\n          bucket=\"media\"\n          pathPrefix=\"documents\"\n          accept=\"document\"\n          helperText=\"Upload your resume/CV as PDF, DOC, or DOCX.\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2 flex items-center gap-2\">\n          <Icon name=\"Video\" size={16} className=\"text-primary\" />\n          Hero Background Video (optional)\n        </label>\n        <div className=\"text-xs text-text-secondary font-caption mb-2\">\n          Provide a short, muted background video for the hero section. MP4/WebM recommended. Keep under ~10MB for performance.\n        </div>\n        <FileUpload\n          label=\"\"\n          value={(localSettings.ui?.hero_video_url) || ''}\n          onChange={(url) => handleUiSettingChange('hero_video_url', url)}\n          bucket=\"media\"\n          pathPrefix=\"videos\"\n          accept=\"video\"\n          helperText=\"Accepted: mp4, webm, ogg. Autoplay is muted.\"\n        />\n      </div>\n    </div>\n  );\n\n  const renderContentSettings = () => (\n    <div className=\"space-y-8\">\n      {/* Hero Section Settings */}\n      <div>\n        <h3 className=\"text-lg font-heading font-semibold text-text-primary mb-4\">Hero Section</h3>\n        \n        {/* Hero Profile Image */}\n        <div className=\"mb-6\">\n          <FileUpload\n            label=\"Hero Profile Image\"\n            value={localSettings.hero_image_url || ''}\n            onChange={(url) => handleSettingChange('hero_image_url', url)}\n            bucket=\"media\"\n            pathPrefix=\"hero\"\n            accept=\"image\"\n            helperText=\"Upload your profile image for the hero section. Recommended: 400x400px.\"\n          />\n        </div>\n\n        {/* Hero Video Background */}\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2 flex items-center gap-2\">\n            <Icon name=\"Video\" size={16} className=\"text-primary\" />\n            Hero Background Video (optional)\n          </label>\n          <div className=\"text-xs text-text-secondary font-caption mb-2\">\n            Provide a short, muted background video for the hero section. MP4/WebM recommended. Keep under ~10MB for performance.\n          </div>\n          <FileUpload\n            label=\"\"\n            value={(localSettings.ui?.hero_video_url) || ''}\n            onChange={(url) => handleUiSettingChange('hero_video_url', url)}\n            bucket=\"media\"\n            pathPrefix=\"videos\"\n            accept=\"video\"\n            helperText=\"Accepted: mp4, webm, ogg. Autoplay is muted.\"\n          />\n        </div>\n      </div>\n\n      {/* Demo Projects Settings */}\n      <div>\n        <h3 className=\"text-lg font-heading font-semibold text-text-primary mb-4\">Demo Projects</h3>\n        <p className=\"text-sm text-text-secondary font-caption mb-4\">\n          Manage the demo projects shown in the homepage carousel. These are showcase projects for visitors.\n        </p>\n        {renderDemoProjectsSettings()}\n      </div>\n    </div>\n  );\n\n  const renderDemoProjectsSettings = () => {\n    const projects = (localSettings.ui?.demo_projects) || [];\n    const updateProject = (idx, patch) => {\n      const next = projects.map((p, i) => i === idx ? { ...p, ...patch } : p);\n      handleDemoProjectsChange(next);\n    };\n    const addProject = () => {\n      const next = [...projects, { \n        title: '', \n        description: '', \n        image: '',\n        tech: [],\n        status: 'Live',\n        category: '',\n        liveUrl: '',\n        githubUrl: ''\n      }];\n      handleDemoProjectsChange(next);\n    };\n    const removeProject = (idx) => {\n      const next = projects.filter((_, i) => i !== idx);\n      handleDemoProjectsChange(next);\n    };\n    const moveProject = (from, to) => {\n      if (to < 0 || to >= projects.length) return;\n      const next = [...projects];\n      const [project] = next.splice(from, 1);\n      next.splice(to, 0, project);\n      handleDemoProjectsChange(next);\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h4 className=\"text-md font-semibold text-text-primary\">Projects Showcase</h4>\n            <p className=\"text-sm text-text-secondary\">Add and manage demo projects for the homepage carousel.</p>\n          </div>\n          <Button variant=\"primary\" onClick={addProject} iconName=\"Plus\" iconPosition=\"left\">Add Project</Button>\n        </div>\n\n        {projects.length === 0 && (\n          <div className=\"text-center py-8 border border-border-accent/20 rounded-lg bg-surface/30\">\n            <Icon name=\"FolderOpen\" size={48} className=\"mx-auto text-text-secondary mb-4\" />\n            <h4 className=\"text-lg font-semibold text-text-primary mb-2\">No Demo Projects</h4>\n            <p className=\"text-text-secondary mb-4\">Add demo projects to showcase your work on the homepage.</p>\n            <Button variant=\"primary\" onClick={addProject} iconName=\"Plus\" iconPosition=\"left\">Add Your First Project</Button>\n          </div>\n        )}\n\n        <div className=\"space-y-6\">\n          {projects.map((project, idx) => (\n            <div key={idx} className=\"p-6 rounded-lg border border-border-accent/20 bg-surface/30\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-text-primary\">Project #{idx + 1}</h4>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    iconName=\"ArrowUp\"\n                    onClick={() => moveProject(idx, idx - 1)}\n                    disabled={idx === 0}\n                  />\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    iconName=\"ArrowDown\"\n                    onClick={() => moveProject(idx, idx + 1)}\n                    disabled={idx === projects.length - 1}\n                  />\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    iconName=\"Trash2\"\n                    onClick={() => removeProject(idx)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div>\n                  <label className=\"block text-xs text-text-secondary mb-1\">Title *</label>\n                  <Input \n                    value={project.title} \n                    onChange={(e) => updateProject(idx, { title: e.target.value })}\n                    placeholder=\"Project title\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-text-secondary mb-1\">Category</label>\n                  <Input \n                    value={project.category} \n                    onChange={(e) => updateProject(idx, { category: e.target.value })}\n                    placeholder=\"e.g., FinTech, AI/ML, Security\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mb-4\">\n                <label className=\"block text-xs text-text-secondary mb-1\">Description</label>\n                <textarea\n                  value={project.description}\n                  onChange={(e) => updateProject(idx, { description: e.target.value })}\n                  placeholder=\"Brief description of the project...\"\n                  className=\"w-full px-3 py-2 border border-border-accent/20 rounded-lg bg-background/50 text-text-primary resize-none\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"mb-4\">\n                <FileUpload\n                  label=\"Project Image\"\n                  value={project.image}\n                  onChange={(url) => updateProject(idx, { image: url })}\n                  bucket=\"media\"\n                  pathPrefix=\"projects\"\n                  accept=\"image\"\n                  helperText=\"Upload project screenshot or demo image.\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div>\n                  <label className=\"block text-xs text-text-secondary mb-1\">Status</label>\n                  <select\n                    value={project.status}\n                    onChange={(e) => updateProject(idx, { status: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-border-accent/20 rounded-lg bg-background/50 text-text-primary\"\n                  >\n                    <option value=\"Live\">Live</option>\n                    <option value=\"Development\">Development</option>\n                    <option value=\"Beta\">Beta</option>\n                    <option value=\"Research\">Research</option>\n                    <option value=\"Completed\">Completed</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-xs text-text-secondary mb-1\">Live URL (optional)</label>\n                  <Input \n                    value={project.liveUrl || ''} \n                    onChange={(e) => updateProject(idx, { liveUrl: e.target.value })}\n                    placeholder=\"https://...\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-text-secondary mb-1\">GitHub URL (optional)</label>\n                  <Input \n                    value={project.githubUrl || ''} \n                    onChange={(e) => updateProject(idx, { githubUrl: e.target.value })}\n                    placeholder=\"https://github.com/...\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-xs text-text-secondary mb-1\">Technologies (comma-separated)</label>\n                <Input \n                  value={Array.isArray(project.tech) ? project.tech.join(', ') : ''} \n                  onChange={(e) => updateProject(idx, { \n                    tech: e.target.value.split(',').map(t => t.trim()).filter(t => t) \n                  })}\n                  placeholder=\"React, Node.js, PostgreSQL, Docker\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderTechStackSettings = () => {\n    const stack = (localSettings.ui?.tech_stack) || [];\n    const updateItem = (idx, patch) => {\n      const next = stack.map((t, i) => i === idx ? { ...t, ...patch } : t);\n      handleTechStackChange(next);\n    };\n    const addItem = () => {\n      const next = [...stack, { name: '', icon: 'Code', category: '', proficiency: 50, description: '' }];\n      handleTechStackChange(next);\n    };\n    const removeItem = (idx) => {\n      const next = stack.filter((_, i) => i !== idx);\n      handleTechStackChange(next);\n    };\n    const moveItem = (from, to) => {\n      if (to < 0 || to >= stack.length) return;\n      const next = [...stack];\n      const [it] = next.splice(from, 1);\n      next.splice(to, 0, it);\n      handleTechStackChange(next);\n    };\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Technology Stack</h3>\n            <p className=\"text-sm text-text-secondary font-caption\">Manage the technologies shown on the home page grid.</p>\n          </div>\n          <Button variant=\"primary\" onClick={addItem} iconName=\"Plus\" iconPosition=\"left\">Add</Button>\n        </div>\n        {stack.length === 0 && (\n          <div className=\"text-sm text-text-secondary\">No items yet. Click Add to create your first tech.</div>\n        )}\n        <div className=\"space-y-3\">\n          {stack.map((tech, idx) => (\n            <div key={idx} className=\"p-4 rounded-lg border border-border-accent/20 bg-surface\">\n              <div className=\"grid grid-cols-1 md:grid-cols-6 gap-3 items-center\">\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-xs text-text-secondary mb-1\">Name</label>\n                  <Input value={tech.name} onChange={(e) => updateItem(idx, { name: e.target.value })} />\n                </div>\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-xs text-text-secondary mb-1\">Icon</label>\n                  <Input value={tech.icon} onChange={(e) => updateItem(idx, { icon: e.target.value })} placeholder=\"e.g., Code, Server\" />\n                </div>\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-xs text-text-secondary mb-1\">Category</label>\n                  <Input value={tech.category} onChange={(e) => updateItem(idx, { category: e.target.value })} />\n                </div>\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-xs text-text-secondary mb-1\">Proficiency (%)</label>\n                  <Input type=\"number\" min=\"0\" max=\"100\" value={tech.proficiency ?? 0} onChange={(e) => updateItem(idx, { proficiency: Math.max(0, Math.min(100, Number(e.target.value)||0)) })} />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-xs text-text-secondary mb-1\">Description</label>\n                  <Input value={tech.description || ''} onChange={(e) => updateItem(idx, { description: e.target.value })} />\n                </div>\n              </div>\n              <div className=\"mt-3 flex items-center gap-2 justify-end\">\n                <Button size=\"sm\" variant=\"ghost\" iconName=\"ArrowUp\" onClick={() => moveItem(idx, idx-1)} title=\"Move up\" />\n                <Button size=\"sm\" variant=\"ghost\" iconName=\"ArrowDown\" onClick={() => moveItem(idx, idx+1)} title=\"Move down\" />\n                <Button size=\"sm\" variant=\"danger\" iconName=\"Trash2\" onClick={() => removeItem(idx)}>\n                  Remove\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSocialSettings = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            <Icon name=\"Twitter\" size={16} className=\"inline mr-2\" />\n            X (Twitter) Username\n          </label>\n          <Input\n            type=\"text\"\n            value={localSettings.socialMedia.twitter}\n            onChange={(e) => handleSettingChange('socialMedia', { ...localSettings.socialMedia, twitter: e.target.value })}\n            placeholder=\"mikael_kraft\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            <Icon name=\"Linkedin\" size={16} className=\"inline mr-2\" />\n            LinkedIn Profile\n          </label>\n          <Input\n            type=\"text\"\n            value={localSettings.socialMedia.linkedin}\n            onChange={(e) => handleSettingChange('socialMedia', { ...localSettings.socialMedia, linkedin: e.target.value })}\n            placeholder=\"in/mikael-kraft\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            <Icon name=\"Github\" size={16} className=\"inline mr-2\" />\n            GitHub Username\n          </label>\n          <Input\n            type=\"text\"\n            value={localSettings.socialMedia.github}\n            onChange={(e) => handleSettingChange('socialMedia', { ...localSettings.socialMedia, github: e.target.value })}\n            placeholder=\"mikaelkraft\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            <Icon name=\"Mail\" size={16} className=\"inline mr-2\" />\n            Contact Email Display\n          </label>\n          <Input\n            type=\"email\"\n            value={localSettings.socialMedia.email}\n            onChange={(e) => handleSettingChange('socialMedia', { ...localSettings.socialMedia, email: e.target.value })}\n            placeholder=\"mikewillkraft@gmail.com\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderSEOSettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Meta Keywords</label>\n        <Input\n          type=\"text\"\n          value={localSettings.seo.keywords}\n          onChange={(e) => handleSettingChange('seo', { ...localSettings.seo, keywords: e.target.value })}\n          placeholder=\"portfolio, developer, cyberpunk, react, javascript\"\n        />\n        <div className=\"text-xs text-text-secondary font-caption mt-1\">\n          Separate keywords with commas\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Open Graph Image</label>\n        <Input\n          type=\"url\"\n          value={localSettings.seo.ogImage}\n          onChange={(e) => handleSettingChange('seo', { ...localSettings.seo, ogImage: e.target.value })}\n          placeholder=\"https://example.com/og-image.jpg\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Google Analytics ID</label>\n          <Input\n            type=\"text\"\n            value={localSettings.seo.googleAnalytics}\n            onChange={(e) => handleSettingChange('seo', { ...localSettings.seo, googleAnalytics: e.target.value })}\n            placeholder=\"GA-XXXXXXXXX-X\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Google Search Console</label>\n          <Input\n            type=\"text\"\n            value={localSettings.seo.searchConsole}\n            onChange={(e) => handleSettingChange('seo', { ...localSettings.seo, searchConsole: e.target.value })}\n            placeholder=\"verification-code\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderMonetizationSettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Ad Provider</label>\n        <select\n          className=\"w-full px-4 py-2 bg-surface border border-border-accent/20 rounded-lg text-text-primary\"\n          value={localSettings.ads?.provider || 'adsense'}\n          onChange={(e) => handleAdsSettingChange('provider', e.target.value)}\n        >\n          <option value=\"adsense\">Google AdSense</option>\n          <option value=\"yllix\">Yllix</option>\n          <option value=\"custom\">Custom Script</option>\n        </select>\n      </div>\n      <div className=\"flex items-center justify-between p-4 bg-accent/5 rounded-lg border border-accent/20\">\n        <div className=\"flex items-center space-x-3\">\n          <Icon name=\"BadgeDollarSign\" size={20} className=\"text-accent\" />\n          <div>\n            <div className=\"font-medium text-text-primary\">Enable Blog Ads (AdSense)</div>\n            <div className=\"text-sm text-text-secondary font-caption\">Show ads in the blog grid and optionally enable Auto Ads</div>\n          </div>\n        </div>\n        <label className=\"relative inline-flex items-center cursor-pointer\">\n          <input\n            type=\"checkbox\"\n            checked={!!localSettings.ads?.enabled}\n            onChange={(e) => handleAdsSettingChange('enabled', e.target.checked)}\n            className=\"sr-only peer\"\n          />\n          <div className=\"w-11 h-6 bg-surface rounded-full peer peer-checked:bg-accent\"></div>\n        </label>\n      </div>\n\n      {(!localSettings.ads?.provider || localSettings.ads?.provider === 'adsense') && (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">AdSense Publisher ID</label>\n          <Input\n            type=\"text\"\n            placeholder=\"ca-pub-XXXXXXXXXXXXXXXX\"\n            value={localSettings.ads?.publisher_id || ''}\n            onChange={(e) => handleAdsSettingChange('publisher_id', e.target.value)}\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">Required by AdSense. Copy from your AdSense account.</div>\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Ad Slot ID (optional)</label>\n          <Input\n            type=\"text\"\n            placeholder=\"1234567890\"\n            value={localSettings.ads?.ad_slot || ''}\n            onChange={(e) => handleAdsSettingChange('ad_slot', e.target.value)}\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">If empty, only Auto Ads are used (if enabled).</div>\n        </div>\n      </div>\n      )}\n\n      {localSettings.ads?.provider === 'yllix' && (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">Yllix Publisher ID</label>\n            <Input\n              type=\"text\"\n              placeholder=\"Your Yllix publisher id\"\n              value={localSettings.ads?.yllix_publisher_id || ''}\n              onChange={(e) => handleAdsSettingChange('yllix_publisher_id', e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">Yllix Ad Unit Code</label>\n            <textarea\n              rows={4}\n              className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-primary resize-none\"\n              placeholder=\"Paste the ad unit script snippet provided by Yllix\"\n              value={localSettings.ads?.yllix_unit_code || ''}\n              onChange={(e) => handleAdsSettingChange('yllix_unit_code', e.target.value)}\n            />\n            <div className=\"text-xs text-text-secondary font-caption mt-1\">We will inject this safely into the blog grid at your interval.</div>\n          </div>\n        </div>\n      )}\n\n      {localSettings.ads?.provider === 'custom' && (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">Custom Script URL</label>\n            <Input\n              type=\"url\"\n              placeholder=\"https://cdn.example.com/ads.js\"\n              value={localSettings.ads?.custom_script_url || ''}\n              onChange={(e) => handleAdsSettingChange('custom_script_url', e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">Custom Ad HTML</label>\n            <textarea\n              rows={4}\n              className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-primary resize-none\"\n              placeholder=\"<div class='your-ad'></div>\"\n              value={localSettings.ads?.custom_ad_html || ''}\n              onChange={(e) => handleAdsSettingChange('custom_ad_html', e.target.value)}\n            />\n            <div className=\"text-xs text-text-secondary font-caption mt-1\">Custom HTML placed as ad content. Use responsibly.</div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"flex items-center gap-2\">\n          <input id=\"auto-ads\" type=\"checkbox\" className=\"w-4 h-4\" checked={!!localSettings.ads?.auto_ads} onChange={(e) => handleAdsSettingChange('auto_ads', e.target.checked)} />\n          <label htmlFor=\"auto-ads\" className=\"text-sm text-text-secondary\">Enable Auto Ads</label>\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Grid Ad Interval</label>\n          <Input\n            type=\"number\"\n            min=\"3\"\n            step=\"1\"\n            value={localSettings.ads?.grid_interval ?? 6}\n            onChange={(e) => handleAdsSettingChange('grid_interval', Math.max(1, Number(e.target.value) || 6))}\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">Insert an ad after this many posts (requires Ad Slot ID).</div>\n        </div>\n      </div>\n\n      {/* Header Code Injection */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-lg font-heading font-semibold text-text-primary flex items-center gap-2\">\n          <Icon name=\"Code\" size={20} className=\"text-primary\" />\n          Code Injection\n        </h4>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Header Code (HTML/JS)</label>\n          <textarea\n            className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary font-mono text-sm resize-y\"\n            rows={6}\n            placeholder=\"<!-- Analytics, ads, or custom scripts -->\"\n            value={localSettings.ads?.header_code || ''}\n            onChange={(e) => handleAdsSettingChange('header_code', e.target.value)}\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">\n            Code injected in the &lt;head&gt; tag. Use for analytics, ads, or custom scripts.\n          </div>\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">Footer Code (HTML/JS)</label>\n          <textarea\n            className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary font-mono text-sm resize-y\"\n            rows={4}\n            placeholder=\"<!-- Footer scripts -->\"\n            value={localSettings.ads?.footer_code || ''}\n            onChange={(e) => handleAdsSettingChange('footer_code', e.target.value)}\n          />\n          <div className=\"text-xs text-text-secondary font-caption mt-1\">\n            Code injected before the closing &lt;/body&gt; tag.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAdvancedSettings = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between p-4 bg-warning/5 rounded-lg border border-warning/20\">\n        <div className=\"flex items-center space-x-3\">\n          <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n          <div>\n            <div className=\"font-medium text-text-primary\">Maintenance Mode</div>\n            <div className=\"text-sm text-text-secondary font-caption\">Temporarily disable public access</div>\n          </div>\n        </div>\n        <label className=\"relative inline-flex items-center cursor-pointer\">\n          <input\n            type=\"checkbox\"\n            checked={localSettings.maintenanceMode}\n            onChange={(e) => handleSettingChange('maintenanceMode', e.target.checked)}\n            className=\"sr-only peer\"\n          />\n          <div className=\"w-11 h-6 bg-surface peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-warning/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-warning\"></div>\n        </label>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Custom CSS</label>\n        <textarea\n          value={localSettings.customCSS}\n          onChange={(e) => handleSettingChange('customCSS', e.target.value)}\n          rows={8}\n          className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-primary resize-none font-code text-sm\"\n          placeholder=\"/* Add your custom CSS here */\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-text-primary mb-2\">Custom JavaScript</label>\n        <textarea\n          value={localSettings.customJS}\n          onChange={(e) => handleSettingChange('customJS', e.target.value)}\n          rows={8}\n          className=\"w-full px-4 py-3 bg-surface border border-border-accent/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-primary resize-none font-code text-sm\"\n          placeholder=\"// Add your custom JavaScript here\"\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Site Settings</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Configure your portfolio website settings and preferences\n          </p>\n        </div>\n        {hasChanges && (\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={handleSave}\n              iconName=\"Save\"\n              iconPosition=\"left\"\n            >\n              Save Changes\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-surface rounded-lg border border-border-accent/20 overflow-hidden\">\n        <div className=\"flex overflow-x-auto\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 px-6 py-4 text-sm font-medium whitespace-nowrap transition-all duration-fast ${\n                activeTab === tab.id\n                  ? 'text-primary bg-primary/10 border-b-2 border-primary' :'text-text-secondary hover:text-primary hover:bg-primary/5'\n              }`}\n            >\n              <Icon name={tab.icon} size={16} />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"p-6\">\n          {activeTab === 'general' && renderGeneralSettings()}\n          {activeTab === 'appearance' && renderAppearanceSettings()}\n          {activeTab === 'content' && renderContentSettings()}\n          {activeTab === 'tech' && renderTechStackSettings()}\n          {activeTab === 'social' && renderSocialSettings()}\n          {activeTab === 'seo' && renderSEOSettings()}\n          {activeTab === 'monetization' && renderMonetizationSettings()}\n          {activeTab === 'advanced' && renderAdvancedSettings()}\n        </div>\n      </div>\n\n      {/* Save Notice */}\n      {hasChanges && (\n        <div className=\"fixed bottom-6 right-6 bg-primary text-background px-6 py-3 rounded-lg shadow-glow-primary\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"AlertCircle\" size={16} />\n            <span className=\"text-sm font-medium\">You have unsaved changes</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SiteSettings;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/components/SlidesManagement.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'isValidUrl' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isValidUrl" },
            "fix": { "range": [63, 75], "text": "" },
            "desc": "Remove unused variable 'isValidUrl'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'isValidUrl' is defined but never used.",
        "line": 2,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 35,
        "fix": { "range": [63, 75], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isValidUrl" },
            "fix": { "range": [63, 75], "text": "" },
            "desc": "Remove unused variable 'isValidUrl'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [119, 129], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [112, 160], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [119, 129], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [167, 179], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [160, 212], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [167, 179], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [219, 230], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13,
        "fix": { "range": [212, 262], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [219, 230], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [269, 280], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "fix": { "range": [262, 312], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [269, 280], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'FileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [319, 335], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'FileUpload' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "fix": { "range": [312, 373], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "FileUpload" },
            "fix": { "range": [319, 335], "text": "" },
            "desc": "Remove unused variable 'FileUpload'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Modal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Modal" },
            "fix": { "range": [1097, 2084], "text": "" },
            "desc": "Remove unused variable 'Modal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'SlideCard' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SlideCard" },
            "fix": { "range": [4432, 8581], "text": "" },
            "desc": "Remove unused variable 'SlideCard'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "import React, { useState } from 'react';\nimport { validateSlide, isValidUrl } from '../../../utils/validation';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Image from '../../../components/AppImage';\nimport FileUpload from '../../../components/ui/FileUpload';\n\nconst SlidesManagement = ({ slides, onSlideUpdate, onSlideDelete, onSlideCreate, onSlideReorder }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSlides, setSelectedSlides] = useState([]);\n  const [editingSlide, setEditingSlide] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [draggedSlide, setDraggedSlide] = useState(null);\n  const [createForm, setCreateForm] = useState({\n    title: '',\n    subtitle: '',\n    backgroundImage: '',\n    ctaText: '',\n    ctaLink: '',\n    duration: 5,\n    status: 'active',\n    order: (slides?.length || 0) + 1,\n  });\n  const [editForm, setEditForm] = useState({});\n  const [formErrors, setFormErrors] = useState({});\n\n  const Modal = ({ title, onClose, onSubmit, submitText = 'Save', children }) => (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n      <div className=\"bg-surface border border-border-accent/20 rounded-lg shadow-glow-primary w-full max-w-2xl\">\n        <div className=\"px-6 py-4 border-b border-border-accent/20 flex items-center justify-between\">\n          <h3 className=\"text-lg font-heading font-semibold text-text-primary\">{title}</h3>\n          <button onClick={onClose} className=\"text-text-secondary hover:text-primary\">✕</button>\n        </div>\n        <form onSubmit={onSubmit} className=\"p-6 space-y-4\">\n          {children}\n          <div className=\"flex items-center justify-end space-x-2 pt-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n            <Button type=\"submit\" variant=\"primary\">{submitText}</Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n\n  const openEdit = (slide) => {\n    setEditingSlide(slide);\n    setEditForm({\n      title: slide.title || '',\n      subtitle: slide.subtitle || '',\n      backgroundImage: slide.backgroundImage || '',\n      ctaText: slide.ctaText || '',\n      ctaLink: slide.ctaLink || '',\n      duration: slide.duration || 5,\n      status: slide.status || 'active',\n      order: slide.order || 1,\n    });\n  };\n\n  const submitCreate = (e) => {\n    e.preventDefault();\n    const errs = validateSlide(createForm);\n    setFormErrors(errs);\n    if (Object.keys(errs).length) return;\n    onSlideCreate({ ...createForm });\n    setShowCreateModal(false);\n    setCreateForm({ title: '', subtitle: '', backgroundImage: '', ctaText: '', ctaLink: '', duration: 5, status: 'active', order: (slides?.length || 0) + 1 });\n  };\n\n  const submitEdit = (e) => {\n    e.preventDefault();\n    if (!editingSlide) return;\n    const errs = validateSlide(editForm);\n    setFormErrors(errs);\n    if (Object.keys(errs).length) return;\n    onSlideUpdate(editingSlide.id, { ...editForm });\n    setEditingSlide(null);\n  };\n\n  const filteredSlides = slides\n    .filter(slide => \n      slide.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      slide.subtitle.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    .sort((a, b) => a.order - b.order);\n\n  const handleSelectSlide = (slideId) => {\n    setSelectedSlides(prev => \n      prev.includes(slideId) \n        ? prev.filter(id => id !== slideId)\n        : [...prev, slideId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    setSelectedSlides(\n      selectedSlides.length === filteredSlides.length \n        ? [] \n        : filteredSlides.map(s => s.id)\n    );\n  };\n\n  const handleBulkDelete = () => {\n    if (window.confirm(`Delete ${selectedSlides.length} selected slides?`)) {\n      selectedSlides.forEach(id => onSlideDelete(id));\n      setSelectedSlides([]);\n    }\n  };\n\n  const handleDragStart = (e, slide) => {\n    setDraggedSlide(slide);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e, targetSlide) => {\n    e.preventDefault();\n    if (draggedSlide && draggedSlide.id !== targetSlide.id) {\n      onSlideReorder(draggedSlide.id, targetSlide.order);\n    }\n    setDraggedSlide(null);\n  };\n\n  const SlideCard = ({ slide }) => (\n    <div\n      draggable\n      onDragStart={(e) => handleDragStart(e, slide)}\n      onDragOver={handleDragOver}\n      onDrop={(e) => handleDrop(e, slide)}\n      className={`bg-surface rounded-lg border border-border-accent/20 overflow-hidden hover:shadow-glow-primary transition-all duration-fast cursor-move ${\n        draggedSlide?.id === slide.id ? 'opacity-50' : ''\n      }`}\n    >\n      {/* Slide Preview */}\n      <div className=\"relative h-48 bg-gradient-to-br from-primary/20 to-secondary/20\">\n        <Image \n          src={slide.backgroundImage} \n          alt={slide.title}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 to-transparent\"></div>\n        <div className=\"absolute top-4 left-4\">\n          <input\n            type=\"checkbox\"\n            checked={selectedSlides.includes(slide.id)}\n            onChange={() => handleSelectSlide(slide.id)}\n            className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n          />\n        </div>\n        <div className=\"absolute top-4 right-4 flex items-center space-x-2\">\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n            slide.status === 'active' ? 'bg-success/10 text-success' : 'bg-warning/10 text-warning'\n          }`}>\n            {slide.status}\n          </span>\n          <div className=\"bg-background/80 rounded-full px-2 py-1 text-xs font-caption text-text-primary\">\n            #{slide.order}\n          </div>\n        </div>\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <h3 className=\"text-lg font-heading font-bold text-text-primary mb-1 truncate\">\n            {slide.title}\n          </h3>\n          <p className=\"text-sm text-text-secondary font-caption truncate\">\n            {slide.subtitle}\n          </p>\n        </div>\n      </div>\n\n      {/* Slide Info */}\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={14} className=\"text-text-secondary\" />\n            <span className=\"text-xs text-text-secondary font-caption\">\n              Duration: {slide.duration}s\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Eye\" size={14} className=\"text-text-secondary\" />\n            <span className=\"text-xs text-text-secondary font-caption\">\n              {slide.views} views\n            </span>\n          </div>\n        </div>\n\n        {/* CTA Button Preview */}\n        {slide.ctaText && (\n          <div className=\"mb-3\">\n            <div className=\"text-xs text-text-secondary font-caption mb-1\">Call to Action:</div>\n            <div className=\"inline-flex items-center px-3 py-1 bg-primary/10 text-primary rounded-lg text-sm\">\n              {slide.ctaText}\n              <Icon name=\"ArrowRight\" size={14} className=\"ml-1\" />\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => openEdit(slide)}\n              iconName=\"Edit\"\n              className=\"p-2\"\n              title=\"Edit slide\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                if (window.confirm('Delete this slide?')) {\n                  onSlideDelete(slide.id);\n                }\n              }}\n              iconName=\"Trash2\"\n              className=\"p-2 text-error hover:text-error\"\n              title=\"Delete slide\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Icon name=\"GripVertical\" size={16} className=\"text-text-secondary\" />\n            <span className=\"text-xs text-text-secondary font-caption\">Drag to reorder</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-heading font-bold text-primary\">Hero Slides Management</h1>\n          <p className=\"text-text-secondary font-caption mt-2\">\n            Manage carousel slides and hero section content\n          </p>\n        </div>\n        <Button\n          variant=\"primary\"\n          onClick={() => setShowCreateModal(true)}\n          iconName=\"ImagePlus\"\n          iconPosition=\"left\"\n        >\n          New Slide\n        </Button>\n      </div>\n\n      {/* Controls */}\n      <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex-1 max-w-md\">\n            <Input\n              type=\"search\"\n              placeholder=\"Search slides...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 text-sm text-text-secondary font-caption\">\n              <Icon name=\"Info\" size={16} />\n              <span>Drag slides to reorder carousel sequence</span>\n            </div>\n            {selectedSlides.length > 0 && (\n              <Button\n                variant=\"danger\"\n                size=\"sm\"\n                onClick={handleBulkDelete}\n                iconName=\"Trash2\"\n                iconPosition=\"left\"\n              >\n                Delete ({selectedSlides.length})\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Slides Grid */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={selectedSlides.length === filteredSlides.length && filteredSlides.length > 0}\n              onChange={handleSelectAll}\n              className=\"w-4 h-4 text-primary bg-surface border-border-accent rounded focus:ring-primary focus:ring-2\"\n            />\n            <span className=\"text-sm text-text-secondary font-caption\">\n              Select all ({filteredSlides.length} slides)\n            </span>\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">\n            {filteredSlides.filter(s => s.status === 'active').length} active slides\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredSlides.map((slide) => (\n            <SlideCard key={slide.id} slide={slide} />\n          ))}\n        </div>\n\n        {filteredSlides.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Image\" size={48} className=\"text-text-secondary/50 mx-auto mb-4\" />\n            <div className=\"text-text-secondary font-caption\">\n              {searchTerm ? 'No slides match your search' : 'No slides found'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-primary\">{slides.length}</div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Slides</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-success\">\n            {slides.filter(s => s.status === 'active').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Active</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-warning\">\n            {slides.filter(s => s.status === 'inactive').length}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Inactive</div>\n        </div>\n        <div className=\"bg-surface rounded-lg p-4 border border-border-accent/20\">\n          <div className=\"text-2xl font-heading font-bold text-text-primary\">\n            {slides.reduce((sum, slide) => sum + slide.views, 0).toLocaleString()}\n          </div>\n          <div className=\"text-sm text-text-secondary font-caption\">Total Views</div>\n        </div>\n      </div>\n\n      {/* Carousel Preview */}\n      <div className=\"bg-surface rounded-lg p-6 border border-border-accent/20\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-heading font-semibold text-text-primary\">Carousel Preview</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Play\"\n            iconPosition=\"left\"\n          >\n            Preview Carousel\n          </Button>\n        </div>\n        <div className=\"h-32 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Icon name=\"Play\" size={32} className=\"text-text-secondary/50 mx-auto mb-2\" />\n            <div className=\"text-sm text-text-secondary font-caption\">\n              Click \"Preview Carousel\" to see slides in action\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Modal */}\n      {showCreateModal && (\n        <Modal title=\"Create Slide\" onClose={() => setShowCreateModal(false)} onSubmit={submitCreate} submitText=\"Create\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={createForm.title} onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })} required />\n              {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Subtitle</label>\n              <Input value={createForm.subtitle} onChange={(e) => setCreateForm({ ...createForm, subtitle: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Background Image\"\n                value={createForm.backgroundImage}\n                onChange={(url) => setCreateForm({ ...createForm, backgroundImage: url })}\n                bucket=\"media\"\n                pathPrefix=\"slides\"\n                accept=\"image\"\n                helperText=\"Upload a background image for this slide.\"\n              />\n              {formErrors.backgroundImage && <p className=\"mt-1 text-xs text-error\">{formErrors.backgroundImage}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">CTA Text</label>\n              <Input value={createForm.ctaText} onChange={(e) => setCreateForm({ ...createForm, ctaText: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">CTA Link</label>\n              <Input value={createForm.ctaLink} onChange={(e) => setCreateForm({ ...createForm, ctaLink: e.target.value })} />\n              {formErrors.ctaLink && <p className=\"mt-1 text-xs text-error\">{formErrors.ctaLink}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Duration (seconds)</label>\n              <Input type=\"number\" min=\"1\" value={createForm.duration} onChange={(e) => setCreateForm({ ...createForm, duration: Number(e.target.value) || 5 })} />\n              {formErrors.duration && <p className=\"mt-1 text-xs text-error\">{formErrors.duration}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={createForm.status} onChange={(e) => setCreateForm({ ...createForm, status: e.target.value })}>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Order</label>\n              <Input type=\"number\" min=\"1\" value={createForm.order} onChange={(e) => setCreateForm({ ...createForm, order: Number(e.target.value) || 1 })} />\n              {formErrors.order && <p className=\"mt-1 text-xs text-error\">{formErrors.order}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {/* Edit Modal */}\n      {editingSlide && (\n        <Modal title=\"Edit Slide\" onClose={() => setEditingSlide(null)} onSubmit={submitEdit} submitText=\"Update\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Title</label>\n              <Input value={editForm.title} onChange={(e) => setEditForm({ ...editForm, title: e.target.value })} required />\n              {formErrors.title && <p className=\"mt-1 text-xs text-error\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Subtitle</label>\n              <Input value={editForm.subtitle} onChange={(e) => setEditForm({ ...editForm, subtitle: e.target.value })} />\n            </div>\n            <div className=\"md:col-span-2\">\n              <FileUpload\n                label=\"Background Image\"\n                value={editForm.backgroundImage}\n                onChange={(url) => setEditForm({ ...editForm, backgroundImage: url })}\n                bucket=\"media\"\n                pathPrefix=\"slides\"\n                accept=\"image\"\n                helperText=\"Upload a background image for this slide.\"\n              />\n              {formErrors.backgroundImage && <p className=\"mt-1 text-xs text-error\">{formErrors.backgroundImage}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">CTA Text</label>\n              <Input value={editForm.ctaText} onChange={(e) => setEditForm({ ...editForm, ctaText: e.target.value })} />\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">CTA Link</label>\n              <Input value={editForm.ctaLink} onChange={(e) => setEditForm({ ...editForm, ctaLink: e.target.value })} />\n              {formErrors.ctaLink && <p className=\"mt-1 text-xs text-error\">{formErrors.ctaLink}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Duration (seconds)</label>\n              <Input type=\"number\" min=\"1\" value={editForm.duration} onChange={(e) => setEditForm({ ...editForm, duration: Number(e.target.value) || 5 })} />\n              {formErrors.duration && <p className=\"mt-1 text-xs text-error\">{formErrors.duration}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Status</label>\n              <select className=\"w-full bg-surface border border-border-accent/20 rounded-lg px-3 py-2 text-sm\" value={editForm.status} onChange={(e) => setEditForm({ ...editForm, status: e.target.value })}>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm text-text-secondary mb-1\">Order</label>\n              <Input type=\"number\" min=\"1\" value={editForm.order} onChange={(e) => setEditForm({ ...editForm, order: Number(e.target.value) || 1 })} />\n              {formErrors.order && <p className=\"mt-1 text-xs text-error\">{formErrors.order}</p>}\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default SlidesManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/admin-dashboard-content-management/index.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadModeration'. Either include it or remove the dependency array.",
        "line": 209,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 209,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadModeration]",
            "fix": { "range": [6442, 6444], "text": "[loadModeration]" }
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadPublisherRequests'. Either include it or remove the dependency array.",
        "line": 42,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 42,
        "endColumn": 31,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadPublisherRequests, publisherProgramEnabled]",
            "fix": {
              "range": [1979, 2004],
              "text": "[loadPublisherRequests, publisherProgramEnabled]"
            }
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loadPublisherRequests stable enough"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect, useState, useCallback } from \"react\";\nimport projectService from \"../../utils/projectService\";\nimport blogService from \"../../utils/blogService\";\nimport slideService from \"../../utils/slideService\";\nimport settingsService from \"../../utils/settingsService\";\nimport publisherProgramService from \"../../utils/publisherProgramService\";\nimport useFeature from \"../../hooks/useFeature\";\nimport { useToast } from \"../../contexts/ToastContext\";\n\nconst AdminDashboardContentManagement = () => {\n  const { show } = useToast();\n  const [activeSection, setActiveSection] = useState(\"overview\");\n  const [isAuthenticated, setIsAuthenticated] = useState(true);\n  const [projects, setProjects] = useState([]);\n  const [blogPosts, setBlogPosts] = useState([]);\n  const [slides, setSlides] = useState([]);\n  const [moderationComments, setModerationComments] = useState([]);\n  const [moderationLoading, setModerationLoading] = useState(false);\n  const [settings, setSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [blogEditorState, setBlogEditorState] = useState({\n    open: false,\n    mode: \"create\",\n    post: null,\n  });\n  const publisherProgramEnabled = useFeature(\"publisher_program\");\n  const [publisherRequests, setPublisherRequests] = useState([]);\n  const [publisherReqLoading, setPublisherReqLoading] = useState(false);\n  const [publisherReqActionIds, setPublisherReqActionIds] = useState([]); // ids currently being processed\n\n  const loadPublisherRequests = async () => {\n    if (!publisherProgramEnabled) return;\n    setPublisherReqLoading(true);\n    const res = await publisherProgramService.listPending();\n    if (res.success) setPublisherRequests(res.data);\n    setPublisherReqLoading(false);\n  };\n  useEffect(() => {\n    if (publisherProgramEnabled) loadPublisherRequests();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- loadPublisherRequests stable enough\n  }, [publisherProgramEnabled]);\n\n  const handlePublisherDecision = async (user_id, action) => {\n    const fn =\n      action === \"approve\"\n        ? publisherProgramService.approve\n        : publisherProgramService.reject;\n    setPublisherReqActionIds((ids) => [...ids, user_id]);\n    // Optimistic removal\n    setPublisherRequests((prev) => prev.filter((p) => p.id !== user_id));\n    const res = await fn(user_id);\n    if (res.success) {\n      show(`User ${action}d`, { type: \"success\" });\n    } else {\n      show(res.error || \"Action failed\", { type: \"error\" });\n      // Revert on failure: re-fetch list\n      await loadPublisherRequests();\n    }\n    setPublisherReqActionIds((ids) => ids.filter((id) => id !== user_id));\n  };\n\n  // Helper mappers (UI shape -> DB shape)\n  const toDbProject = (data = {}) => {\n    const { image, date: _date, ...rest } = data || {}; // _date ignored\n    return {\n      ...rest,\n      featured_image: image,\n      // created_at is managed by DB; ignore date from UI\n    };\n  };\n\n  const toDbPost = (data = {}) => {\n    const {\n      featuredImage,\n      publishDate,\n      readTime,\n      slug,\n      featured,\n      metaTitle,\n      metaDescription,\n      publishedAt,\n      ...rest\n    } = data || {};\n    return {\n      ...rest,\n      featured_image: featuredImage,\n      published_at: publishedAt ?? publishDate,\n      read_time: readTime,\n      slug,\n      featured,\n      meta_title: metaTitle,\n      meta_description: metaDescription,\n    };\n  };\n\n  const toDbSlide = (data = {}) => {\n    const {\n      backgroundImage,\n      ctaText,\n      ctaLink,\n      order,\n      views: _views,\n      status,\n      ...rest\n    } = data || {};\n    return {\n      ...rest,\n      background_image: backgroundImage,\n      cta_text: ctaText,\n      cta_link: ctaLink,\n      display_order: order,\n      // Map UI status to DB content_status\n      status:\n        status === \"active\"\n          ? \"published\"\n          : status === \"inactive\"\n            ? \"draft\"\n            : status,\n    };\n  };\n\n  // Mock data for dashboard\n  const mockStats = {\n    projects: projects.length,\n    blogPosts: blogPosts.length,\n    slides: slides.length,\n    totalViews: 0,\n  };\n\n  const mockAnalytics = {\n    visitorData: [\n      { date: \"2024-01-01\", visitors: 120 },\n      { date: \"2024-01-02\", visitors: 150 },\n      { date: \"2024-01-03\", visitors: 180 },\n      { date: \"2024-01-04\", visitors: 200 },\n      { date: \"2024-01-05\", visitors: 170 },\n      { date: \"2024-01-06\", visitors: 220 },\n      { date: \"2024-01-07\", visitors: 250 },\n    ],\n    contentData: [\n      { type: \"Projects\", views: 8500 },\n      { type: \"Blog\", views: 12000 },\n      { type: \"About\", views: 4200 },\n    ],\n    recentActivity: [\n      {\n        type: \"create\",\n        action: 'Created new blog post \"Advanced React Patterns\"',\n        timestamp: \"2 hours ago\",\n      },\n      {\n        type: \"update\",\n        action: 'Updated project \"E-commerce Platform\"',\n        timestamp: \"4 hours ago\",\n      },\n      {\n        type: \"create\",\n        action: 'Added new hero slide \"Innovation Showcase\"',\n        timestamp: \"1 day ago\",\n      },\n      {\n        type: \"update\",\n        action: \"Modified site settings\",\n        timestamp: \"2 days ago\",\n      },\n      {\n        type: \"delete\",\n        action: 'Removed outdated project \"Legacy App\"',\n        timestamp: \"3 days ago\",\n      },\n    ],\n    popularContent: [\n      { name: \"Projects\", value: 45 },\n      { name: \"Blog Posts\", value: 35 },\n      { name: \"About Page\", value: 20 },\n    ],\n  };\n\n  // Load data\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const [proj, posts, sld, stg] = await Promise.all([\n          projectService.getAllProjects(),\n          blogService.getAllPosts(),\n          slideService.getAllSlides(),\n          settingsService.getSettings(),\n        ]);\n        if (!mounted) return;\n        if (proj.success) setProjects(proj.data);\n        if (posts.success) setBlogPosts(posts.data);\n        if (sld.success) setSlides(sld.data);\n        if (stg.success) setSettings(stg.data);\n        // Load moderation comments (approved for now; future: pending only if workflow changes)\n        loadModeration();\n      } catch {\n        if (mounted) setError(\"Failed to load admin data\");\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const [moderationFilter, setModerationFilter] = useState(\"pending\");\n\n  const loadModeration = useCallback(async () => {\n    try {\n      setModerationLoading(true);\n      const base = import.meta.env.VITE_API_BASE_URL || \"/api\";\n      const res = await fetch(\n        base + \"/comments/moderate?status=\" + moderationFilter,\n      );\n      if (res.ok) {\n        const data = await res.json();\n        setModerationComments(data);\n      }\n    } catch {\n      // ignore\n    } finally {\n      setModerationLoading(false);\n    }\n  }, [moderationFilter]);\n\n  useEffect(() => {\n    // Load moderation whenever filter changes (initial + subsequent)\n    loadModeration();\n  }, [loadModeration]);\n\n  const handleModerationApproveToggle = async (id, next) => {\n    try {\n      const base = import.meta.env.VITE_API_BASE_URL || \"/api\";\n      const res = await fetch(base + \"/comments/moderate?id=\" + id, {\n        method: \"PUT\",\n        headers: { \"content-type\": \"application/json\" },\n        body: JSON.stringify({ is_approved: next }),\n      });\n      if (res.ok) {\n        setModerationComments((prev) =>\n          prev.map((c) => (c.id === id ? { ...c, is_approved: next } : c)),\n        );\n        show(next ? \"Comment approved\" : \"Comment unapproved\", {\n          type: \"success\",\n        });\n      } else {\n        show(\"Failed to update comment\", { type: \"error\" });\n      }\n    } catch {\n      show(\"Error updating comment\", { type: \"error\" });\n    }\n  };\n\n  const handleModerationDelete = async (id) => {\n    try {\n      const base = import.meta.env.VITE_API_BASE_URL || \"/api\";\n      const res = await fetch(base + \"/comments/moderate?id=\" + id, {\n        method: \"DELETE\",\n      });\n      if (res.ok) {\n        setModerationComments((prev) => prev.filter((c) => c.id !== id));\n        show(\"Comment deleted\", { type: \"success\" });\n      } else {\n        show(\"Failed to delete comment\", { type: \"error\" });\n      }\n    } catch {\n      show(\"Error deleting comment\", { type: \"error\" });\n    }\n  };\n\n  const normalizedPosts = blogPosts.map((p) => ({\n    id: p.id,\n    title: p.title,\n    excerpt: p.excerpt,\n    content: p.content,\n    category: p.category,\n    featuredImage: p.featured_image,\n    tags: p.tags || [],\n    status: p.status,\n    publishDate: p.published_at,\n    publishedAt: p.published_at,\n    readTime: p.read_time,\n    views: p.view_count,\n    comments: p.comment_count,\n    likes: p.like_count,\n    slug: p.slug,\n    featured: p.featured,\n    metaTitle: p.meta_title,\n    metaDescription: p.meta_description,\n    authorRole: p.author_role || p.author?.role || \"viewer\",\n    authorName: p.author?.full_name || \"\",\n    authorEmail: p.author?.email || \"\",\n  }));\n\n  const reviewQueuePosts = normalizedPosts.filter(\n    (p) => p.status === \"draft\" && p.authorRole === \"publisher\",\n  );\n\n  // ADMIN_EMAIL removed (unused)\n\n  const normalizedSlides = slides.map((s) => ({\n    id: s.id,\n    title: s.title,\n    subtitle: s.subtitle,\n    backgroundImage: s.background_image,\n    ctaText: s.cta_text,\n    ctaLink: s.cta_link,\n    duration: s.duration,\n    order: s.display_order,\n    status: s.status === \"published\" ? \"active\" : \"inactive\",\n    views: s.view_count,\n  }));\n\n  const normalizedSettings = settings && {\n    siteTitle: settings.site_title,\n    siteTagline: settings.site_tagline,\n    siteDescription: settings.site_description,\n    contactEmail: settings.contact_email,\n    adminEmail: settings.admin_email,\n    enableVideo: settings.enable_video,\n    defaultTheme: settings.default_theme,\n    defaultFontSize: settings.default_font_size,\n    logoUrl: settings.logo_url,\n    faviconUrl: settings.favicon_url,\n    socialMedia: settings.social_media,\n    seo: settings.seo_settings,\n    maintenanceMode: settings.maintenance_mode,\n    customCSS: settings.custom_css,\n    customJS: settings.custom_js,\n    ui: settings.ui_settings || {},\n    ads: settings.ads_settings || {\n      enabled: false,\n      provider: \"adsense\",\n      publisher_id: null,\n      auto_ads: true,\n      grid_interval: 6,\n      ad_slot: null,\n    },\n  };\n\n  const defaultUiSettings = {\n    siteTitle: \"WisdomInTech\",\n    siteTagline: \"Neo-Cyberpunk Experience\",\n    siteDescription: \"\",\n    contactEmail: \"\",\n    adminEmail: \"\",\n    enableVideo: true,\n    defaultTheme: \"cyberpunk\",\n    defaultFontSize: \"medium\",\n    logoUrl: \"\",\n    faviconUrl: \"\",\n    socialMedia: { twitter: \"\", linkedin: \"\", github: \"\", email: \"\" },\n    seo: { keywords: \"\", ogImage: \"\", googleAnalytics: \"\", searchConsole: \"\" },\n    maintenanceMode: false,\n    customCSS: \"\",\n    customJS: \"\",\n    ui: { toast_duration_ms: 3500 },\n    ads: {\n      enabled: false,\n      provider: \"adsense\",\n      publisher_id: \"\",\n      auto_ads: true,\n      grid_interval: 6,\n      ad_slot: \"\",\n    },\n  };\n\n  const handleSectionChange = (section, _action = null) => {\n    setActiveSection(section);\n    // _action reserved for future contextual behaviors (create/edit); currently no-op\n  };\n\n  const handleAuthToggle = () => {\n    setIsAuthenticated(!isAuthenticated);\n  };\n\n  const handleProjectUpdate = async (projectId, updatedData) => {\n    const res = await projectService.updateProject(\n      projectId,\n      toDbProject(updatedData),\n    );\n    if (res.success) {\n      setProjects((prev) =>\n        prev.map((p) => (p.id === projectId ? res.data : p)),\n      );\n      show(\"Project updated successfully\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to update project\", { type: \"error\" });\n    }\n  };\n\n  const handleProjectDelete = async (projectId) => {\n    const res = await projectService.deleteProject(projectId);\n    if (res.success) {\n      setProjects((prev) => prev.filter((p) => p.id !== projectId));\n      show(\"Project deleted\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to delete project\", { type: \"error\" });\n    }\n  };\n\n  const handleProjectCreate = async (projectData) => {\n    const res = await projectService.createProject(toDbProject(projectData));\n    if (res.success) {\n      setProjects((prev) => [res.data, ...prev]);\n      show(\"Project created\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to create project\", { type: \"error\" });\n    }\n  };\n\n  const handlePostUpdate = async (postId, updatedData) => {\n    const res = await blogService.updatePost(postId, toDbPost(updatedData));\n    if (res.success) {\n      setBlogPosts((prev) => prev.map((b) => (b.id === postId ? res.data : b)));\n      show(\"Post updated\", { type: \"success\" });\n      setBlogEditorState({ open: false, mode: \"create\", post: null });\n    } else {\n      show(res.error || \"Failed to update post\", { type: \"error\" });\n    }\n  };\n\n  const handlePostDelete = async (postId) => {\n    const res = await blogService.deletePost(postId);\n    if (res.success) {\n      setBlogPosts((prev) => prev.filter((b) => b.id !== postId));\n      show(\"Post deleted\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to delete post\", { type: \"error\" });\n    }\n  };\n\n  const handlePostCreate = async (postData) => {\n    const res = await blogService.createPost(toDbPost(postData));\n    if (res.success) {\n      setBlogPosts((prev) => [res.data, ...prev]);\n      show(\"Post created\", { type: \"success\" });\n      setBlogEditorState({ open: false, mode: \"create\", post: null });\n    } else {\n      show(res.error || \"Failed to create post\", { type: \"error\" });\n    }\n  };\n\n  const handleSlideUpdate = async (slideId, updatedData) => {\n    const res = await slideService.updateSlide(slideId, toDbSlide(updatedData));\n    if (res.success) {\n      setSlides((prev) => prev.map((s) => (s.id === slideId ? res.data : s)));\n      show(\"Slide updated\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to update slide\", { type: \"error\" });\n    }\n  };\n\n  const handleSlideDelete = async (slideId) => {\n    const res = await slideService.deleteSlide(slideId);\n    if (res.success) {\n      setSlides((prev) => prev.filter((s) => s.id !== slideId));\n      show(\"Slide deleted\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to delete slide\", { type: \"error\" });\n    }\n  };\n\n  const handleSlideCreate = async (slideData) => {\n    const res = await slideService.createSlide(toDbSlide(slideData));\n    if (res.success) {\n      setSlides((prev) => [res.data, ...prev]);\n      show(\"Slide created\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to create slide\", { type: \"error\" });\n    }\n  };\n\n  const handleSlideReorder = async (slideId, newOrder) => {\n    // Fallback to existing single update if API batch not used environment\n    const base = import.meta.env.VITE_API_BASE_URL || \"/api\";\n    try {\n      // Build new ordering array client-side\n      const reordered = [...slides]\n        .map((s) => ({ ...s }))\n        .sort((a, b) => a.display_order - b.display_order);\n      const idx = reordered.findIndex((s) => s.id === slideId);\n      if (idx === -1) return;\n      const target = reordered.splice(idx, 1)[0];\n      // Clamp newOrder\n      const clamped = Math.max(1, Math.min(newOrder, reordered.length + 1));\n      reordered.splice(clamped - 1, 0, target);\n      // Reassign sequential orders\n      const payload = reordered.map((s, i) => ({\n        id: s.id,\n        display_order: i + 1,\n      }));\n      const token = (await import(\"../../utils/supabase.js\")).default.auth\n        .getSession\n        ? (\n            await (\n              await import(\"../../utils/supabase.js\")\n            ).default.auth.getSession()\n          ).data.session?.access_token\n        : null;\n      const headers = { \"content-type\": \"application/json\" };\n      if (token) headers.Authorization = `Bearer ${token}`;\n      const res = await fetch(base + \"/slides/reorder\", {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({ order: payload }),\n      });\n      if (res.ok) {\n        setSlides((prev) =>\n          payload.map((p) => {\n            const found = prev.find((s) => s.id === p.id);\n            return { ...found, display_order: p.display_order };\n          }),\n        );\n        show(\"Slides reordered\", { type: \"success\" });\n      } else {\n        show(\"Failed batch reorder; falling back\", { type: \"error\" });\n      }\n    } catch {\n      show(\"Reorder error\", { type: \"error\" });\n    }\n  };\n\n  const handleSettingsUpdate = async (updatedSettings) => {\n    const res = await settingsService.updateSettings({\n      site_title: updatedSettings.siteTitle,\n      site_tagline: updatedSettings.siteTagline,\n      site_description: updatedSettings.siteDescription,\n      contact_email: updatedSettings.contactEmail,\n      admin_email: updatedSettings.adminEmail,\n      enable_video: updatedSettings.enableVideo,\n      default_theme: updatedSettings.defaultTheme,\n      default_font_size: updatedSettings.defaultFontSize,\n      logo_url: updatedSettings.logoUrl,\n      favicon_url: updatedSettings.faviconUrl,\n      social_media: updatedSettings.socialMedia,\n      seo_settings: updatedSettings.seo,\n      maintenance_mode: updatedSettings.maintenanceMode,\n      custom_css: updatedSettings.customCSS,\n      custom_js: updatedSettings.customJS,\n      ui_settings: updatedSettings.ui,\n      ads_settings: updatedSettings.ads,\n    });\n    if (res.success) {\n      setSettings(res.data);\n      show(\"Settings updated\", { type: \"success\" });\n    } else {\n      show(res.error || \"Failed to update settings\", { type: \"error\" });\n    }\n  };\n\n  const renderMainContent = () => {\n    switch (activeSection) {\n      case \"overview\":\n        return (\n          <DashboardOverview stats={mockStats} analytics={mockAnalytics} />\n        );\n      case \"analytics\":\n        return <AnalyticsOverview />;\n      case \"projects\":\n        return (\n          <ProjectsManagement\n            projects={(projects || []).map((p) => ({\n              id: p.id,\n              title: p.title,\n              description: p.description,\n              image: p.featured_image || \"/assets/images/no_image.png\",\n              technologies: p.technologies || [],\n              status: p.status,\n              date: p.created_at,\n            }))}\n            onProjectUpdate={handleProjectUpdate}\n            onProjectDelete={handleProjectDelete}\n            onProjectCreate={handleProjectCreate}\n          />\n        );\n      case \"blog\":\n        return (\n          <div className=\"h-full flex flex-col\">\n            {!blogEditorState.open && (\n              <BlogManagement\n                blogPosts={normalizedPosts}\n                onPostUpdate={handlePostUpdate}\n                onPostDelete={handlePostDelete}\n                onPostCreate={handlePostCreate}\n                onOpenEditor={({ mode, post }) =>\n                  setBlogEditorState({\n                    open: true,\n                    mode: mode || \"create\",\n                    post: post || null,\n                  })\n                }\n              />\n            )}\n            {blogEditorState.open && (\n              <div className=\"flex-1 min-h-[60vh]\">\n                <BlogEditor\n                  mode={blogEditorState.mode}\n                  initialData={\n                    blogEditorState.mode === \"edit\" && blogEditorState.post\n                      ? blogEditorState.post\n                      : {}\n                  }\n                  onCancel={() =>\n                    setBlogEditorState({\n                      open: false,\n                      mode: \"create\",\n                      post: null,\n                    })\n                  }\n                  onSave={(data) =>\n                    blogEditorState.mode === \"edit\" && blogEditorState.post\n                      ? handlePostUpdate(blogEditorState.post.id, data)\n                      : handlePostCreate(data)\n                  }\n                />\n              </div>\n            )}\n          </div>\n        );\n      case \"slides\":\n        return (\n          <SlidesManagement\n            slides={normalizedSlides}\n            onSlideUpdate={handleSlideUpdate}\n            onSlideDelete={handleSlideDelete}\n            onSlideCreate={handleSlideCreate}\n            onSlideReorder={handleSlideReorder}\n          />\n        );\n      case \"moderation\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-text-primary\">\n                Comment Moderation\n              </h2>\n              <div className=\"flex items-center gap-2\">\n                <select\n                  value={moderationFilter}\n                  onChange={(e) => {\n                    setModerationFilter(e.target.value);\n                  }}\n                  className=\"bg-surface border border-border-accent/30 rounded px-2 py-1 text-sm\"\n                >\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"approved\">Approved</option>\n                  <option value=\"all\">All</option>\n                </select>\n                <button\n                  onClick={loadModeration}\n                  className=\"px-3 py-1 rounded bg-primary text-background text-sm hover:bg-primary/80\"\n                >\n                  Refresh\n                </button>\n              </div>\n            </div>\n            {moderationLoading && (\n              <div className=\"text-sm text-text-secondary\">\n                Loading comments…\n              </div>\n            )}\n            <div className=\"space-y-4\">\n              {moderationComments.map((c) => (\n                <div\n                  key={c.id}\n                  className=\"p-4 rounded-lg border border-border-accent/20 bg-surface/40\"\n                >\n                  <div className=\"flex justify-between gap-4\">\n                    <div>\n                      <div className=\"text-sm font-semibold text-text-primary\">\n                        {c.author_name}{\" \"}\n                        <span className=\"font-normal text-text-secondary\">\n                          &lt;{c.author_email || \"anonymous\"}&gt;\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-text-secondary mb-2\">\n                        {new Date(c.created_at).toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-text-primary whitespace-pre-wrap\">\n                        {c.content}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                      <button\n                        onClick={() =>\n                          handleModerationApproveToggle(c.id, !c.is_approved)\n                        }\n                        className={`px-2 py-1 text-xs rounded ${c.is_approved ? \"bg-warning text-background\" : \"bg-success text-background\"}`}\n                      >\n                        {c.is_approved ? \"Unapprove\" : \"Approve\"}\n                      </button>\n                      <button\n                        onClick={() => handleModerationDelete(c.id)}\n                        className=\"px-2 py-1 text-xs rounded bg-error text-background\"\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {!moderationLoading && moderationComments.length === 0 && (\n                <div className=\"text-sm text-text-secondary\">\n                  No comments available.\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      case \"review-queue\":\n        // Draft posts created by publishers awaiting admin review (simple filter)\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-text-primary\">\n                Review Queue\n              </h2>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={() => {\n                    // simple reload of posts\n                    (async () => {\n                      const posts = await blogService.getAllPosts();\n                      if (posts.success) setBlogPosts(posts.data);\n                    })();\n                  }}\n                  className=\"px-3 py-1 rounded bg-primary text-background text-sm hover:bg-primary/80\"\n                >\n                  Refresh\n                </button>\n              </div>\n            </div>\n            <div className=\"text-xs text-text-secondary\">\n              Draft posts authored by publishers. Publish or request changes.\n            </div>\n            <div className=\"grid gap-4 md:grid-cols-2 xl:grid-cols-3\">\n              {reviewQueuePosts.map((p) => (\n                <div\n                  key={p.id}\n                  className=\"p-4 rounded-lg border border-border-accent/20 bg-surface/40 flex flex-col gap-2\"\n                >\n                  <div className=\"flex justify-between items-start gap-3\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"text-sm font-semibold text-text-primary truncate\">\n                          {p.title || \"(Untitled)\"}\n                        </div>\n                        <RoleBadge role={p.authorRole} email={p.authorEmail} />\n                      </div>\n                      <div className=\"text-[10px] text-text-secondary uppercase tracking-wide mt-0.5\">\n                        Draft • {p.authorRole || \"unknown\"}\n                      </div>\n                    </div>\n                    <button\n                      onClick={() =>\n                        setBlogEditorState({\n                          open: true,\n                          mode: \"edit\",\n                          post: p,\n                        })\n                      }\n                      className=\"text-[10px] px-2 py-1 rounded bg-primary/10 text-primary hover:bg-primary/20\"\n                    >\n                      Open\n                    </button>\n                  </div>\n                  <div className=\"text-xs text-text-secondary line-clamp-3\">\n                    {p.excerpt || \"No excerpt provided.\"}\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    <button\n                      onClick={async () => {\n                        // Publish immediately\n                        const res = await blogService.updatePost(p.id, {\n                          status: \"published\",\n                        });\n                        if (res.success) {\n                          setBlogPosts((prev) =>\n                            prev.map((b) => (b.id === p.id ? res.data : b)),\n                          );\n                          show(\"Post published\", { type: \"success\" });\n                        } else {\n                          show(res.error || \"Failed to publish\", {\n                            type: \"error\",\n                          });\n                        }\n                      }}\n                      className=\"px-2 py-1 text-xs rounded bg-success text-background hover:bg-success/80\"\n                    >\n                      Publish\n                    </button>\n                    <button\n                      onClick={() => {\n                        // For now simple toast (future: inline feedback mechanism)\n                        show(\"Feedback workflow not implemented yet\", {\n                          type: \"info\",\n                        });\n                      }}\n                      className=\"px-2 py-1 text-xs rounded bg-warning text-background hover:bg-warning/80\"\n                    >\n                      Request Changes\n                    </button>\n                  </div>\n                </div>\n              ))}\n              {reviewQueuePosts.length === 0 && (\n                <div className=\"text-sm text-text-secondary col-span-full\">\n                  No publisher drafts pending review.\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      case \"publisher-requests\":\n        if (!publisherProgramEnabled) {\n          return (\n            <div className=\"text-sm text-text-secondary\">\n              Publisher program disabled.\n            </div>\n          );\n        }\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-text-primary\">\n                Publisher Requests\n              </h2>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={loadPublisherRequests}\n                  className=\"px-3 py-1 rounded bg-primary text-background text-sm hover:bg-primary/80\"\n                >\n                  Refresh\n                </button>\n              </div>\n            </div>\n            {publisherReqLoading && (\n              <div className=\"text-sm text-text-secondary\">\n                Loading requests…\n              </div>\n            )}\n            <div className=\"space-y-4\">\n              {publisherRequests.map((r) => (\n                <div\n                  key={r.id}\n                  className=\"p-4 rounded-lg border border-border-accent/20 bg-surface/40 flex justify-between gap-4 relative\"\n                >\n                  {publisherReqActionIds.includes(r.id) && (\n                    <div className=\"absolute inset-0 bg-background/60 backdrop-blur-[1px] flex items-center justify-center text-xs text-text-secondary\">\n                      Processing…\n                    </div>\n                  )}\n                  <div>\n                    <div className=\"text-sm font-semibold text-text-primary\">\n                      {r.full_name || \"(No Name)\"}{\" \"}\n                      <span className=\"font-normal text-text-secondary\">\n                        &lt;{r.email}&gt;\n                      </span>\n                    </div>\n                    <div className=\"text-xs text-text-secondary mb-2\">\n                      Requested{\" \"}\n                      {r.publisher_requested_at\n                        ? new Date(r.publisher_requested_at).toLocaleString()\n                        : \"—\"}\n                    </div>\n                    <div className=\"text-xs text-text-secondary\">\n                      Status: {r.publisher_request_status}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col gap-2 text-xs\">\n                    <button\n                      disabled={publisherReqActionIds.includes(r.id)}\n                      onClick={() => handlePublisherDecision(r.id, \"approve\")}\n                      className=\"px-2 py-1 rounded bg-success text-background hover:bg-success/80 disabled:opacity-50\"\n                    >\n                      Approve\n                    </button>\n                    <button\n                      disabled={publisherReqActionIds.includes(r.id)}\n                      onClick={() => handlePublisherDecision(r.id, \"reject\")}\n                      className=\"px-2 py-1 rounded bg-error text-background hover:bg-error/80 disabled:opacity-50\"\n                    >\n                      Reject\n                    </button>\n                  </div>\n                </div>\n              ))}\n              {!publisherReqLoading && publisherRequests.length === 0 && (\n                <div className=\"text-sm text-text-secondary\">\n                  No pending requests.\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      case \"settings\":\n        return (\n          <div className=\"space-y-8\">\n            <SiteSettings\n              settings={normalizedSettings || defaultUiSettings}\n              onSettingsUpdate={handleSettingsUpdate}\n            />\n            <BrandingHints\n              settings={settings || {}}\n              onOgImageChange={async (val) => {\n                const res = await settingsService.setOgImage(val);\n                if (res.success) {\n                  const refreshed = await settingsService.getSettings();\n                  if (refreshed.success) setSettings(refreshed.data);\n                }\n              }}\n            />\n          </div>\n        );\n      case \"tech\":\n        return (\n          <SiteSettings\n            settings={normalizedSettings || defaultUiSettings}\n            onSettingsUpdate={handleSettingsUpdate}\n          />\n        );\n      default:\n        return (\n          <DashboardOverview stats={mockStats} analytics={mockAnalytics} />\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {loading && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80\">\n          <div className=\"bg-surface border border-border-accent/20 rounded-lg px-6 py-4 shadow-glow-primary\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-3\"></div>\n            <div className=\"text-sm text-text-secondary\">\n              Loading admin data…\n            </div>\n          </div>\n        </div>\n      )}\n      {error && (\n        <div className=\"fixed top-4 left-1/2 -translate-x-1/2 z-50 bg-error text-background px-4 py-2 rounded shadow\">\n          {error}\n        </div>\n      )}\n      <HeaderNavigation\n        isAuthenticated={isAuthenticated}\n        onAuthToggle={handleAuthToggle}\n      />\n\n      <div className=\"pt-16 lg:pt-18\">\n        <div className=\"flex h-[calc(100vh-4rem)] lg:h-[calc(100vh-4.5rem)]\">\n          {/* Sidebar */}\n          <div className=\"hidden lg:block w-80 flex-shrink-0\">\n            <DashboardSidebar\n              activeSection={activeSection}\n              onSectionChange={handleSectionChange}\n              stats={mockStats}\n            />\n          </div>\n\n          {/* Mobile Sidebar - Collapsible */}\n          <div className=\"lg:hidden\">\n            {/* Mobile sidebar implementation would go here */}\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1 overflow-auto\">\n            <div className=\"p-6 lg:p-8 max-w-7xl mx-auto\">\n              {renderMainContent()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboardContentManagement;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/AdUnit.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useRef } from 'react';\nimport { ensureAdSenseLoaded, pushAd } from '../../../utils/adsense';\n\nconst AdUnit = ({ publisherId, slotId, layout = 'in-article', format = 'auto', className = '' }) => {\n  const insRef = useRef(null);\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      const ok = await ensureAdSenseLoaded(publisherId);\n      if (!mounted) return;\n      if (ok && insRef.current) {\n        // Allow a tick for DOM insertion\n        setTimeout(() => pushAd(), 0);\n      }\n    })();\n    return () => { mounted = false; };\n  }, [publisherId, slotId]);\n\n  if (!publisherId || !slotId) return null;\n\n  const client = publisherId.startsWith('ca-pub-') ? publisherId : `ca-pub-${publisherId}`;\n\n  return (\n    <div className={`bg-surface border border-border-accent/20 rounded-lg overflow-hidden ${className}`}>\n      <ins\n        className=\"adsbygoogle block\"\n        ref={insRef}\n        style={{ display: 'block' }}\n        data-ad-client={client}\n        data-ad-slot={slotId}\n        data-ad-format={format}\n        data-ad-layout={layout}\n        data-full-width-responsive=\"true\"\n      />\n    </div>\n  );\n};\n\nexport default AdUnit;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/BlogCard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 28], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [35, 45], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [28, 76], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [35, 45], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [83, 94], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [76, 126], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [83, 94], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [133, 145], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "fix": { "range": [126, 179], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [133, 145], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst BlogCard = ({ post, onLike, onShare, onPostClick, isAdmin, onEdit, onDelete }) => {\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown date';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const handleLike = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onLike?.(post.id);\n  };\n\n  const handleShare = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onShare?.(post);\n  };\n\n  const handleEdit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onEdit?.(post);\n  };\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete?.(post.id);\n  };\n\n  const handleCardClick = () => {\n    onPostClick?.(post);\n  };\n\n  // Prepare display data with fallbacks\n  const displayData = {\n    title: post?.title || 'Untitled Post',\n    excerpt: post?.excerpt || 'No excerpt available',\n    category: post?.category || 'Uncategorized',\n    tags: post?.tags || [],\n    featuredImage: post?.featured_image || post?.featuredImage,\n    publishDate: post?.published_at || post?.publishDate || post?.created_at,\n    author: post?.author?.full_name || post?.author || 'Unknown Author',\n    readTime: post?.read_time || 5,\n    likes: post?.like_count || 0,\n    comments: post?.comment_count || 0,\n    views: post?.view_count || 0,\n    status: post?.status || 'draft'\n  };\n\n  return (\n    <article \n      className=\"group relative bg-surface border border-border-accent/20 rounded-lg overflow-hidden hover:border-primary/40 transition-all duration-normal hover-glow-primary cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      {/* Featured Image */}\n      <div className=\"relative h-48 overflow-hidden\">\n        <Image\n          src={displayData.featuredImage}\n          alt={displayData.title}\n          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-slow\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-transparent\"></div>\n        \n        {/* Category Badge */}\n        <div className=\"absolute top-3 left-3\">\n          <span className=\"px-2 py-1 bg-primary/20 text-primary text-xs font-caption rounded-md backdrop-blur-sm\">\n            {displayData.category}\n          </span>\n        </div>\n\n        {/* Status Badge (Admin only) */}\n        {isAdmin && displayData.status !== 'published' && (\n          <div className=\"absolute top-3 left-3 mt-8\">\n            <span className={`px-2 py-1 text-xs font-caption rounded-md backdrop-blur-sm ${\n              displayData.status === 'draft' ?'bg-yellow-500/20 text-yellow-400' :'bg-gray-500/20 text-gray-400'\n            }`}>\n              {displayData.status}\n            </span>\n          </div>\n        )}\n\n        {/* Admin Controls */}\n        {isAdmin && (\n          <div className=\"absolute top-3 right-3 flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-fast\">\n            <Button\n              variant=\"ghost\"\n              size=\"xs\"\n              iconName=\"Edit\"\n              onClick={handleEdit}\n              className=\"bg-background/80 backdrop-blur-sm hover:bg-primary/20\"\n              title=\"Edit post\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"xs\"\n              iconName=\"Trash2\"\n              onClick={handleDelete}\n              className=\"bg-background/80 backdrop-blur-sm hover:bg-error/20 text-error\"\n              title=\"Delete post\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6\">\n        {/* Title */}\n        <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3 line-clamp-2 group-hover:text-primary transition-colors duration-fast\">\n          {displayData.title}\n        </h3>\n\n        {/* Excerpt */}\n        <p className=\"text-text-secondary text-sm mb-4 line-clamp-3 leading-relaxed\">\n          {displayData.excerpt}\n        </p>\n\n        {/* Meta Information */}\n        <div className=\"flex items-center justify-between text-xs text-text-secondary font-caption mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"Calendar\" size={14} />\n              <span>{formatDate(displayData.publishDate)}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"User\" size={14} />\n              <span>{displayData.author}</span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Icon name=\"Clock\" size={14} />\n            <span>{displayData.readTime} min read</span>\n          </div>\n        </div>\n\n        {/* Tags */}\n        <div className=\"flex flex-wrap gap-1 mb-4\">\n          {displayData.tags?.slice(0, 3).map((tag, index) => (\n            <span\n              key={index}\n              className=\"px-2 py-1 bg-accent/10 text-accent text-xs rounded-md\"\n            >\n              #{tag}\n            </span>\n          ))}\n          {displayData.tags?.length > 3 && (\n            <span className=\"px-2 py-1 bg-text-secondary/10 text-text-secondary text-xs rounded-md\">\n              +{displayData.tags.length - 3}\n            </span>\n          )}\n        </div>\n\n        {/* Engagement Stats & Actions */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-border-accent/20\">\n          <div className=\"flex items-center space-x-4 text-xs text-text-secondary\">\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"Heart\" size={14} />\n              <span>{displayData.likes}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"MessageCircle\" size={14} />\n              <span>{displayData.comments}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"Eye\" size={14} />\n              <span>{displayData.views}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"xs\"\n              iconName=\"Heart\"\n              onClick={handleLike}\n              className=\"text-text-secondary hover:text-error transition-colors duration-fast\"\n              title=\"Like post\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"xs\"\n              iconName=\"Share2\"\n              onClick={handleShare}\n              className=\"text-text-secondary hover:text-primary transition-colors duration-fast\"\n              title=\"Share post\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Hover Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-primary/5 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-fast pointer-events-none\"></div>\n    </article>\n  );\n};\n\nexport default BlogCard;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/BlogGrid.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BlogCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogCard" },
            "fix": { "range": [34, 48], "text": "" },
            "desc": "Remove unused variable 'BlogCard'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BlogCard' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [27, 62], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogCard" },
            "fix": { "range": [34, 48], "text": "" },
            "desc": "Remove unused variable 'BlogCard'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [69, 79], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [62, 110], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [69, 79], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'AdUnit' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AdUnit" },
            "fix": { "range": [117, 129], "text": "" },
            "desc": "Remove unused variable 'AdUnit'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'AdUnit' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [110, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AdUnit" },
            "fix": { "range": [117, 129], "text": "" },
            "desc": "Remove unused variable 'AdUnit'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'CustomAdUnit' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CustomAdUnit" },
            "fix": { "range": [148, 166], "text": "" },
            "desc": "Remove unused variable 'CustomAdUnit'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'CustomAdUnit' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 20,
        "fix": { "range": [141, 185], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "CustomAdUnit" },
            "fix": { "range": [148, 166], "text": "" },
            "desc": "Remove unused variable 'CustomAdUnit'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "import React from 'react';\nimport BlogCard from './BlogCard';\nimport Icon from '../../../components/AppIcon';\nimport AdUnit from './AdUnit';\nimport CustomAdUnit from './CustomAdUnit';\n\nconst BlogGrid = ({ posts, onLike, onShare, onPostClick, isAdmin, onEdit, onDelete, loading, adsConfig }) => {\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        {[...Array(6)].map((_, index) => (\n          <div \n            key={index} \n            className=\"bg-surface border border-border-accent/20 rounded-lg overflow-hidden animate-pulse\"\n          >\n            <div className=\"h-48 bg-border-accent/20\"></div>\n            <div className=\"p-6\">\n              <div className=\"h-4 bg-border-accent/20 rounded mb-3\"></div>\n              <div className=\"h-4 bg-border-accent/20 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-3 bg-border-accent/20 rounded w-1/2 mb-4\"></div>\n              <div className=\"flex space-x-2 mb-4\">\n                <div className=\"h-6 bg-border-accent/20 rounded w-16\"></div>\n                <div className=\"h-6 bg-border-accent/20 rounded w-20\"></div>\n              </div>\n              <div className=\"flex justify-between\">\n                <div className=\"flex space-x-4\">\n                  <div className=\"h-4 bg-border-accent/20 rounded w-8\"></div>\n                  <div className=\"h-4 bg-border-accent/20 rounded w-8\"></div>\n                  <div className=\"h-4 bg-border-accent/20 rounded w-8\"></div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <div className=\"h-6 bg-border-accent/20 rounded w-6\"></div>\n                  <div className=\"h-6 bg-border-accent/20 rounded w-6\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!posts || posts.length === 0) {\n    return (\n      <div className=\"text-center py-16\">\n        <Icon name=\"FileText\" size={48} className=\"mx-auto mb-4 text-text-secondary\" />\n        <h3 className=\"font-heading font-semibold text-xl text-text-primary mb-2\">\n          No blog posts found\n        </h3>\n        <p className=\"text-text-secondary\">\n          There are no blog posts to display at the moment.\n        </p>\n      </div>\n    );\n  }\n\n  const provider = adsConfig?.provider || 'adsense';\n  const showManualAds = adsConfig?.enabled && (\n    (provider === 'adsense' && adsConfig?.publisher_id && adsConfig?.ad_slot) ||\n    (provider === 'yllix' && (adsConfig?.yllix_unit_code || adsConfig?.custom_ad_html)) ||\n    (provider === 'custom' && (adsConfig?.custom_script_url || adsConfig?.custom_ad_html))\n  );\n  const interval = Math.max(1, Number(adsConfig?.grid_interval) || 6);\n\n  const items = [];\n  posts.forEach((post, idx) => {\n    items.push(\n      <BlogCard\n        key={post.id}\n        post={post}\n        onLike={onLike}\n        onShare={onShare}\n        onPostClick={onPostClick}\n        isAdmin={isAdmin}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    );\n\n    if (showManualAds && (idx + 1) % interval === 0) {\n      if (provider === 'adsense') {\n        items.push(\n          <AdUnit\n            key={`ad-${post.id}-${idx}`}\n            publisherId={adsConfig.publisher_id}\n            slotId={adsConfig.ad_slot}\n            className=\"col-span-1 md:col-span-2 lg:col-span-3\"\n          />\n        );\n      } else if (provider === 'yllix') {\n        items.push(\n          <CustomAdUnit\n            key={`ad-${post.id}-${idx}`}\n            scriptUrl={adsConfig.yllix_script_url}\n            html={adsConfig.yllix_unit_code}\n            className=\"col-span-1 md:col-span-2 lg:col-span-3\"\n          />\n        );\n      } else if (provider === 'custom') {\n        items.push(\n          <CustomAdUnit\n            key={`ad-${post.id}-${idx}`}\n            scriptUrl={adsConfig.custom_script_url}\n            html={adsConfig.custom_ad_html}\n            className=\"col-span-1 md:col-span-2 lg:col-span-3\"\n          />\n        );\n      }\n    }\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n      {items}\n    </div>\n  );\n};\n\nexport default BlogGrid;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/BlogModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [52, 90], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [52, 91], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [52, 90], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [155, 165], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "fix": { "range": [148, 196], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [155, 165], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [203, 215], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "fix": { "range": [196, 248], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [203, 215], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [255, 266], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13,
        "fix": { "range": [248, 298], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [255, 266], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [305, 316], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "fix": { "range": [298, 348], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [305, 316], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",
        "line": 66,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 66,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadComments, post]",
            "fix": { "range": [2293, 2299], "text": "[loadComments, post]" }
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 79,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 79,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2584, 2631], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 107,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 107,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3212, 3255], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 149,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 149,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [4359, 4438], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 151,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 151,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [4474, 4528], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 154,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 154,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [4583, 4631], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 160,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 160,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4726, 4771], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 197,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 197,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5658, 5701], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 227,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 227,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6534, 6587], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 237,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 237,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 22,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Image from '../../../components/AppImage';\nimport commentService from '../../../utils/commentService';\nimport newsletterService from '../../../utils/newsletterService';\n\n// Environment configuration (Vite)\nconst SITE_URL = (typeof import.meta !== 'undefined' && import.meta?.env?.VITE_SITE_URL) || 'https://mkraft.tech';\nconst TWITTER_HANDLE = (typeof import.meta !== 'undefined' && import.meta?.env?.VITE_TWITTER_HANDLE) || '@mikael_kraft';\n\nconst BlogModal = ({ isOpen, onClose, post, onSave, isAdmin }) => {\n  const { user, userProfile } = useAuth();\n  const [formData, setFormData] = useState({\n    title: '',\n    excerpt: '',\n    content: '',\n    category: '',\n    tags: '',\n    featured_image: '',\n    status: 'draft',\n    meta_title: '',\n    meta_description: ''\n  });\n\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState({\n    author_name: '',\n    author_email: '',\n    content: ''\n  });\n  const [replyTo, setReplyTo] = useState(null);\n  const [replyData, setReplyData] = useState({\n    author_name: '',\n    author_email: '',\n    content: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [commentLoading, setCommentLoading] = useState(false);\n  const [newsletterSignup, setNewsletterSignup] = useState(false);\n\n  useEffect(() => {\n    if (post) {\n      setFormData({\n        title: post.title || '',\n        excerpt: post.excerpt || '',\n        content: post.content || '',\n        category: post.category || '',\n        tags: Array.isArray(post.tags) ? post.tags.join(', ') : (post.tags || ''),\n        featured_image: post.featured_image || post.featuredImage || '',\n        status: post.status || 'draft',\n        meta_title: post.meta_title || '',\n        meta_description: post.meta_description || ''\n      });\n\n      // Load comments if viewing a published post\n      if (post.id && post.status === 'published') {\n        loadComments();\n      } else {\n        setComments(post.comments || []);\n      }\n    }\n  }, [post]);\n\n  const loadComments = async () => {\n    if (!post?.id) return;\n\n    try {\n      setCommentLoading(true);\n      const result = await commentService.getComments(post.id);\n      \n      if (result.success) {\n        setComments(result.data || []);\n      }\n    } catch (error) {\n      console.log('Failed to load comments:', error);\n    } finally {\n      setCommentLoading(false);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      setLoading(true);\n\n      const updatedPost = {\n        ...post,\n        ...formData,\n        tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),\n        author_id: user?.id,\n        author: userProfile?.full_name || 'Admin'\n      };\n\n      await onSave(updatedPost);\n    } catch (error) {\n      console.log('Failed to save post:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!newComment.content.trim() || !newComment.author_name.trim()) {\n      return;\n    }\n\n    try {\n      setCommentLoading(true);\n\n      const commentData = {\n        blog_post_id: post.id,\n        author_name: newComment.author_name,\n        author_email: newComment.author_email,\n        content: newComment.content,\n        parent_comment_id: null\n      };\n\n      const result = await commentService.createComment(commentData);\n      \n      if (result.success) {\n        // Add comment to local state\n        setComments(prev => [result.data, ...prev]);\n        \n        // Reset form\n        setNewComment({\n          author_name: '',\n          author_email: '',\n          content: ''\n        });\n\n        // Handle newsletter signup\n        if (newsletterSignup && newComment.author_email) {\n          try {\n            const result = await newsletterService.subscribe(newComment.author_email, newComment.author_name);\n            if (result.success) {\n              console.log('Successfully subscribed to newsletter:', newComment.author_email);\n            } else {\n              console.log('Newsletter signup error:', result.error);\n            }\n          } catch (error) {\n            console.log('Newsletter signup failed:', error);\n          }\n        }\n        setNewsletterSignup(false);\n      }\n    } catch (error) {\n      console.log('Failed to add comment:', error);\n    } finally {\n      setCommentLoading(false);\n    }\n  };\n\n  const handleReplySubmit = async (parentCommentId) => {\n    if (!replyData.content.trim() || !replyData.author_name.trim()) {\n      return;\n    }\n\n    try {\n      setCommentLoading(true);\n\n      const commentData = {\n        blog_post_id: post.id,\n        parent_comment_id: parentCommentId,\n        author_name: replyData.author_name,\n        author_email: replyData.author_email,\n        content: replyData.content\n      };\n\n      const result = await commentService.createComment(commentData);\n      \n      if (result.success) {\n        // Reload comments to get updated structure\n        await loadComments();\n        \n        // Reset reply form\n        setReplyData({\n          author_name: '',\n          author_email: '',\n          content: ''\n        });\n        setReplyTo(null);\n      }\n    } catch (error) {\n      console.log('Failed to add reply:', error);\n    } finally {\n      setCommentLoading(false);\n    }\n  };\n\n  const handleCommentLike = async (commentId) => {\n    try {\n      // Get visitor IP for like tracking\n      const visitorIp = await getVisitorIp();\n      const userAgent = navigator.userAgent || '';\n\n      const result = await commentService.toggleLike(commentId, visitorIp, userAgent);\n      \n      if (result.success) {\n        // Update local comment state\n        setComments(prev => \n          prev.map(comment => \n            comment.id === commentId \n              ? { \n                  ...comment, \n                  like_count: result.liked \n                    ? (comment.like_count || 0) + 1 \n                    : Math.max((comment.like_count || 0) - 1, 0)\n                }\n              : comment\n          )\n        );\n      }\n    } catch (error) {\n      console.log('Failed to toggle comment like:', error);\n    }\n  };\n\n  // Get visitor IP helper function\n  const getVisitorIp = async () => {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip || 'unknown';\n    } catch (error) {\n      return `fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown date';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (!isOpen || !post) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        {!isAdmin && (\n          <Helmet>\n            <title>{formData.meta_title || post.title}</title>\n            <meta name=\"description\" content={formData.meta_description || post.excerpt || ''} />\n            <meta property=\"og:title\" content={formData.meta_title || post.title} />\n            <meta property=\"og:description\" content={formData.meta_description || post.excerpt || ''} />\n            <meta property=\"og:url\" content={`${SITE_URL}/blog/${post.slug}`} />\n            <link rel=\"canonical\" href={`${SITE_URL}/blog/${post.slug}`} />\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:site\" content={TWITTER_HANDLE} />\n            <meta name=\"twitter:creator\" content={TWITTER_HANDLE} />\n          </Helmet>\n        )}\n        {/* Backdrop */}\n        <div \n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm transition-opacity\"\n          onClick={onClose}\n        ></div>\n\n        {/* Modal */}\n        <div className=\"inline-block align-bottom bg-surface rounded-lg border border-border-accent/20 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border-accent/20\">\n            <h2 className=\"font-heading font-bold text-xl text-text-primary\">\n              {isAdmin ? (post.id ? 'Edit Blog Post' : 'Create Blog Post') : post.title}\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"X\"\n              onClick={onClose}\n              className=\"text-text-secondary hover:text-primary\"\n            />\n          </div>\n\n          {/* Content */}\n          <div className=\"max-h-[80vh] overflow-y-auto\">\n            {isAdmin ? (\n              /* Admin Edit Form */\n              <div className=\"p-6 space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                      Title *\n                    </label>\n                    <Input\n                      type=\"text\"\n                      name=\"title\"\n                      value={formData.title}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter post title\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                      Category\n                    </label>\n                    <Input\n                      type=\"text\"\n                      name=\"category\"\n                      value={formData.category}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter category\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                    Featured Image URL\n                  </label>\n                  <Input\n                    type=\"url\"\n                    name=\"featured_image\"\n                    value={formData.featured_image}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter image URL\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                    Excerpt *\n                  </label>\n                  <textarea\n                    name=\"excerpt\"\n                    value={formData.excerpt}\n                    onChange={handleInputChange}\n                    rows={3}\n                    className=\"w-full px-3 py-2 bg-background border border-border-accent/40 rounded-lg text-text-primary placeholder-text-secondary focus:border-primary/60 focus:outline-none resize-none\"\n                    placeholder=\"Enter post excerpt\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                    Content *\n                  </label>\n                  <textarea\n                    name=\"content\"\n                    value={formData.content}\n                    onChange={handleInputChange}\n                    rows={12}\n                    className=\"w-full px-3 py-2 bg-background border border-border-accent/40 rounded-lg text-text-primary placeholder-text-secondary focus:border-primary/60 focus:outline-none resize-none\"\n                    placeholder=\"Enter post content (supports markdown)\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                      Tags (comma-separated)\n                    </label>\n                    <Input\n                      type=\"text\"\n                      name=\"tags\"\n                      value={formData.tags}\n                      onChange={handleInputChange}\n                      placeholder=\"react, javascript, tutorial\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                      Status\n                    </label>\n                    <select\n                      name=\"status\"\n                      value={formData.status}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 bg-background border border-border-accent/40 rounded-lg text-text-primary focus:border-primary/60 focus:outline-none\"\n                    >\n                      <option value=\"draft\">Draft</option>\n                      <option value=\"published\">Published</option>\n                      <option value=\"archived\">Archived</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-border-accent/20\">\n                  <Button variant=\"ghost\" onClick={onClose} disabled={loading}>\n                    Cancel\n                  </Button>\n                  <Button \n                    variant=\"primary\" \n                    onClick={handleSave}\n                    disabled={loading || !formData.title.trim() || !formData.content.trim()}\n                    iconName={loading ? \"Loader2\" : \"Save\"}\n                    iconPosition=\"left\"\n                    className={loading ? \"animate-spin\" : \"\"}\n                  >\n                    {loading ? 'Saving...' : (post.id ? 'Update Post' : 'Create Post')}\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              /* Blog Post View */\n              <div className=\"p-6\">\n                {/* Featured Image */}\n                {formData.featured_image && (\n                  <div className=\"mb-6\">\n                    <Image\n                      src={formData.featured_image}\n                      alt={formData.title}\n                      className=\"w-full h-64 object-cover rounded-lg\"\n                    />\n                  </div>\n                )}\n\n                {/* Post Meta */}\n                <div className=\"flex items-center justify-between mb-6 text-sm text-text-secondary font-caption\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"Calendar\" size={16} />\n                      <span>{formatDate(post.published_at || post.created_at)}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"User\" size={16} />\n                      <span>{post.author?.full_name || post.author || 'Unknown Author'}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"Clock\" size={16} />\n                      <span>{post.read_time || 5} min read</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"Heart\" size={16} />\n                      <span>{post.like_count || 0}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"MessageCircle\" size={16} />\n                      <span>{comments.length}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Post Content */}\n                <div className=\"prose prose-invert max-w-none mb-8\">\n                  <div className=\"text-text-primary leading-relaxed whitespace-pre-wrap\">\n                    {formData.content}\n                  </div>\n                </div>\n\n                {/* Tags */}\n                {formData.tags && (\n                  <div className=\"flex flex-wrap gap-2 mb-8\">\n                    {formData.tags.split(',').map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-3 py-1 bg-accent/10 text-accent text-sm rounded-full\"\n                      >\n                        #{tag.trim()}\n                      </span>\n                    ))}\n                  </div>\n                )}\n\n                {/* Source Attribution */}\n                {post.source_url && (\n                  <div className=\"mb-8 p-4 bg-background/30 border border-border-accent/20 rounded-lg\">\n                    <div className=\"flex items-center space-x-2 text-sm text-text-secondary\">\n                      <Icon name=\"ExternalLink\" size={16} />\n                      <span>Source:</span>\n                      <a \n                        href={post.source_url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:text-secondary underline\"\n                      >\n                        {new URL(post.source_url).hostname}\n                      </a>\n                    </div>\n                  </div>\n                )}\n\n                {/* Comments Section - Only for published posts */}\n                {post.status === 'published' && (\n                  <div className=\"border-t border-border-accent/20 pt-8\">\n                    <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-6\">\n                      Comments ({comments.length})\n                    </h3>\n\n                    {/* Add Comment Form */}\n                    <form onSubmit={handleCommentSubmit} className=\"mb-8 p-4 bg-background/50 rounded-lg\">\n                      <h4 className=\"font-medium text-text-primary mb-4\">Leave a Comment</h4>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Your name *\"\n                          value={newComment.author_name}\n                          onChange={(e) => setNewComment(prev => ({ ...prev, author_name: e.target.value }))}\n                          required\n                        />\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Your email\"\n                          value={newComment.author_email}\n                          onChange={(e) => setNewComment(prev => ({ ...prev, author_email: e.target.value }))}\n                        />\n                      </div>\n\n                      <textarea\n                        value={newComment.content}\n                        onChange={(e) => setNewComment(prev => ({ ...prev, content: e.target.value }))}\n                        placeholder=\"Share your thoughts...\"\n                        rows={4}\n                        className=\"w-full px-3 py-2 bg-background border border-border-accent/40 rounded-lg text-text-primary placeholder-text-secondary focus:border-primary/60 focus:outline-none resize-none mb-4\"\n                        required\n                      />\n\n                      {/* Newsletter Signup Checkbox */}\n                      <div className=\"flex items-center space-x-2 mb-4\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"newsletter\"\n                          checked={newsletterSignup}\n                          onChange={(e) => setNewsletterSignup(e.target.checked)}\n                          className=\"rounded border-border-accent/40 text-primary focus:ring-primary\"\n                        />\n                        <label htmlFor=\"newsletter\" className=\"text-sm text-text-secondary\">\n                          Subscribe to our newsletter for updates\n                        </label>\n                      </div>\n\n                      <div className=\"flex justify-end\">\n                        <Button\n                          type=\"submit\"\n                          variant=\"primary\"\n                          disabled={commentLoading || !newComment.content.trim() || !newComment.author_name.trim()}\n                          iconName={commentLoading ? \"Loader2\" : \"Send\"}\n                          iconPosition=\"left\"\n                          className={commentLoading ? \"animate-spin\" : \"\"}\n                        >\n                          {commentLoading ? 'Posting...' : 'Post Comment'}\n                        </Button>\n                      </div>\n                    </form>\n\n                    {/* Comments List */}\n                    <div className=\"space-y-6\">\n                      {commentLoading ? (\n                        <div className=\"flex items-center justify-center py-8\">\n                          <Icon name=\"Loader2\" size={24} className=\"animate-spin text-primary\" />\n                          <span className=\"ml-2 text-text-secondary\">Loading comments...</span>\n                        </div>\n                      ) : comments.length > 0 ? (\n                        comments.map((comment) => (\n                          <div key={comment.id} className=\"bg-background/50 rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n                                  <Icon name=\"User\" size={16} className=\"text-primary\" />\n                                </div>\n                                <span className=\"font-medium text-text-primary text-sm\">\n                                  {comment.author_name}\n                                </span>\n                              </div>\n                              <span className=\"text-xs text-text-secondary font-caption\">\n                                {formatDate(comment.created_at)}\n                              </span>\n                            </div>\n                            \n                            <p className=\"text-text-primary text-sm mb-3 leading-relaxed\">\n                              {comment.content}\n                            </p>\n\n                            <div className=\"flex items-center space-x-4\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"xs\"\n                                iconName=\"Heart\"\n                                onClick={() => handleCommentLike(comment.id)}\n                                className=\"text-text-secondary hover:text-error\"\n                              >\n                                {comment.like_count || 0}\n                              </Button>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"xs\"\n                                iconName=\"Reply\"\n                                onClick={() => setReplyTo(comment.id)}\n                                className=\"text-text-secondary hover:text-primary\"\n                              >\n                                Reply\n                              </Button>\n                            </div>\n\n                            {/* Reply Form */}\n                            {replyTo === comment.id && (\n                              <div className=\"mt-4 ml-6 p-3 bg-surface/50 rounded-lg\">\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mb-3\">\n                                  <Input\n                                    type=\"text\"\n                                    placeholder=\"Your name *\"\n                                    value={replyData.author_name}\n                                    onChange={(e) => setReplyData(prev => ({ ...prev, author_name: e.target.value }))}\n                                    size=\"sm\"\n                                  />\n                                  <Input\n                                    type=\"email\"\n                                    placeholder=\"Your email\"\n                                    value={replyData.author_email}\n                                    onChange={(e) => setReplyData(prev => ({ ...prev, author_email: e.target.value }))}\n                                    size=\"sm\"\n                                  />\n                                </div>\n                                \n                                <textarea\n                                  value={replyData.content}\n                                  onChange={(e) => setReplyData(prev => ({ ...prev, content: e.target.value }))}\n                                  placeholder=\"Write a reply...\"\n                                  rows={3}\n                                  className=\"w-full px-3 py-2 bg-background border border-border-accent/40 rounded-lg text-text-primary placeholder-text-secondary focus:border-primary/60 focus:outline-none resize-none text-sm mb-3\"\n                                />\n                                \n                                <div className=\"flex justify-end space-x-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"xs\"\n                                    onClick={() => {\n                                      setReplyTo(null);\n                                      setReplyData({ author_name: '', author_email: '', content: '' });\n                                    }}\n                                  >\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    variant=\"primary\"\n                                    size=\"xs\"\n                                    onClick={() => handleReplySubmit(comment.id)}\n                                    disabled={commentLoading || !replyData.content.trim() || !replyData.author_name.trim()}\n                                  >\n                                    Reply\n                                  </Button>\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Replies */}\n                            {comment.replies?.map((reply) => (\n                              <div key={reply.id} className=\"ml-6 mt-4 bg-surface/50 rounded-lg p-3\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <div className=\"w-6 h-6 bg-secondary/20 rounded-full flex items-center justify-center\">\n                                      <Icon name=\"User\" size={12} className=\"text-secondary\" />\n                                    </div>\n                                    <span className=\"font-medium text-text-primary text-xs\">\n                                      {reply.author_name}\n                                    </span>\n                                  </div>\n                                  <span className=\"text-xs text-text-secondary font-caption\">\n                                    {formatDate(reply.created_at)}\n                                  </span>\n                                </div>\n                                <p className=\"text-text-primary text-xs leading-relaxed\">\n                                  {reply.content}\n                                </p>\n                              </div>\n                            ))}\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Icon name=\"MessageCircle\" size={32} className=\"mx-auto mb-2 text-text-secondary\" />\n                          <p className=\"text-text-secondary text-sm\">\n                            No comments yet. Be the first to share your thoughts!\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogModal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/CustomAdUnit.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useEffect, useRef } from 'react';\nimport { loadExternalScript } from '../../../utils/scriptLoader';\n\n// Renders custom/Yllix ad units. For script-based widgets, we optionally load a script URL.\nconst CustomAdUnit = ({ scriptUrl, html, className = '' }) => {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    let canceled = false;\n    (async () => {\n      if (scriptUrl) {\n        await loadExternalScript(scriptUrl);\n      }\n      if (!canceled && containerRef.current && html) {\n        // Insert provided HTML snippet into container\n        containerRef.current.innerHTML = html;\n      }\n    })();\n    return () => { canceled = true; };\n  }, [scriptUrl, html]);\n\n  if (!scriptUrl && !html) return null;\n  return (\n    <div className={`bg-surface border border-border-accent/20 rounded-lg overflow-hidden ${className}`}>\n      <div ref={containerRef} />\n    </div>\n  );\n};\n\nexport default CustomAdUnit;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/SearchHeader.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [52, 100], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [107, 119], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [100, 152], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [107, 119], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [159, 170], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [152, 203], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [159, 170], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst SearchHeader = ({ \n  onSearch, \n  onSort, \n  searchQuery, \n  sortBy, \n  totalPosts, \n  onRefresh, \n  loading \n}) => {\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [localSearchQuery, setLocalSearchQuery] = useState(searchQuery || '');\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    setLocalSearchQuery(searchQuery || '');\n  }, [searchQuery]);\n\n  const handleSearchSubmit = (e) => {\n    e.preventDefault();\n    onSearch(localSearchQuery);\n    if (window.innerWidth < 768) {\n      setIsSearchOpen(false);\n    }\n  };\n\n  const handleClearSearch = () => {\n    setLocalSearchQuery('');\n    onSearch('');\n    setIsSearchOpen(false);\n  };\n\n  const sortOptions = [\n    { value: 'newest', label: 'Newest First', icon: 'CalendarDays' },\n    { value: 'oldest', label: 'Oldest First', icon: 'Calendar' },\n    { value: 'most-liked', label: 'Most Liked', icon: 'Heart' },\n    { value: 'most-commented', label: 'Most Discussed', icon: 'MessageCircle' },\n    { value: 'relevance', label: 'Most Relevant', icon: 'TrendingUp' }\n  ];\n\n  const currentSort = sortOptions.find(option => option.value === sortBy) || sortOptions[0];\n\n  return (\n    <div className=\"bg-surface border-b border-border-accent/20 sticky top-0 z-30 backdrop-blur-md\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between py-4\">\n          {/* Left Section - Title and Stats */}\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              <h1 className=\"font-heading font-bold text-2xl text-text-primary\">\n                Blog Hub\n              </h1>\n              <p className=\"text-text-secondary text-sm font-caption\">\n                {loading ? (\n                  <span className=\"flex items-center space-x-2\">\n                    <Icon name=\"Loader2\" size={14} className=\"animate-spin\" />\n                    <span>Loading posts...</span>\n                  </span>\n                ) : (\n                  <>\n                    {totalPosts} {totalPosts === 1 ? 'post' : 'posts'} available\n                    {searchQuery && (\n                      <span className=\"ml-2 text-primary\">\n                        • Filtered by \"{searchQuery}\"\n                      </span>\n                    )}\n                  </>\n                )}\n              </p>\n            </div>\n          </div>\n\n          {/* Right Section - Search and Controls */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Refresh Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"RefreshCw\"\n              onClick={onRefresh}\n              disabled={loading}\n              className={`text-text-secondary hover:text-primary ${loading ? 'animate-spin' : ''}`}\n              title=\"Refresh posts\"\n            />\n\n            {/* Desktop Search */}\n            <div className=\"hidden md:block\">\n              <form onSubmit={handleSearchSubmit} className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search posts, tags, categories...\"\n                  value={localSearchQuery}\n                  onChange={(e) => setLocalSearchQuery(e.target.value)}\n                  className=\"w-80 pl-10 pr-10\"\n                />\n                <Icon \n                  name=\"Search\" \n                  size={18} \n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary\" \n                />\n                {localSearchQuery && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"xs\"\n                    iconName=\"X\"\n                    onClick={handleClearSearch}\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-text-secondary hover:text-primary\"\n                  />\n                )}\n              </form>\n            </div>\n\n            {/* Mobile Search Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Search\"\n              onClick={() => setIsSearchOpen(!isSearchOpen)}\n              className={`md:hidden ${isSearchOpen ? 'text-primary' : 'text-text-secondary hover:text-primary'}`}\n              title=\"Toggle search\"\n            />\n\n            {/* Sort Dropdown */}\n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName={currentSort.icon}\n                iconPosition=\"left\"\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"text-text-secondary hover:text-primary hidden sm:flex\"\n                title=\"Sort options\"\n              >\n                {currentSort.label}\n                <Icon name=\"ChevronDown\" size={16} className=\"ml-1\" />\n              </Button>\n\n              {/* Mobile Sort Button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName={currentSort.icon}\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"text-text-secondary hover:text-primary sm:hidden\"\n                title=\"Sort options\"\n              />\n\n              {/* Sort Dropdown Menu */}\n              {showFilters && (\n                <div className=\"absolute right-0 mt-2 w-56 bg-surface border border-border-accent/20 rounded-lg shadow-lg z-40\">\n                  <div className=\"py-2\">\n                    <div className=\"px-3 py-2 text-xs font-medium text-text-secondary uppercase tracking-wide border-b border-border-accent/20\">\n                      Sort by\n                    </div>\n                    {sortOptions.map((option) => (\n                      <button\n                        key={option.value}\n                        onClick={() => {\n                          onSort(option.value);\n                          setShowFilters(false);\n                        }}\n                        className={`w-full flex items-center space-x-3 px-3 py-2 text-sm transition-colors duration-fast ${\n                          sortBy === option.value\n                            ? 'bg-primary/10 text-primary' :'text-text-primary hover:bg-accent/10 hover:text-accent'\n                        }`}\n                      >\n                        <Icon name={option.icon} size={16} />\n                        <span>{option.label}</span>\n                        {sortBy === option.value && (\n                          <Icon name=\"Check\" size={14} className=\"ml-auto\" />\n                        )}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Filters Toggle (Mobile) */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Filter\"\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"text-text-secondary hover:text-primary md:hidden\"\n              title=\"Filter options\"\n            />\n          </div>\n        </div>\n\n        {/* Mobile Search Bar */}\n        {isSearchOpen && (\n          <div className=\"md:hidden pb-4\">\n            <form onSubmit={handleSearchSubmit} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search posts, tags, categories...\"\n                value={localSearchQuery}\n                onChange={(e) => setLocalSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-10\"\n                autoFocus\n              />\n              <Icon \n                name=\"Search\" \n                size={18} \n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary\" \n              />\n              {localSearchQuery && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"xs\"\n                  iconName=\"X\"\n                  onClick={handleClearSearch}\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-text-secondary hover:text-primary\"\n                />\n              )}\n            </form>\n          </div>\n        )}\n\n        {/* Active Filters Display */}\n        {(searchQuery || sortBy !== 'newest') && (\n          <div className=\"pb-4\">\n            <div className=\"flex items-center space-x-2 flex-wrap\">\n              <span className=\"text-xs text-text-secondary font-medium\">Active filters:</span>\n              \n              {searchQuery && (\n                <div className=\"flex items-center space-x-1 bg-primary/10 text-primary px-2 py-1 rounded-md text-xs\">\n                  <Icon name=\"Search\" size={12} />\n                  <span>\"{searchQuery}\"</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"xs\"\n                    iconName=\"X\"\n                    onClick={() => onSearch('')}\n                    className=\"text-primary hover:text-primary/80\"\n                  />\n                </div>\n              )}\n\n              {sortBy !== 'newest' && (\n                <div className=\"flex items-center space-x-1 bg-accent/10 text-accent px-2 py-1 rounded-md text-xs\">\n                  <Icon name={currentSort.icon} size={12} />\n                  <span>{currentSort.label}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"xs\"\n                    iconName=\"X\"\n                    onClick={() => onSort('newest')}\n                    className=\"text-accent hover:text-accent/80\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Click outside to close filters */}\n      {showFilters && (\n        <div \n          className=\"fixed inset-0 z-30\" \n          onClick={() => setShowFilters(false)}\n        ></div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchHeader;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/components/ShareModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [41, 89], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [89, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [141, 192], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst ShareModal = ({ isOpen, onClose, post }) => {\n  const [copied, setCopied] = useState(false);\n\n  if (!isOpen || !post) return null;\n\n  const shareUrl = `${window.location.origin}/blog/${post.id}`;\n  const shareText = `Check out this blog post: ${post.title}`;\n\n  const socialPlatforms = [\n    {\n      name: 'Twitter',\n      icon: 'Twitter',\n      url: `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`,\n      color: 'text-blue-400 hover:text-blue-300'\n    },\n    {\n      name: 'LinkedIn',\n      icon: 'Linkedin',\n      url: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`,\n      color: 'text-blue-600 hover:text-blue-500'\n    },\n    {\n      name: 'Facebook',\n      icon: 'Facebook',\n      url: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`,\n      color: 'text-blue-500 hover:text-blue-400'\n    },\n    {\n      name: 'Reddit',\n      icon: 'MessageSquare',\n      url: `https://reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(post.title)}`,\n      color: 'text-orange-500 hover:text-orange-400'\n    }\n  ];\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy link:', err);\n    }\n  };\n\n  const handleSocialShare = (url) => {\n    window.open(url, '_blank', 'width=600,height=400,scrollbars=yes,resizable=yes');\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        {/* Backdrop */}\n        <div \n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm transition-opacity\"\n          onClick={onClose}\n        ></div>\n\n        {/* Modal */}\n        <div className=\"inline-block align-bottom bg-surface rounded-lg border border-border-accent/20 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md sm:w-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border-accent/20\">\n            <h3 className=\"font-heading font-semibold text-lg text-text-primary\">\n              Share Post\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"X\"\n              onClick={onClose}\n              className=\"text-text-secondary hover:text-primary\"\n            />\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {/* Post Preview */}\n            <div className=\"mb-6 p-4 bg-background/50 rounded-lg border border-border-accent/20\">\n              <h4 className=\"font-medium text-text-primary text-sm mb-2 line-clamp-2\">\n                {post.title}\n              </h4>\n              <p className=\"text-text-secondary text-xs line-clamp-2\">\n                {post.excerpt}\n              </p>\n            </div>\n\n            {/* Copy Link */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Copy Link\n              </label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"text\"\n                  value={shareUrl}\n                  readOnly\n                  className=\"flex-1 bg-background/50 text-text-secondary text-sm\"\n                />\n                <Button\n                  variant={copied ? \"success\" : \"outline\"}\n                  size=\"sm\"\n                  iconName={copied ? \"Check\" : \"Copy\"}\n                  onClick={handleCopyLink}\n                  className=\"min-w-[80px]\"\n                >\n                  {copied ? \"Copied!\" : \"Copy\"}\n                </Button>\n              </div>\n            </div>\n\n            {/* Social Platforms */}\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-3\">\n                Share on Social Media\n              </label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {socialPlatforms.map((platform) => (\n                  <Button\n                    key={platform.name}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleSocialShare(platform.url)}\n                    className={`\n                      justify-start space-x-2 hover:border-primary/40 transition-all duration-fast\n                      ${platform.color}\n                    `}\n                  >\n                    <Icon name={platform.icon} size={18} />\n                    <span>{platform.name}</span>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Email Share */}\n            <div className=\"mt-6 pt-6 border-t border-border-accent/20\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"Mail\"\n                onClick={() => {\n                  const subject = encodeURIComponent(`Check out: ${post.title}`);\n                  const body = encodeURIComponent(`I thought you might be interested in this blog post:\\n\\n${post.title}\\n${shareUrl}`);\n                  window.location.href = `mailto:?subject=${subject}&body=${body}`;\n                }}\n                className=\"w-full justify-center text-text-secondary hover:text-primary hover:bg-primary/10\"\n              >\n                Share via Email\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShareModal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-content-hub/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [65, 103], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [65, 104], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [65, 103], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [165, 187], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "fix": { "range": [158, 227], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [165, 187], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'SearchHeader' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchHeader" },
            "fix": { "range": [234, 252], "text": "" },
            "desc": "Remove unused variable 'SearchHeader'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'SearchHeader' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 20,
        "fix": { "range": [227, 281], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SearchHeader" },
            "fix": { "range": [234, 252], "text": "" },
            "desc": "Remove unused variable 'SearchHeader'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BlogGrid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogGrid" },
            "fix": { "range": [288, 302], "text": "" },
            "desc": "Remove unused variable 'BlogGrid'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BlogGrid' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16,
        "fix": { "range": [281, 327], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogGrid" },
            "fix": { "range": [288, 302], "text": "" },
            "desc": "Remove unused variable 'BlogGrid'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'BlogModal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogModal" },
            "fix": { "range": [334, 349], "text": "" },
            "desc": "Remove unused variable 'BlogModal'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'BlogModal' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17,
        "fix": { "range": [327, 375], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "BlogModal" },
            "fix": { "range": [334, 349], "text": "" },
            "desc": "Remove unused variable 'BlogModal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ShareModal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ShareModal" },
            "fix": { "range": [382, 398], "text": "" },
            "desc": "Remove unused variable 'ShareModal'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ShareModal' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 18,
        "fix": { "range": [375, 425], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ShareModal" },
            "fix": { "range": [382, 398], "text": "" },
            "desc": "Remove unused variable 'ShareModal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [432, 444], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 14,
        "fix": { "range": [425, 474], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [432, 444], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [481, 491], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 10,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 12,
        "fix": { "range": [474, 519], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [481, 491], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 50,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 17
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 174,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 174,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5944, 5989], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 198,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 198,
        "endColumn": 21
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 221,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 241,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 254,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 24,
    "fixableErrorCount": 0,
    "fixableWarningCount": 9,
    "source": "import React, { useState, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '../../contexts/AuthContext';\nimport HeaderNavigation from '../../components/ui/HeaderNavigation';\nimport SearchHeader from './components/SearchHeader';\nimport BlogGrid from './components/BlogGrid';\nimport BlogModal from './components/BlogModal';\nimport ShareModal from './components/ShareModal';\nimport Button from '../../components/ui/Button';\nimport Icon from '../../components/AppIcon';\nimport blogService from '../../utils/blogService';\nimport settingsService from '../../utils/settingsService';\nimport { ensureAdSenseLoaded } from '../../utils/adsense';\n\nconst BlogContentHub = () => {\n  const { user, userProfile } = useAuth();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('newest');\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isShareModalOpen, setIsShareModalOpen] = useState(false);\n  const [sharePost, setSharePost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [adsConfig, setAdsConfig] = useState({ enabled: false });\n\n  const isAdmin = userProfile?.role === 'admin';\n\n  // Load blog posts\n  const loadPosts = useCallback(async (options = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const result = isAdmin \n        ? await blogService.getAllPosts()\n        : await blogService.getPublishedPosts({\n            search: searchQuery,\n            sortBy,\n            ...options\n          });\n\n      if (result.success) {\n        setPosts(result.data || []);\n      } else {\n        setError(result.error || 'Failed to load blog posts');\n        setPosts([]);\n      }\n    } catch (err) {\n      setError('Network error occurred while loading posts');\n      setPosts([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [isAdmin, searchQuery, sortBy]);\n\n  // Initial load\n  useEffect(() => {\n    loadPosts();\n    // Load ads settings\n    (async () => {\n      const res = await settingsService.getSettings();\n      if (res.success) {\n        const ads = res.data?.ads_settings || {};\n        setAdsConfig({\n          enabled: !!ads.enabled,\n          provider: ads.provider || 'adsense',\n          publisher_id: ads.publisher_id || '',\n          auto_ads: ads.auto_ads !== false,\n          grid_interval: Number(ads.grid_interval) || 6,\n          ad_slot: ads.ad_slot || '',\n          // yllix/custom\n          yllix_publisher_id: ads.yllix_publisher_id || '',\n          yllix_script_url: ads.yllix_script_url || '',\n          yllix_unit_code: ads.yllix_unit_code || '',\n          custom_script_url: ads.custom_script_url || '',\n          custom_ad_html: ads.custom_ad_html || ''\n        });\n        if (ads.enabled && (ads.provider || 'adsense') === 'adsense' && ads.publisher_id) {\n          await ensureAdSenseLoaded(ads.publisher_id);\n        }\n      }\n    })();\n  }, [loadPosts]);\n\n  // Reload when search or sort changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (searchQuery !== undefined) {\n        loadPosts();\n      }\n    }, 300); // Debounce search\n\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery, sortBy, loadPosts]);\n\n  // Filter and sort posts locally for better UX\n  const filteredAndSortedPosts = useCallback(() => {\n    let filtered = [...posts];\n\n    // Apply search filter locally for immediate response\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(post =>\n        post?.title?.toLowerCase().includes(query) ||\n        post?.excerpt?.toLowerCase().includes(query) ||\n        post?.content?.toLowerCase().includes(query) ||\n        post?.tags?.some(tag => tag?.toLowerCase().includes(query)) ||\n        post?.category?.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'newest':\n        filtered.sort((a, b) => new Date(b.published_at || b.created_at) - new Date(a.published_at || a.created_at));\n        break;\n      case 'oldest':\n        filtered.sort((a, b) => new Date(a.published_at || a.created_at) - new Date(b.published_at || b.created_at));\n        break;\n      case 'most-liked':\n        filtered.sort((a, b) => (b.like_count || 0) - (a.like_count || 0));\n        break;\n      case 'most-commented':\n        filtered.sort((a, b) => (b.comment_count || 0) - (a.comment_count || 0));\n        break;\n      case 'relevance':\n        filtered.sort((a, b) => {\n          const scoreA = (a.like_count || 0) * 2 + (a.comment_count || 0) * 3 + (a.view_count || 0) * 0.1;\n          const scoreB = (b.like_count || 0) * 2 + (b.comment_count || 0) * 3 + (b.view_count || 0) * 0.1;\n          return scoreB - scoreA;\n        });\n        break;\n      default:\n        break;\n    }\n\n    return filtered;\n  }, [posts, searchQuery, sortBy]);\n\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n\n  const handleSort = useCallback((sortOption) => {\n    setSortBy(sortOption);\n  }, []);\n\n  const handleLike = useCallback(async (postId) => {\n    try {\n      // Get visitor IP for like tracking\n      const visitorIp = await getVisitorIp();\n      const userAgent = navigator.userAgent || '';\n\n      const result = await blogService.toggleLike(postId, visitorIp, userAgent);\n      \n      if (result.success) {\n        // Update local state optimistically\n        setPosts(prevPosts => \n          prevPosts.map(post => \n            post.id === postId \n              ? { \n                  ...post, \n                  like_count: result.liked \n                    ? (post.like_count || 0) + 1 \n                    : Math.max((post.like_count || 0) - 1, 0)\n                }\n              : post\n          )\n        );\n      }\n    } catch (error) {\n      console.log('Failed to toggle like:', error);\n    }\n  }, []);\n\n  const handleShare = useCallback((post) => {\n    setSharePost(post);\n    setIsShareModalOpen(true);\n  }, []);\n\n  const handleEdit = useCallback((post) => {\n    setSelectedPost(post);\n    setIsModalOpen(true);\n  }, []);\n\n  const handleDelete = useCallback(async (postId) => {\n    if (window.confirm('Are you sure you want to delete this post?')) {\n      try {\n        const result = await blogService.deletePost(postId);\n        \n        if (result.success) {\n          setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n        } else {\n          setError(result.error || 'Failed to delete post');\n        }\n      } catch (error) {\n        setError('Network error occurred while deleting post');\n      }\n    }\n  }, []);\n\n  const handleSave = useCallback(async (updatedPost) => {\n    try {\n      let result;\n      \n      if (updatedPost.id && posts.find(p => p.id === updatedPost.id)) {\n        // Update existing post\n        result = await blogService.updatePost(updatedPost.id, updatedPost);\n      } else {\n        // Create new post\n        result = await blogService.createPost(updatedPost);\n      }\n\n      if (result.success) {\n        await loadPosts(); // Refresh posts\n      } else {\n        setError(result.error || 'Failed to save post');\n      }\n    } catch (error) {\n      setError('Network error occurred while saving post');\n    }\n  }, [posts, loadPosts]);\n\n  const handlePostClick = useCallback(async (post) => {\n    try {\n      // For detailed view, get the full post with comments\n      const result = await blogService.getPostBySlug(post.slug);\n      \n      if (result.success) {\n        setSelectedPost({\n          ...post,\n          comments: result.data.comments || []\n        });\n      } else {\n        setSelectedPost(post);\n      }\n      \n      setIsModalOpen(true);\n    } catch (error) {\n      // Fallback to original post data\n      setSelectedPost(post);\n      setIsModalOpen(true);\n    }\n  }, []);\n\n  // Get visitor IP helper function\n  const getVisitorIp = async () => {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip || 'unknown';\n    } catch (error) {\n      return `fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n  };\n\n  const displayedPosts = filteredAndSortedPosts();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Helmet>\n        <title>Mikael Kraft — Blog</title>\n        <meta name=\"description\" content=\"Read articles by Mikael Kraft on software engineering, web development, and technology insights.\" />\n        <meta property=\"og:title\" content=\"Mikael Kraft — Blog\" />\n        <meta property=\"og:description\" content=\"Latest posts on full‑stack engineering, security, and practical tech write‑ups.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://mkraft.tech/blog\" />\n        <meta property=\"og:image\" content=\"/assets/images/no_image.png\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"@mikael_kraft\" />\n        <meta name=\"twitter:creator\" content=\"@mikael_kraft\" />\n        <link rel=\"canonical\" href=\"https://mkraft.tech/blog\" />\n      </Helmet>\n      {/* Header Navigation */}\n      <HeaderNavigation />\n\n      {/* Search Header */}\n      <SearchHeader\n        onSearch={handleSearch}\n        onSort={handleSort}\n        searchQuery={searchQuery}\n        sortBy={sortBy}\n        totalPosts={posts.length}\n        onRefresh={() => loadPosts()}\n        loading={loading}\n      />\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Error Message */}\n        {error && (\n          <div className=\"mb-8 p-4 bg-error/10 border border-error/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"AlertCircle\" size={20} className=\"text-error\" />\n              <p className=\"text-error font-medium\">{error}</p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setError(null)}\n                iconName=\"X\"\n                className=\"ml-auto text-error hover:text-error/80\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => loadPosts()}\n              className=\"mt-2\"\n              iconName=\"RefreshCw\"\n              iconPosition=\"left\"\n            >\n              Retry\n            </Button>\n          </div>\n        )}\n\n        {/* Add New Post Button (Admin Only) */}\n        {isAdmin && (\n          <div className=\"mb-8 flex justify-end\">\n            <Button\n              variant=\"primary\"\n              iconName=\"Plus\"\n              iconPosition=\"left\"\n              onClick={() => {\n                const newPost = {\n                  id: null, // Will be set by database\n                  title: '',\n                  excerpt: '',\n                  content: '',\n                  category: '',\n                  tags: [],\n                  featured_image: '',\n                  status: 'draft',\n                  author_id: user?.id,\n                  author: userProfile?.full_name || 'Admin',\n                  published_at: null,\n                  created_at: new Date().toISOString()\n                };\n                setSelectedPost(newPost);\n                setIsModalOpen(true);\n              }}\n              className=\"shadow-glow-primary\"\n            >\n              Create New Post\n            </Button>\n          </div>\n        )}\n\n        {/* Blog Grid */}\n        <BlogGrid\n          posts={displayedPosts}\n          onLike={handleLike}\n          onShare={handleShare}\n          onPostClick={handlePostClick}\n          isAdmin={isAdmin}\n          onEdit={handleEdit}\n          onDelete={handleDelete}\n          loading={loading}\n          adsConfig={adsConfig}\n        />\n\n        {/* Load More Button (if needed for pagination) */}\n        {displayedPosts.length > 0 && displayedPosts.length % 6 === 0 && (\n          <div className=\"text-center mt-12\">\n            <Button\n              variant=\"outline\"\n              iconName=\"ChevronDown\"\n              iconPosition=\"right\"\n              onClick={() => {\n                loadPosts({ \n                  offset: posts.length,\n                  limit: 6 \n                });\n              }}\n              className=\"hover:border-primary/60 hover:text-primary\"\n              disabled={loading}\n            >\n              {loading ? 'Loading...' : 'Load More Posts'}\n            </Button>\n          </div>\n        )}\n\n        {/* Empty State for No Results */}\n        {displayedPosts.length === 0 && !loading && (\n          <div className=\"text-center py-16\">\n            <div className=\"max-w-md mx-auto\">\n              <Icon name=\"Search\" size={48} className=\"mx-auto mb-4 text-text-secondary\" />\n              <h3 className=\"font-heading font-semibold text-xl text-text-primary mb-2\">\n                {searchQuery ? 'No posts found' : 'No blog posts yet'}\n              </h3>\n              <p className=\"text-text-secondary mb-6\">\n                {searchQuery \n                  ? `No blog posts match your search for \"${searchQuery}\". Try different keywords or browse all posts.`\n                  : 'No blog posts have been published yet. Check back later for updates.'\n                }\n              </p>\n              {searchQuery ? (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSearchQuery('')}\n                  iconName=\"RotateCcw\"\n                  iconPosition=\"left\"\n                >\n                  Clear Search\n                </Button>\n              ) : isAdmin && (\n                <Button\n                  variant=\"primary\"\n                  onClick={() => {\n                    const newPost = {\n                      id: null,\n                      title: '',\n                      excerpt: '',\n                      content: '',\n                      category: '',\n                      tags: [],\n                      featured_image: '',\n                      status: 'draft',\n                      author_id: user?.id,\n                      author: userProfile?.full_name || 'Admin'\n                    };\n                    setSelectedPost(newPost);\n                    setIsModalOpen(true);\n                  }}\n                  iconName=\"Plus\"\n                  iconPosition=\"left\"\n                >\n                  Create First Post\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </main>\n\n      {/* Blog Modal */}\n      <BlogModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedPost(null);\n        }}\n        post={selectedPost}\n        onSave={handleSave}\n        isAdmin={isAdmin}\n      />\n\n      {/* Share Modal */}\n      <ShareModal\n        isOpen={isShareModalOpen}\n        onClose={() => {\n          setIsShareModalOpen(false);\n          setSharePost(null);\n        }}\n        post={sharePost}\n      />\n\n      {/* Scroll to Top Button */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          iconName=\"ArrowUp\"\n          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n          className=\"rounded-full w-12 h-12 shadow-glow-primary hover:shadow-glow-secondary transition-all duration-fast\"\n          title=\"Scroll to top\"\n        />\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-surface border-t border-border-accent/20 mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Icon name=\"Zap\" size={20} className=\"text-primary\" />\n              <span className=\"font-heading font-bold text-lg text-primary\">\n                WisdomInTech\n              </span>\n            </div>\n            <p className=\"text-text-secondary text-sm font-caption\">\n              © {new Date().getFullYear()} Built with love ❤️ by Mikael Kraft\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default BlogContentHub;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-post/BlogPost.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'RelatedPosts' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RelatedPosts" },
            "fix": { "range": [156, 174], "text": "" },
            "desc": "Remove unused variable 'RelatedPosts'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'RelatedPosts' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 20,
        "fix": { "range": [149, 197], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RelatedPosts" },
            "fix": { "range": [156, 174], "text": "" },
            "desc": "Remove unused variable 'RelatedPosts'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport blogService from '../../utils/blogService';\nimport RelatedPosts from './RelatedPosts.jsx';\n\nexport default function BlogPost() {\n  const { slug } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true); setError(null);\n      const res = await blogService.getPostBySlug(slug);\n      if (!active) return;\n      if (res.success) setPost(res.data);\n      else setError(res.error || 'Failed to load post');\n      setLoading(false);\n    })();\n    return () => { active = false; };\n  }, [slug]);\n\n  if (loading) return <div className=\"p-6\">Loading...</div>;\n  if (error) return <div className=\"p-6 text-red-600\">{error}</div>;\n  if (!post) return <div className=\"p-6\">Not found</div>;\n\n  return (\n    <article className=\"max-w-3xl mx-auto p-6 prose prose-invert\">\n      <h1>{post.title}</h1>\n      {post.excerpt && <p className=\"lead text-gray-400\">{post.excerpt}</p>}\n      {post.featured_image && (\n        <img src={post.featured_image} alt=\"Featured\" className=\"rounded-lg shadow mb-6\" />\n      )}\n      <div dangerouslySetInnerHTML={{ __html: post.content }} />\n      <div className=\"mt-8 border-t border-gray-700 pt-6\">\n        <RelatedPosts slug={post.slug} />\n      </div>\n    </article>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-post/RelatedPosts.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [60, 100], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [60, 101], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [60, 100], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [153, 163], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "fix": { "range": [146, 185], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [153, 163], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 42,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 14
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'requestIdRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'requestIdRef.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 51,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 51,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport blogService from 'utils/blogService';\nimport Icon from 'components/AppIcon';\nimport useFeature from 'hooks/useFeature';\n\n/**\n * RelatedPosts Component\n * Fetches and displays related posts for a given slug.\n * Includes safeguards against memory leaks / race conditions.\n */\nexport default function RelatedPosts({ slug, limit = 3, heading = 'Related Posts' }) {\n\tconst enabled = useFeature('related_posts', true);\n\tconst [posts, setPosts] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\tconst requestIdRef = useRef(0); // incremental id to discard stale responses\n\tconst cacheRef = useRef(new Map()); // simple in-memory session cache\n\tconst debounceRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (!slug) return;\n\t\t// Avoid refetch if already cached\n\t\tif (cacheRef.current.has(slug)) {\n\t\t\tsetPosts(cacheRef.current.get(slug));\n\t\t\treturn;\n\t\t}\n\t\tsetLoading(true); setError(null);\n\t\tconst currentReq = ++requestIdRef.current;\n\t\tclearTimeout(debounceRef.current);\n\t\tdebounceRef.current = setTimeout(async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await blogService.getRelatedPosts?.(slug, { limit });\n\t\t\t\tif (requestIdRef.current !== currentReq) return; // stale\n\t\t\t\tif (res?.success) {\n\t\t\t\t\tconst data = (res.data || []).slice(0, limit);\n\t\t\t\t\t\tcacheRef.current.set(slug, data);\n\t\t\t\t\t\tsetPosts(data);\n\t\t\t\t} else if (res?.error) {\n\t\t\t\t\tsetError(res.error);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (requestIdRef.current === currentReq) setError('Failed to load related posts');\n\t\t\t} finally {\n\t\t\t\tif (requestIdRef.current === currentReq) setLoading(false);\n\t\t\t}\n\t\t}, 150); // small debounce to collapse quick slug changes\n\n\t\treturn () => {\n\t\t\t// Mark any in-flight response as stale\n\t\t\trequestIdRef.current++;\n\t\t\tclearTimeout(debounceRef.current);\n\t\t};\n\t}, [slug, limit]);\n\n\t\tif (!slug || !enabled) return null;\n\treturn (\n\t\t<section aria-labelledby=\"related-posts-heading\" className=\"mt-10\">\n\t\t\t<h2 id=\"related-posts-heading\" className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n\t\t\t\t<Icon name=\"Link\" size={18} /> {heading}\n\t\t\t</h2>\n\t\t\t{loading && (\n\t\t\t\t<ul className=\"space-y-3 animate-pulse\">\n\t\t\t\t\t{Array.from({ length: limit }).map((_, i) => (\n\t\t\t\t\t\t<li key={i} className=\"p-4 rounded bg-surface/60 border border-border-accent/20\">\n\t\t\t\t\t\t\t<div className=\"h-4 bg-border-accent/40 rounded w-2/3 mb-2\" />\n\t\t\t\t\t\t\t<div className=\"h-3 bg-border-accent/30 rounded w-5/6\" />\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t\t{!loading && error && <p className=\"text-error text-sm\">{error}</p>}\n\t\t\t{!loading && !error && !posts.length && (\n\t\t\t\t<p className=\"text-text-secondary text-sm\">No related posts yet.</p>\n\t\t\t)}\n\t\t\t{!loading && posts.length > 0 && (\n\t\t\t\t<ul className=\"space-y-3\">\n\t\t\t\t\t{posts.map(p => (\n\t\t\t\t\t\t<li key={p.id}>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto={`/blog/${p.slug}`}\n\t\t\t\t\t\t\t\tclassName=\"group block p-4 rounded bg-surface border border-border-accent/20 hover:border-primary transition\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<h3 className=\"font-medium group-hover:text-primary line-clamp-1\">{p.title}</h3>\n\t\t\t\t\t\t\t\t{p.excerpt && <p className=\"text-sm text-text-secondary line-clamp-2\">{p.excerpt}</p>}\n\t\t\t\t\t\t\t\t{p.tags?.length ? (\n\t\t\t\t\t\t\t\t\t<div className=\"mt-2 flex flex-wrap gap-1\">\n\t\t\t\t\t\t\t\t\t\t{p.tags.slice(0, 4).map(t => (\n\t\t\t\t\t\t\t\t\t\t\t<span key={t} className=\"text-[10px] bg-border-accent/40 px-1 rounded\">{t}</span>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</section>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/blog-post/index.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/documentation/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [52, 90], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [52, 91], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [52, 90], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [98, 120], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 24,
        "fix": { "range": [91, 160], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [98, 120], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'DynamicFooter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "DynamicFooter" },
            "fix": { "range": [167, 186], "text": "" },
            "desc": "Remove unused variable 'DynamicFooter'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'DynamicFooter' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 21,
        "fix": { "range": [160, 237], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "DynamicFooter" },
            "fix": { "range": [167, 186], "text": "" },
            "desc": "Remove unused variable 'DynamicFooter'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [244, 254], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12,
        "fix": { "range": [237, 282], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [244, 254], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [289, 301], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 14,
        "fix": { "range": [282, 332], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [289, 301], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport HeaderNavigation from '../../components/ui/HeaderNavigation';\nimport DynamicFooter from '../portfolio-home-hero/components/DynamicFooter';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\n\nconst Documentation = () => {\n  const [currentTheme, setCurrentTheme] = useState('cyberpunk');\n  const [activeSection, setActiveSection] = useState('overview');\n\n  useEffect(() => {\n    // Get theme from localStorage\n    const savedTheme = localStorage.getItem('theme') || 'cyberpunk';\n    setCurrentTheme(savedTheme);\n  }, []);\n\n  const sections = [\n    { id: 'overview', label: 'Overview', icon: 'Book' },\n    { id: 'api', label: 'API Reference', icon: 'Code' },\n    { id: 'usage', label: 'Usage Guide', icon: 'User' },\n    { id: 'examples', label: 'Examples', icon: 'FileText' },\n  ];\n\n  const renderOverview = () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-4xl font-heading font-bold text-text-primary mb-4\">\n          Portfolio Platform Documentation\n        </h1>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          Welcome to the WisdomInTech portfolio platform documentation. This guide will help you understand \n          how to use and extend the portfolio platform.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Icon name=\"Zap\" size={24} className=\"text-primary\" />\n            <h3 className=\"text-xl font-heading font-semibold text-text-primary\">\n              Quick Start\n            </h3>\n          </div>\n          <p className=\"text-text-secondary mb-4\">\n            Get up and running with the portfolio platform in minutes.\n          </p>\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveSection('usage')}\n            iconName=\"ArrowRight\"\n            iconPosition=\"right\"\n          >\n            View Usage Guide\n          </Button>\n        </div>\n\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Icon name=\"Code\" size={24} className=\"text-secondary\" />\n            <h3 className=\"text-xl font-heading font-semibold text-text-primary\">\n              API Reference\n            </h3>\n          </div>\n          <p className=\"text-text-secondary mb-4\">\n            Explore the available API endpoints and their usage.\n          </p>\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveSection('api')}\n            iconName=\"ArrowRight\"\n            iconPosition=\"right\"\n          >\n            View API Docs\n          </Button>\n        </div>\n      </div>\n\n      <div>\n        <h2 className=\"text-2xl font-heading font-semibold text-text-primary mb-4\">\n          Platform Features\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"Image\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">Image Projects</span>\n          </div>\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"Video\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">Video Projects</span>\n          </div>\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"Grid3x3\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">Logo Galleries</span>\n          </div>\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">Blog System</span>\n          </div>\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"Upload\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">File Uploads</span>\n          </div>\n          <div className=\"flex items-center gap-3 p-4 bg-surface/10 rounded-lg border border-border-accent/10\">\n            <Icon name=\"Shield\" size={20} className=\"text-primary\" />\n            <span className=\"text-text-primary\">Admin Dashboard</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAPI = () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-4xl font-heading font-bold text-text-primary mb-4\">\n          API Reference\n        </h1>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          The portfolio platform provides a RESTful API for managing content and retrieving data.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            Projects API\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-success/20 text-success rounded text-sm font-mono\">GET</span>\n                <code className=\"text-primary font-mono\">/api/projects</code>\n              </div>\n              <p className=\"text-text-secondary text-sm mb-2\">Get all projects with optional filters</p>\n              <div className=\"text-xs text-text-secondary\">\n                <strong>Query Parameters:</strong>\n                <ul className=\"list-disc list-inside mt-1 space-y-1\">\n                  <li><code>published</code> - Filter by published status (true/false)</li>\n                  <li><code>featured</code> - Filter by featured status (true/false)</li>\n                  <li><code>limit</code> - Limit number of results (default: 100)</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-success/20 text-success rounded text-sm font-mono\">GET</span>\n                <code className=\"text-primary font-mono\">/api/projects/by-id?id={'{uuid}'}</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Get a specific project by ID</p>\n            </div>\n\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-warning/20 text-warning rounded text-sm font-mono\">POST</span>\n                <code className=\"text-primary font-mono\">/api/projects</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Create a new project (requires authentication)</p>\n            </div>\n\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-primary/20 text-primary rounded text-sm font-mono\">PUT</span>\n                <code className=\"text-primary font-mono\">/api/projects?id={'{uuid}'}</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Update an existing project (requires authentication)</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            Settings API\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-success/20 text-success rounded text-sm font-mono\">GET</span>\n                <code className=\"text-primary font-mono\">/api/settings</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Get site settings and configuration</p>\n            </div>\n\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-primary/20 text-primary rounded text-sm font-mono\">PUT</span>\n                <code className=\"text-primary font-mono\">/api/settings</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Update site settings (requires authentication)</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            Blog API\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-success/20 text-success rounded text-sm font-mono\">GET</span>\n                <code className=\"text-primary font-mono\">/api/blog</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Get all blog posts</p>\n            </div>\n\n            <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <span className=\"px-2 py-1 bg-success/20 text-success rounded text-sm font-mono\">GET</span>\n                <code className=\"text-primary font-mono\">/api/blog/by-slug?slug={'{slug}'}</code>\n              </div>\n              <p className=\"text-text-secondary text-sm\">Get a specific blog post by slug</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderUsage = () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-4xl font-heading font-bold text-text-primary mb-4\">\n          Usage Guide\n        </h1>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          Learn how to use the portfolio platform effectively.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            Managing Projects\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Creating Projects</h4>\n              <ol className=\"list-decimal list-inside space-y-2 text-text-secondary\">\n                <li>Navigate to the Admin Dashboard</li>\n                <li>Click on \"Projects Management\"</li>\n                <li>Click \"New Project\" button</li>\n                <li>Fill in project details:\n                  <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n                    <li><strong>Title:</strong> Project name</li>\n                    <li><strong>Type:</strong> Choose from Image, Video, Gallery, or Logo Gallery</li>\n                    <li><strong>Description:</strong> Brief project description</li>\n                    <li><strong>Featured Image:</strong> Main project image</li>\n                    <li><strong>Technologies:</strong> Comma-separated list of technologies used</li>\n                  </ul>\n                </li>\n                <li>Click \"Create\" to save the project</li>\n              </ol>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Project Types</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Icon name=\"Image\" size={20} className=\"text-primary\" />\n                    <strong className=\"text-text-primary\">Image Project</strong>\n                  </div>\n                  <p className=\"text-text-secondary text-sm\">\n                    Standard project with a featured image and description.\n                  </p>\n                </div>\n                \n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Icon name=\"Video\" size={20} className=\"text-primary\" />\n                    <strong className=\"text-text-primary\">Video Project</strong>\n                  </div>\n                  <p className=\"text-text-secondary text-sm\">\n                    Project showcasing a video with optional poster image.\n                  </p>\n                </div>\n                \n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Icon name=\"Grid3x3\" size={20} className=\"text-primary\" />\n                    <strong className=\"text-text-primary\">Image Gallery</strong>\n                  </div>\n                  <p className=\"text-text-secondary text-sm\">\n                    Collection of images displayed in a grid layout.\n                  </p>\n                </div>\n                \n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Icon name=\"Layout\" size={20} className=\"text-primary\" />\n                    <strong className=\"text-text-primary\">Logo Gallery</strong>\n                  </div>\n                  <p className=\"text-text-secondary text-sm\">\n                    Infinite scrolling carousel of logos and brand designs.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            File Management\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Supported File Types</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <strong className=\"text-text-primary\">Images</strong>\n                  <p className=\"text-text-secondary text-sm mt-1\">\n                    JPG, PNG, WebP, SVG\n                  </p>\n                </div>\n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <strong className=\"text-text-primary\">Videos</strong>\n                  <p className=\"text-text-secondary text-sm mt-1\">\n                    MP4, WebM, OGG\n                  </p>\n                </div>\n                <div className=\"bg-surface/10 rounded-lg p-4 border border-border-accent/10\">\n                  <strong className=\"text-text-primary\">Documents</strong>\n                  <p className=\"text-text-secondary text-sm mt-1\">\n                    PDF, DOC, DOCX\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Upload Guidelines</h4>\n              <ul className=\"list-disc list-inside space-y-2 text-text-secondary\">\n                <li>Keep file sizes under 10MB for optimal performance</li>\n                <li>Use descriptive filenames</li>\n                <li>Optimize images before uploading</li>\n                <li>For videos, provide a poster image for better UX</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderExamples = () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-4xl font-heading font-bold text-text-primary mb-4\">\n          Examples\n        </h1>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          Practical examples of using the portfolio platform.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            API Usage Examples\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Fetch All Published Projects</h4>\n              <div className=\"bg-background/50 rounded-lg p-4 border border-border-accent/10\">\n                <pre className=\"text-sm text-text-secondary overflow-x-auto\">\n{`fetch('/api/projects?published=true')\n  .then(response => response.json())\n  .then(projects => {\n    console.log('Published projects:', projects);\n  });`}\n                </pre>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Get Featured Projects</h4>\n              <div className=\"bg-background/50 rounded-lg p-4 border border-border-accent/10\">\n                <pre className=\"text-sm text-text-secondary overflow-x-auto\">\n{`fetch('/api/projects?featured=true&limit=6')\n  .then(response => response.json())\n  .then(projects => {\n    console.log('Featured projects:', projects);\n  });`}\n                </pre>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">Create a New Project</h4>\n              <div className=\"bg-background/50 rounded-lg p-4 border border-border-accent/10\">\n                <pre className=\"text-sm text-text-secondary overflow-x-auto\">\n{`const projectData = {\n  title: \"My New Project\",\n  description: \"A detailed description of the project\",\n  type: \"image\",\n  featured_image: \"https://example.com/image.jpg\",\n  tags: [\"React\", \"Node.js\"],\n  status: \"published\"\n};\n\nfetch('/api/projects', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_AUTH_TOKEN'\n  },\n  body: JSON.stringify(projectData)\n})\n.then(response => response.json())\n.then(result => {\n  console.log('Project created:', result);\n});`}\n                </pre>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n          <h3 className=\"text-xl font-heading font-semibold text-text-primary mb-4\">\n            Integration Examples  \n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">React Component Example</h4>\n              <div className=\"bg-background/50 rounded-lg p-4 border border-border-accent/10\">\n                <pre className=\"text-sm text-text-secondary overflow-x-auto\">\n{`import React, { useState, useEffect } from 'react';\n\nconst ProjectsList = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const response = await fetch('/api/projects?published=true');\n        const data = await response.json();\n        setProjects(data);\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {projects.map(project => (\n        <div key={project.id} className=\"project-card\">\n          <h3>{project.title}</h3>\n          <p>{project.description}</p>\n          <img src={project.featured_image} alt={project.title} />\n        </div>\n      ))}\n    </div>\n  );\n};`}\n                </pre>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'api':\n        return renderAPI();\n      case 'usage':\n        return renderUsage();\n      case 'examples':\n        return renderExamples();\n      default:\n        return renderOverview();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Helmet>\n        <title>Documentation - WisdomInTech Portfolio</title>\n        <meta name=\"description\" content=\"Documentation and API reference for the WisdomInTech portfolio platform\" />\n      </Helmet>\n\n      <HeaderNavigation currentTheme={currentTheme} />\n\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"flex flex-col lg:flex-row gap-12\">\n          {/* Sidebar Navigation */}\n          <div className=\"lg:w-64 flex-shrink-0\">\n            <div className=\"sticky top-24\">\n              <nav className=\"space-y-2\">\n                {sections.map((section) => (\n                  <button\n                    key={section.id}\n                    onClick={() => setActiveSection(section.id)}\n                    className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors ${\n                      activeSection === section.id\n                        ? 'bg-primary/20 text-primary border border-primary/30'\n                        : 'text-text-secondary hover:text-text-primary hover:bg-surface/20'\n                    }`}\n                  >\n                    <Icon name={section.icon} size={20} />\n                    <span className=\"font-medium\">{section.label}</span>\n                  </button>\n                ))}\n              </nav>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1 min-w-0\">\n            {renderContent()}\n          </div>\n        </div>\n      </div>\n\n      <DynamicFooter currentTheme={currentTheme} />\n    </div>\n  );\n};\n\nexport default Documentation;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/DynamicFooter.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [27, 67], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [27, 68], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [27, 67], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [75, 85], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [68, 117], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [75, 85], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\n\nconst DynamicFooter = ({ currentTheme }) => {\n  const currentYear = new Date().getFullYear();\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/10 border-purple-500/20',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400',\n          link: 'text-purple-400 hover:text-purple-300'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/10 border-blue-400/20',\n          text: 'text-blue-100',\n          secondary: 'text-blue-300',\n          accent: 'text-blue-400',\n          link: 'text-blue-400 hover:text-blue-300'\n        };\n      case 'light':\n        return {\n          bg: 'bg-white border-gray-200',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600',\n          link: 'text-blue-600 hover:text-blue-800'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-surface/20 border-primary/20',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary',\n          link: 'text-primary hover:text-secondary'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  const footerLinks = [\n    {\n      title: \"Navigation\",\n      links: [\n        { name: \"Home\", href: \"/portfolio-home-hero\" },\n        { name: \"Projects\", href: \"/projects-portfolio-grid\" },\n        { name: \"Blog\", href: \"/blog-content-hub\" },\n        { name: \"Admin\", href: \"/admin-dashboard-content-management\" }\n      ]\n    },\n    {\n      title: \"Connect\",\n      links: [\n        { name: \"X (Twitter)\", href: \"https://x.com/mikael_kraft\", external: true },\n        { name: \"LinkedIn\", href: \"https://linkedin.com/in/mikael-kraft\", external: true },\n        { name: \"GitHub\", href: \"https://github.com/mikaelkraft\", external: true },\n        { name: \"Email\", href: \"mailto:mikewillkraft@gmail.com\", external: true }\n      ]\n    },\n    {\n      title: \"Resources\",\n      links: [\n        { name: \"Documentation\", href: \"/documentation\" },\n        { name: \"API Reference\", href: \"/documentation#api\" },\n        { name: \"Privacy Policy\", href: \"#\" },\n        { name: \"Terms of Service\", href: \"#\" }\n      ]\n    }\n  ];\n\n  const techStack = [\n    \"React\", \"Node.js\", \"Python\", \"PHP\", \"JavaScript\", \n    \"Blockchain\", \"Java\", \"R\", \"CSS\", \"HTML\"\n  ];\n\n  return (\n    <footer className={`${themeClasses.bg} border-t-2 mt-20`}>\n      <div className=\"max-w-7xl mx-auto px-6 py-16\">\n        {/* Main Footer Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-12 mb-12\">\n          {/* Brand Section */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"relative\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${currentTheme === 'light' ? 'bg-blue-600' : 'bg-gradient-to-br from-primary to-secondary'}`}>\n                  <Icon name=\"Code\" size={24} className={currentTheme === 'light' ? 'text-white' : 'text-background'} />\n                </div>\n                {currentTheme !== 'light' && (\n                  <div className=\"absolute -inset-1 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-lg blur opacity-75 -z-10\"></div>\n                )}\n              </div>\n              <div>\n                <div className={`font-heading font-bold text-xl ${themeClasses.text}`}>\n                  WisdomInTech\n                </div>\n                <div className={`text-sm ${themeClasses.secondary}`}>\n                  Portfolio\n                </div>\n              </div>\n            </div>\n            \n            <p className={`text-sm leading-relaxed mb-6 ${themeClasses.secondary}`}>\n              Crafting digital experiences at the intersection of innovation and security. \n              Building the future, one line of code at a time.\n            </p>\n\n            {/* Tech Stack Tags */}\n            <div className=\"flex flex-wrap gap-2\">\n              {techStack.slice(0, 5).map((tech, index) => (\n                <span \n                  key={index}\n                  className={`px-2 py-1 rounded text-xs font-medium ${\n                    currentTheme === 'light' ?'bg-blue-100 text-blue-800' :'bg-primary/20 text-primary'\n                  }`}\n                >\n                  {tech}\n                </span>\n              ))}\n              <span className={`px-2 py-1 rounded text-xs font-medium ${themeClasses.secondary}`}>\n                +{techStack.length - 5} more\n              </span>\n            </div>\n          </div>\n\n          {/* Footer Links */}\n          {footerLinks.map((section, index) => (\n            <div key={index}>\n              <h3 className={`font-heading font-bold text-lg mb-4 ${themeClasses.text}`}>\n                {section.title}\n              </h3>\n              <ul className=\"space-y-3\">\n                {section.links.map((link, linkIndex) => (\n                  <li key={linkIndex}>\n                    {link.external ? (\n                      <a\n                        href={link.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className={`\n                          ${themeClasses.link} text-sm transition-colors duration-fast\n                          hover:underline flex items-center space-x-2\n                        `}\n                      >\n                        <span>{link.name}</span>\n                        <Icon name=\"ExternalLink\" size={12} />\n                      </a>\n                    ) : (\n                      <Link\n                        to={link.href}\n                        className={`\n                          ${themeClasses.link} text-sm transition-colors duration-fast\n                          hover:underline\n                        `}\n                      >\n                        {link.name}\n                      </Link>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Stats Section */}\n        <div className={`border-t border-current border-opacity-20 pt-8 mb-8`}>\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n                50+\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Projects Completed\n              </div>\n            </div>\n            <div>\n              <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n                5+\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Years Experience\n              </div>\n            </div>\n            <div>\n              <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n                25+\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Open Source Repos\n              </div>\n            </div>\n            <div>\n              <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n                5.2K\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Community Followers\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className={`border-t border-current border-opacity-20 pt-8`}>\n          <div className=\"flex flex-col lg:flex-row justify-between items-center space-y-4 lg:space-y-0\">\n            {/* Copyright */}\n            <div className={`text-sm ${themeClasses.secondary} text-center lg:text-left`}>\n              <p>\n                © {currentYear} WisdomInTech. Built with love ❤️ by{' '}\n                <span className={`font-medium ${themeClasses.accent}`}>\n                  Mikael Kraft\n                </span>\n              </p>\n            </div>\n\n            {/* Social Links */}\n            <div className=\"flex items-center space-x-4\">\n              <a\n                href=\"https://x.com/mikael_kraft\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={`\n                  w-10 h-10 rounded-lg flex items-center justify-center transition-all duration-fast\n                  ${currentTheme === 'light' ? 'bg-gray-100 hover:bg-gray-200' : 'bg-surface/50 hover:bg-surface'}\n                  hover:scale-110\n                `}\n                aria-label=\"Follow on X (Twitter)\"\n              >\n                <Icon name=\"Twitter\" size={18} className={themeClasses.secondary} />\n              </a>\n              <a\n                href=\"https://linkedin.com/in/mikael-kraft\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={`\n                  w-10 h-10 rounded-lg flex items-center justify-center transition-all duration-fast\n                  ${currentTheme === 'light' ? 'bg-gray-100 hover:bg-gray-200' : 'bg-surface/50 hover:bg-surface'}\n                  hover:scale-110\n                `}\n                aria-label=\"Connect on LinkedIn\"\n              >\n                <Icon name=\"Linkedin\" size={18} className={themeClasses.secondary} />\n              </a>\n              <a\n                href=\"https://github.com/mikaelkraft\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={`\n                  w-10 h-10 rounded-lg flex items-center justify-center transition-all duration-fast\n                  ${currentTheme === 'light' ? 'bg-gray-100 hover:bg-gray-200' : 'bg-surface/50 hover:bg-surface'}\n                  hover:scale-110\n                `}\n                aria-label=\"View GitHub Profile\"\n              >\n                <Icon name=\"Github\" size={18} className={themeClasses.secondary} />\n              </a>\n            </div>\n          </div>\n\n          {/* Version Info */}\n          <div className={`text-center mt-6 text-xs ${themeClasses.secondary}`}>\n            <p>\n              Portfolio v2.0.0 • Last updated: {new Date().toLocaleDateString()} • \n              Powered by React & Vite\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Effects */}\n      {currentTheme !== 'light' && (\n        <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n          <div className=\"absolute bottom-0 left-1/4 w-64 h-64 bg-primary/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-secondary/5 rounded-full blur-3xl\"></div>\n        </div>\n      )}\n    </footer>\n  );\n};\n\nexport default DynamicFooter;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/FeaturedBlogPosts.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [52, 92], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [52, 93], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [52, 92], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [100, 110], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [93, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [100, 110], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [141, 191], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [148, 159], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 147,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [5474, 5481], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport blogService from '../../../utils/blogService';\n\nconst FeaturedBlogPosts = ({ currentTheme }) => {\n  const [featuredPosts, setFeaturedPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadFeaturedPosts = async () => {\n      try {\n        const res = await blogService.getFeaturedPosts();\n        if (res.success) {\n          setFeaturedPosts(res.data.slice(0, 3)); // Show only 3 featured posts\n        }\n      } catch (error) {\n        console.error('Failed to load featured posts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadFeaturedPosts();\n  }, []);\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-gradient-to-br from-purple-900/10 to-blue-900/10',\n          border: 'border-purple-500/20',\n          text: 'text-purple-200',\n          accent: 'text-purple-400',\n          cardBg: 'bg-purple-900/20 border-purple-500/30'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-gradient-to-br from-slate-900/10 to-blue-900/10',\n          border: 'border-blue-400/20',\n          text: 'text-blue-200',\n          accent: 'text-blue-400',\n          cardBg: 'bg-slate-900/20 border-blue-400/30'\n        };\n      case 'dark':\n        return {\n          bg: 'bg-gradient-to-br from-gray-900/10 to-blue-900/10',\n          border: 'border-blue-500/20',\n          text: 'text-blue-200',\n          accent: 'text-blue-400',\n          cardBg: 'bg-gray-900/20 border-blue-500/30'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gradient-to-br from-gray-50 to-blue-50',\n          border: 'border-gray-300',\n          text: 'text-gray-700',\n          accent: 'text-blue-600',\n          cardBg: 'bg-white border-gray-200 shadow-lg'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-gradient-to-br from-surface/10 to-primary/5',\n          border: 'border-primary/20',\n          text: 'text-text-primary',\n          accent: 'text-primary',\n          cardBg: 'bg-surface/20 border-primary/30'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  if (loading) {\n    return (\n      <section className={`py-20 ${themeClasses.bg} border-t ${themeClasses.border}`}>\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-surface/20 rounded w-64 mx-auto mb-4\"></div>\n              <div className=\"h-4 bg-surface/10 rounded w-96 mx-auto\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (!featuredPosts.length) {\n    return (\n      <section className={`py-20 ${themeClasses.bg} border-t ${themeClasses.border}`}>\n        <div className=\"max-w-7xl mx-auto px-6\">\n          {/* Section Header */}\n          <div className=\"text-center mb-12\">\n            <h2 className={`text-4xl font-heading font-bold ${themeClasses.text} mb-4`}>\n              Featured Insights\n            </h2>\n            <p className={`text-lg ${themeClasses.text} opacity-80 max-w-2xl mx-auto`}>\n              Latest thoughts on technology, development, and cybersecurity from the blog\n            </p>\n          </div>\n\n          {/* No Featured Posts Message */}\n          <div className=\"text-center py-12\">\n            <div className={`w-24 h-24 mx-auto mb-6 rounded-full ${themeClasses.cardBg} border flex items-center justify-center`}>\n              <Icon name=\"BookOpen\" size={32} className={themeClasses.accent} />\n            </div>\n            <h3 className={`font-heading font-semibold text-xl ${themeClasses.text} mb-4`}>\n              No Featured Posts Yet\n            </h3>\n            <p className={`${themeClasses.text} opacity-70 mb-6 max-w-md mx-auto`}>\n              Featured blog posts will appear here once you publish and feature blog posts in the admin dashboard.\n            </p>\n            <Link\n              to=\"/blog-content-hub\"\n              className={`inline-flex items-center px-6 py-3 ${themeClasses.cardBg} border rounded-lg font-medium transition-all duration-fast hover:scale-105 hover-glow-primary group`}\n            >\n              <span className={themeClasses.text}>Visit Blog</span>\n              <Icon\n                name=\"ArrowRight\"\n                size={16}\n                className={`ml-2 ${themeClasses.accent} group-hover:translate-x-1 transition-transform duration-fast`}\n              />\n            </Link>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className={`py-20 ${themeClasses.bg} border-t ${themeClasses.border}`}>\n      <div className=\"max-w-7xl mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className={`text-4xl font-heading font-bold ${themeClasses.text} mb-4`}>\n            Featured Insights\n          </h2>\n          <p className={`text-lg ${themeClasses.text} opacity-80 max-w-2xl mx-auto`}>\n            Latest thoughts on technology, development, and cybersecurity from the blog\n          </p>\n        </div>\n\n        {/* Featured Posts Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {featuredPosts.map((post, index) => (\n            <Link\n              key={post.id}\n              to={`/blog-content-hub/${post.slug}`}\n              className={`group block ${themeClasses.cardBg} border rounded-lg overflow-hidden hover:border-opacity-50 transition-all duration-fast hover:scale-105 hover-glow-primary`}\n            >\n              {/* Post Image */}\n              <div className=\"relative h-48 overflow-hidden\">\n                <Image\n                  src={post.featured_image || '/assets/images/blog-placeholder.jpg'}\n                  alt={post.title}\n                  className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-slow\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-background/60 via-transparent to-transparent\"></div>\n                \n                {/* Category Badge */}\n                {post.category && (\n                  <div className={`absolute top-3 left-3 px-2 py-1 rounded-full text-xs font-caption ${themeClasses.cardBg} backdrop-blur-sm`}>\n                    {post.category}\n                  </div>\n                )}\n              </div>\n\n              {/* Post Content */}\n              <div className=\"p-6\">\n                <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} group-hover:${themeClasses.accent} transition-colors duration-fast mb-3 line-clamp-2`}>\n                  {post.title}\n                </h3>\n\n                <p className={`${themeClasses.text} opacity-70 text-sm mb-4 line-clamp-3`}>\n                  {post.excerpt || post.content?.substring(0, 150) + '...'}\n                </p>\n\n                {/* Post Meta */}\n                <div className={`flex items-center justify-between text-xs ${themeClasses.text} opacity-60`}>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"Eye\" size={12} />\n                      <span>{post.view_count || 0}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"Heart\" size={12} />\n                      <span>{post.like_count || 0}</span>\n                    </div>\n                  </div>\n                  <span>\n                    {new Date(post.published_at || post.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n\n                {/* Tags */}\n                {post.tags && post.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mt-4\">\n                    {post.tags.slice(0, 3).map((tag, tagIndex) => (\n                      <span\n                        key={tagIndex}\n                        className={`px-2 py-1 ${themeClasses.accent} bg-opacity-10 rounded-full text-xs font-caption border border-current border-opacity-20`}\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {post.tags.length > 3 && (\n                      <span className={`px-2 py-1 ${themeClasses.text} opacity-50 text-xs`}>\n                        +{post.tags.length - 3}\n                      </span>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Link>\n          ))}\n        </div>\n\n        {/* View All Blog Posts Button */}\n        <div className=\"text-center\">\n          <Link\n            to=\"/blog-content-hub\"\n            className={`inline-flex items-center px-8 py-4 ${themeClasses.cardBg} border rounded-lg font-medium transition-all duration-fast hover:scale-105 hover-glow-primary group`}\n          >\n            <span className={themeClasses.text}>View All Blog Posts</span>\n            <Icon\n              name=\"ArrowRight\"\n              size={20}\n              className={`ml-2 ${themeClasses.accent} group-hover:translate-x-1 transition-transform duration-fast`}\n            />\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeaturedBlogPosts;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/HeroSection.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [52, 100], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [107, 118], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [100, 150], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [107, 118], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 33,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The 'phrases' array makes the dependencies of useEffect Hook (at line 81) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'phrases' in its own useMemo() Hook.",
        "line": 53,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 59,
        "endColumn": 4
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'getThemeClasses' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "getThemeClasses" },
            "fix": { "range": [2574, 3075], "text": "" },
            "desc": "Remove unused variable 'getThemeClasses'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport settingsService from '../../../utils/settingsService';\n\nconst HeroSection = ({ currentTheme }) => {\n  const [typedText, setTypedText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [settings, setSettings] = useState({});\n\n  useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        const res = await settingsService.getSettings();\n        if (res.success) {\n          setSettings(res.data);\n        }\n      } catch (error) {\n        console.error('Failed to load settings:', error);\n      }\n    };\n    loadSettings();\n  }, []);\n\n  // Utility to extract filename from URL\n  const getFilenameFromUrl = (url) => {\n    try {\n      const urlObj = new URL(url, window.location.origin);\n      const pathname = urlObj.pathname;\n      const filename = pathname.substring(pathname.lastIndexOf('/') + 1) || 'resume.pdf';\n      return filename;\n    } catch (e) {\n      return 'resume.pdf';\n    }\n  };\n\n  const handleDownloadResume = () => {\n    if (settings.resumeUrl) {\n      // Determine filename: use settings.resumeFilename if available, else derive from URL\n      const filename = settings.resumeFilename || getFilenameFromUrl(settings.resumeUrl);\n      // Create a temporary link element to trigger download\n      const link = document.createElement('a');\n      link.href = settings.resumeUrl;\n      link.download = filename;\n      link.target = '_blank';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const phrases = [\n    \"React Developer\",\n    \"Node.js Developer\", \n    \"Full-Stack Engineer\",\n    \"JavaScript Expert\",\n    \"React Specialist\"\n  ];\n\n  useEffect(() => {\n    const typeSpeed = isDeleting ? 50 : 100;\n    const currentPhrase = phrases[currentIndex];\n    \n    const timeout = setTimeout(() => {\n      if (!isDeleting && typedText === currentPhrase) {\n        setTimeout(() => setIsDeleting(true), 2000);\n      } else if (isDeleting && typedText === '') {\n        setIsDeleting(false);\n        setCurrentIndex((prev) => (prev + 1) % phrases.length);\n      } else {\n        setTypedText(prev => \n          isDeleting \n            ? prev.slice(0, -1)\n            : currentPhrase.slice(0, prev.length + 1)\n        );\n      }\n    }, typeSpeed);\n\n    return () => clearTimeout(timeout);\n  }, [typedText, currentIndex, isDeleting, phrases]);\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return 'bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-500/30';\n      case 'futuristic':\n        return 'bg-gradient-to-br from-slate-900/20 to-blue-900/20 border-blue-400/30';\n      case 'light':\n        return 'bg-gradient-to-br from-gray-50 to-blue-50 border-gray-300';\n      default: // cyberpunk\n        return 'bg-gradient-to-br from-surface/20 to-primary/5 border-primary/30';\n    }\n  };\n\n  const getTextClasses = () => {\n    switch(currentTheme) {\n      case 'light':\n        return {\n          primary: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600'\n        };\n      default:\n        return {\n          primary: 'text-text-primary',\n          secondary: 'text-text-secondary', \n          accent: 'text-primary'\n        };\n    }\n  };\n\n  const textColors = getTextClasses();\n\n  return (\n    <section className={`min-h-screen flex items-center justify-center px-6 py-20 relative overflow-hidden ${currentTheme === 'light' ? 'bg-white' : 'bg-background'}`}>\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {currentTheme !== 'light' && (\n          <>\n            <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-primary/5 rounded-full blur-3xl animate-pulse\"></div>\n            <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-secondary/5 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-full cyber-grid opacity-10\"></div>\n          </>\n        )}\n      </div>\n\n      <div className=\"max-w-6xl mx-auto text-center relative z-10\">\n        {/* Profile Image */}\n  <div className=\"mt-8 md:mt-16 mb-8 flex justify-center\">\n          <div className={`relative w-32 h-32 lg:w-40 lg:h-40 rounded-full overflow-hidden border-4 ${currentTheme === 'light' ? 'border-blue-200' : 'border-primary/50'} hover-glow-primary transition-all duration-normal`}>\n            <Image \n              src={settings.heroImageUrl || settings.hero_image_url || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face\"}\n              alt=\"Mikael Kraft - Full Stack Developer\"\n              className=\"w-full h-full object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-primary/20 to-transparent\"></div>\n          </div>\n        </div>\n\n        {/* Main Heading */}\n        <h1 className={`font-heading text-4xl lg:text-6xl xl:text-7xl font-bold mb-6 ${textColors.primary}`}>\n          <span className=\"block\">Mikael</span>\n          <span className={`block bg-gradient-to-r ${currentTheme === 'light' ? 'from-blue-600 to-purple-600' : 'from-primary to-secondary'} bg-clip-text text-transparent`}>\n            Kraft\n          </span>\n        </h1>\n\n        {/* Typing Animation */}\n        <div className=\"mb-8 h-16 flex items-center justify-center\">\n          <h2 className={`font-heading text-xl lg:text-2xl xl:text-3xl ${textColors.accent}`}>\n            {typedText}\n            <span className=\"animate-pulse\">|</span>\n          </h2>\n        </div>\n\n        {/* Description */}\n        <div className={`max-w-4xl mx-auto mb-12 space-y-4 ${textColors.secondary}`}>\n          <p className=\"text-lg lg:text-xl leading-relaxed\">\n            Crafting exceptional web applications with React and Node.js.\n            I focus on building scalable, performant solutions that deliver \n            outstanding user experiences through modern JavaScript technologies.\n          </p>\n          <p className=\"text-base lg:text-lg\">\n            From interactive React frontends to robust Node.js backends, I create \n            full-stack applications that seamlessly connect users with technology.\n          </p>\n        </div>\n\n        {/* CTA Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-16\">\n          <button className={`\n            px-8 py-4 rounded-lg font-medium text-lg transition-all duration-fast\n            ${currentTheme === 'light' ?'bg-blue-600 text-white hover:bg-blue-700 shadow-lg hover:shadow-xl' :'bg-primary text-background hover:bg-primary/90 glow-primary hover:shadow-glow-primary'\n            }\n            min-h-[48px] min-w-[160px]\n          `}>\n            <Icon name=\"FolderOpen\" size={20} className=\"inline mr-2\" />\n            View Projects\n          </button>\n          <button \n            onClick={handleDownloadResume}\n            disabled={!settings.resumeUrl}\n            className={`\n              px-8 py-4 rounded-lg font-medium text-lg transition-all duration-fast border-2\n              ${!settings.resumeUrl ? 'opacity-50 cursor-not-allowed' : ''}\n              ${currentTheme === 'light' ?'border-blue-600 text-blue-600 hover:bg-blue-50' :'border-primary text-primary hover:bg-primary/10'\n              }\n              min-h-[48px] min-w-[160px]\n            `}\n          >\n            <Icon name=\"Download\" size={20} className=\"inline mr-2\" />\n            Download CV\n          </button>\n        </div>\n\n        {/* Scroll Indicator */}\n        <div className=\"flex justify-center\">\n          <div className={`animate-bounce ${textColors.secondary}`}>\n            <Icon name=\"ChevronDown\" size={24} />\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Elements */}\n      {currentTheme !== 'light' && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"absolute top-20 left-10 text-primary/20 animate-pulse\">\n            <Icon name=\"Code\" size={32} />\n          </div>\n          <div className=\"absolute top-40 right-20 text-secondary/20 animate-pulse delay-500\">\n            <Icon name=\"Shield\" size={28} />\n          </div>\n          <div className=\"absolute bottom-40 left-20 text-accent/20 animate-pulse delay-1000\">\n            <Icon name=\"Database\" size={30} />\n          </div>\n          <div className=\"absolute bottom-20 right-10 text-primary/20 animate-pulse delay-1500\">\n            <Icon name=\"Cpu\" size={26} />\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default HeroSection;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/NewsletterSubscription.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [41, 89], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [48, 58], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [89, 141], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [96, 108], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 89,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport newsletterService from '../../../utils/newsletterService';\n\nconst NewsletterSubscription = ({ currentTheme }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-gradient-to-br from-purple-900/10 to-blue-900/10',\n          border: 'border-purple-500/20',\n          text: 'text-purple-200',\n          accent: 'text-purple-400',\n          cardBg: 'bg-purple-900/20 border-purple-500/30',\n          input: 'bg-purple-900/30 border-purple-500/30 text-purple-100 placeholder-purple-300/70 focus:border-purple-400'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-gradient-to-br from-slate-900/10 to-blue-900/10',\n          border: 'border-blue-400/20',\n          text: 'text-blue-200',\n          accent: 'text-blue-400',\n          cardBg: 'bg-slate-900/20 border-blue-400/30',\n          input: 'bg-slate-900/30 border-blue-400/30 text-blue-100 placeholder-blue-300/70 focus:border-blue-400'\n        };\n      case 'dark':\n        return {\n          bg: 'bg-gradient-to-br from-gray-900/10 to-blue-900/10',\n          border: 'border-blue-500/20',\n          text: 'text-blue-200',\n          accent: 'text-blue-400',\n          cardBg: 'bg-gray-900/20 border-blue-500/30',\n          input: 'bg-gray-900/30 border-blue-500/30 text-blue-100 placeholder-blue-300/70 focus:border-blue-400'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gradient-to-br from-gray-50 to-blue-50',\n          border: 'border-gray-300',\n          text: 'text-gray-700',\n          accent: 'text-blue-600',\n          cardBg: 'bg-white border-gray-200 shadow-lg',\n          input: 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-gradient-to-br from-surface/10 to-primary/5',\n          border: 'border-primary/20',\n          text: 'text-text-primary',\n          accent: 'text-primary',\n          cardBg: 'bg-surface/20 border-primary/30',\n          input: 'bg-surface/30 border-primary/30 text-text-primary placeholder-text-secondary focus:border-primary'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!email) {\n      setMessage('Email is required');\n      setSuccess(false);\n      return;\n    }\n\n    setLoading(true);\n    setMessage('');\n\n    try {\n      const result = await newsletterService.subscribe(email, name);\n      \n      if (result.success) {\n        setMessage('Successfully subscribed to newsletter!');\n        setSuccess(true);\n        setEmail('');\n        setName('');\n      } else {\n        setMessage(result.error || 'Failed to subscribe');\n        setSuccess(false);\n      }\n    } catch (error) {\n      setMessage('An error occurred. Please try again.');\n      setSuccess(false);\n    } finally {\n      setLoading(false);\n    }\n\n    // Clear message after 5 seconds\n    setTimeout(() => {\n      setMessage('');\n      setSuccess(false);\n    }, 5000);\n  };\n\n  return (\n    <section className={`py-20 ${themeClasses.bg} border-t ${themeClasses.border}`}>\n      <div className=\"max-w-4xl mx-auto px-6\">\n        <div className={`${themeClasses.cardBg} border rounded-xl p-8 md:p-12 text-center`}>\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className={`w-16 h-16 mx-auto mb-6 rounded-full ${themeClasses.cardBg} border flex items-center justify-center`}>\n              <Icon name=\"Mail\" size={32} className={themeClasses.accent} />\n            </div>\n            <h2 className={`text-3xl md:text-4xl font-heading font-bold ${themeClasses.text} mb-4`}>\n              Stay Updated\n            </h2>\n            <p className={`text-lg ${themeClasses.text} opacity-80 max-w-2xl mx-auto`}>\n              Get the latest insights on technology, cybersecurity, and development directly in your inbox. \n              Join developers from around the world.\n            </p>\n          </div>\n\n          {/* Subscription Form */}\n          <form onSubmit={handleSubmit} className=\"max-w-md mx-auto space-y-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Your name (optional)\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className={`flex-1 px-4 py-3 rounded-lg border ${themeClasses.input} focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-all duration-fast`}\n                disabled={loading}\n              />\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className={`flex-1 px-4 py-3 rounded-lg border ${themeClasses.input} focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-all duration-fast`}\n                required\n                disabled={loading}\n              />\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                disabled={loading}\n                className=\"whitespace-nowrap\"\n                iconName={loading ? \"Loader2\" : \"Send\"}\n                iconPosition=\"right\"\n              >\n                {loading ? 'Subscribing...' : 'Subscribe'}\n              </Button>\n            </div>\n\n            {/* Message */}\n            {message && (\n              <div className={`p-4 rounded-lg border text-sm ${\n                success \n                  ? 'bg-green-500/10 border-green-500/30 text-green-400' \n                  : 'bg-red-500/10 border-red-500/30 text-red-400'\n              }`}>\n                <div className=\"flex items-center gap-2\">\n                  <Icon \n                    name={success ? \"CheckCircle\" : \"AlertCircle\"} \n                    size={16} \n                    className={success ? \"text-green-400\" : \"text-red-400\"} \n                  />\n                  {message}\n                </div>\n              </div>\n            )}\n          </form>\n\n          {/* Features */}\n          <div className=\"mt-8 pt-8 border-t border-opacity-20 border-current\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n              <div className=\"flex flex-col items-center\">\n                <div className={`w-10 h-10 rounded-full ${themeClasses.cardBg} border flex items-center justify-center mb-3`}>\n                  <Icon name=\"Zap\" size={16} className={themeClasses.accent} />\n                </div>\n                <h4 className={`font-semibold ${themeClasses.text} mb-1`}>Weekly Insights</h4>\n                <p className={`text-sm ${themeClasses.text} opacity-70`}>Latest tech trends and tutorials</p>\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className={`w-10 h-10 rounded-full ${themeClasses.cardBg} border flex items-center justify-center mb-3`}>\n                  <Icon name=\"Shield\" size={16} className={themeClasses.accent} />\n                </div>\n                <h4 className={`font-semibold ${themeClasses.text} mb-1`}>No Spam</h4>\n                <p className={`text-sm ${themeClasses.text} opacity-70`}>Unsubscribe anytime, privacy protected</p>\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className={`w-10 h-10 rounded-full ${themeClasses.cardBg} border flex items-center justify-center mb-3`}>\n                  <Icon name=\"Users\" size={16} className={themeClasses.accent} />\n                </div>\n                <h4 className={`font-semibold ${themeClasses.text} mb-1`}>Join 2.5K+</h4>\n                <p className={`text-sm ${themeClasses.text} opacity-70`}>Developers and tech enthusiasts</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default NewsletterSubscription;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/ProjectCarousel.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [67, 77], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [60, 108], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [67, 77], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [115, 126], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [108, 158], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [115, 126], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'defaultProjects'. Either include it or remove the dependency array.",
        "line": 32,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 32,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [defaultProjects]",
            "fix": { "range": [1131, 1133], "text": "[defaultProjects]" }
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 237,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 237,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [9073, 9080], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useState, useEffect, useRef } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport settingsService from '../../../utils/settingsService';\n\nconst ProjectCarousel = ({ currentTheme }) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(true);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const intervalRef = useRef(null);\n\n  // Load projects from settings\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const res = await settingsService.getSettings();\n        if (res.success && res.data.ui?.demo_projects?.length) {\n          setProjects(res.data.ui.demo_projects);\n        } else {\n          // Fallback to default projects if none configured\n          setProjects(defaultProjects);\n        }\n      } catch (error) {\n        console.error('Failed to load demo projects:', error);\n        setProjects(defaultProjects);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadProjects();\n  }, []);\n\n  const defaultProjects = [\n    {\n      id: 1,\n      title: \"CyberSecure Banking Platform\",\n      description: \"Next-generation banking application with advanced encryption and blockchain integration for secure transactions.\",\n      image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800&h=600&fit=crop\",\n      tech: [\"React\", \"Node.js\", \"Blockchain\", \"PostgreSQL\"],\n      status: \"Live\",\n      category: \"FinTech\"\n    },\n    {\n      id: 2,\n      title: \"Neural Network Analytics\",\n      description: \"AI-powered data analytics platform using machine learning algorithms for predictive business intelligence.\",\n      image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=600&fit=crop\",\n      tech: [\"Python\", \"TensorFlow\", \"React\", \"MongoDB\"],\n      status: \"Development\",\n      category: \"AI/ML\"\n    },\n    {\n      id: 3,\n      title: \"Quantum Cryptography Suite\",\n      description: \"Advanced cryptographic tools leveraging quantum computing principles for next-level data protection.\",\n      image: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=800&h=600&fit=crop\",\n      tech: [\"Java\", \"Quantum SDK\", \"Spring Boot\", \"Redis\"],\n      status: \"Research\",\n      category: \"Security\"\n    },\n    {\n      id: 4,\n      title: \"DeFi Trading Platform\",\n      description: \"Decentralized finance platform enabling secure cryptocurrency trading with smart contract automation.\",\n      image: \"https://images.unsplash.com/photo-1639762681485-074b7f938ba0?w=800&h=600&fit=crop\",\n      tech: [\"Solidity\", \"Web3.js\", \"React\", \"IPFS\"],\n      status: \"Beta\",\n      category: \"Blockchain\"\n    },\n    {\n      id: 5,\n      title: \"IoT Security Framework\",\n      description: \"Comprehensive security framework for Internet of Things devices with real-time threat detection.\",\n      image: \"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=600&fit=crop\",\n      tech: [\"C++\", \"Python\", \"Docker\", \"Kubernetes\"],\n      status: \"Live\",\n      category: \"IoT\"\n    }\n  ];\n\n  useEffect(() => {\n    if (isAutoPlaying && projects.length > 0 && !loading) {\n      intervalRef.current = setInterval(() => {\n        setCurrentSlide(prev => (prev + 1) % projects.length);\n      }, 4000);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isAutoPlaying, projects.length, loading]);\n\n  const goToSlide = (index) => {\n    setCurrentSlide(index);\n    setIsAutoPlaying(false);\n    setTimeout(() => setIsAutoPlaying(true), 5000);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide(prev => (prev + 1) % projects.length);\n    setIsAutoPlaying(false);\n    setTimeout(() => setIsAutoPlaying(true), 5000);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide(prev => (prev - 1 + projects.length) % projects.length);\n    setIsAutoPlaying(false);\n    setTimeout(() => setIsAutoPlaying(true), 5000);\n  };\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/10',\n          card: 'bg-purple-900/20 border-purple-500/30',\n          text: 'text-purple-100',\n          accent: 'text-purple-400'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/10',\n          card: 'bg-slate-900/20 border-blue-400/30',\n          text: 'text-blue-100',\n          accent: 'text-blue-400'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gray-50',\n          card: 'bg-white border-gray-200 shadow-lg',\n          text: 'text-gray-900',\n          accent: 'text-blue-600'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-surface/10',\n          card: 'bg-surface/20 border-primary/30',\n          text: 'text-text-primary',\n          accent: 'text-primary'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  if (loading) {\n    return (\n      <section className={`py-20 px-6 ${currentTheme === 'light' ? 'bg-gray-50' : 'bg-background'}`}>\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-surface/20 rounded w-64 mx-auto mb-4\"></div>\n              <div className=\"h-4 bg-surface/10 rounded w-96 mx-auto\"></div>\n            </div>\n          </div>\n          <div className={`${themeClasses.card} rounded-2xl border-2 overflow-hidden animate-pulse`}>\n            <div className=\"grid lg:grid-cols-2 gap-8 p-8\">\n              <div className=\"aspect-video rounded-xl bg-surface/20\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-6 bg-surface/20 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-surface/10 rounded w-full\"></div>\n                <div className=\"h-4 bg-surface/10 rounded w-2/3\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (projects.length === 0) {\n    return (\n      <section className={`py-20 px-6 ${currentTheme === 'light' ? 'bg-gray-50' : 'bg-background'}`}>\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n              Featured Projects\n            </h2>\n            <p className={`text-lg max-w-2xl mx-auto ${currentTheme === 'light' ? 'text-gray-600' : 'text-text-secondary'}`}>\n              Showcase projects will appear here once you add them in the admin dashboard\n            </p>\n          </div>\n          <div className=\"text-center py-12\">\n            <div className={`w-24 h-24 mx-auto mb-6 rounded-full ${themeClasses.card} border-2 flex items-center justify-center`}>\n              <Icon name=\"FolderOpen\" size={32} className={themeClasses.accent} />\n            </div>\n            <h3 className={`font-heading font-semibold text-xl ${themeClasses.text} mb-4`}>\n              No Demo Projects Yet\n            </h3>\n            <p className={`${currentTheme === 'light' ? 'text-gray-600' : 'text-text-secondary'} mb-6 max-w-md mx-auto`}>\n              Add demo projects in the admin dashboard to showcase your work here.\n            </p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const getStatusColor = (status) => {\n    switch(status) {\n      case 'Live':\n        return currentTheme === 'light' ? 'text-green-600 bg-green-100' : 'text-accent bg-accent/20';\n      case 'Beta':\n        return currentTheme === 'light' ? 'text-blue-600 bg-blue-100' : 'text-primary bg-primary/20';\n      case 'Development':\n        return currentTheme === 'light' ? 'text-orange-600 bg-orange-100' : 'text-warning bg-warning/20';\n      case 'Research':\n        return currentTheme === 'light' ? 'text-purple-600 bg-purple-100' : 'text-secondary bg-secondary/20';\n      default:\n        return currentTheme === 'light' ? 'text-gray-600 bg-gray-100' : 'text-text-secondary bg-text-secondary/20';\n    }\n  };\n\n  return (\n    <section className={`py-20 px-6 ${currentTheme === 'light' ? 'bg-gray-50' : 'bg-background'}`}>\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n            Featured Projects\n          </h2>\n          <p className={`text-lg max-w-2xl mx-auto ${currentTheme === 'light' ? 'text-gray-600' : 'text-text-secondary'}`}>\n            Explore my latest work spanning blockchain, AI, cybersecurity, and full-stack development\n          </p>\n        </div>\n\n        {/* Carousel Container */}\n        <div className=\"relative\">\n          <div className=\"overflow-hidden rounded-2xl\">\n            <div \n              className=\"flex transition-transform duration-500 ease-in-out\"\n              style={{ transform: `translateX(-${currentSlide * 100}%)` }}\n            >\n              {projects.map((project, index) => (\n                <div key={project.id} className=\"w-full flex-shrink-0\">\n                  <div className={`${themeClasses.card} rounded-2xl border-2 overflow-hidden`}>\n                    <div className=\"grid lg:grid-cols-2 gap-8 p-8\">\n                      {/* Project Image */}\n                      <div className=\"relative group\">\n                        <div className=\"aspect-video rounded-xl overflow-hidden\">\n                          <Image \n                            src={project.image}\n                            alt={project.title}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-slow\"\n                          />\n                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-fast\"></div>\n                        </div>\n                        \n                        {/* Status Badge */}\n                        <div className={`absolute top-4 right-4 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(project.status)}`}>\n                          {project.status}\n                        </div>\n                      </div>\n\n                      {/* Project Details */}\n                      <div className=\"flex flex-col justify-center space-y-6\">\n                        <div>\n                          <div className={`text-sm font-medium mb-2 ${themeClasses.accent}`}>\n                            {project.category}\n                          </div>\n                          <h3 className={`font-heading text-2xl lg:text-3xl font-bold mb-4 ${themeClasses.text}`}>\n                            {project.title}\n                          </h3>\n                          <p className={`text-lg leading-relaxed ${currentTheme === 'light' ? 'text-gray-600' : 'text-text-secondary'}`}>\n                            {project.description}\n                          </p>\n                        </div>\n\n                        {/* Tech Stack */}\n                        <div>\n                          <h4 className={`font-medium mb-3 ${themeClasses.text}`}>\n                            Technologies Used\n                          </h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {project.tech.map((tech, techIndex) => (\n                              <span \n                                key={techIndex}\n                                className={`px-3 py-1 rounded-full text-sm font-medium ${\n                                  currentTheme === 'light' ?'bg-blue-100 text-blue-800' :'bg-primary/20 text-primary'\n                                }`}\n                              >\n                                {tech}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Action Buttons */}\n                        <div className=\"flex gap-4\">\n                          <button className={`\n                            px-6 py-3 rounded-lg font-medium transition-all duration-fast\n                            ${currentTheme === 'light' ?'bg-blue-600 text-white hover:bg-blue-700' :'bg-primary text-background hover:bg-primary/90 glow-primary'\n                            }\n                            min-h-[44px]\n                          `}>\n                            <Icon name=\"ExternalLink\" size={18} className=\"inline mr-2\" />\n                            View Project\n                          </button>\n                          <button className={`\n                            px-6 py-3 rounded-lg font-medium border-2 transition-all duration-fast\n                            ${currentTheme === 'light' ?'border-gray-300 text-gray-700 hover:bg-gray-50' :'border-primary/50 text-primary hover:bg-primary/10'\n                            }\n                            min-h-[44px]\n                          `}>\n                            <Icon name=\"Github\" size={18} className=\"inline mr-2\" />\n                            Source Code\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Navigation Arrows */}\n          <button \n            onClick={prevSlide}\n            className={`\n              absolute left-4 top-1/2 transform -translate-y-1/2 w-12 h-12 rounded-full\n              flex items-center justify-center transition-all duration-fast\n              ${currentTheme === 'light' ?'bg-white shadow-lg text-gray-700 hover:bg-gray-50' :'bg-surface/80 text-text-primary hover:bg-surface glow-primary'\n              }\n            `}\n            aria-label=\"Previous project\"\n          >\n            <Icon name=\"ChevronLeft\" size={24} />\n          </button>\n          \n          <button \n            onClick={nextSlide}\n            className={`\n              absolute right-4 top-1/2 transform -translate-y-1/2 w-12 h-12 rounded-full\n              flex items-center justify-center transition-all duration-fast\n              ${currentTheme === 'light' ?'bg-white shadow-lg text-gray-700 hover:bg-gray-50' :'bg-surface/80 text-text-primary hover:bg-surface glow-primary'\n              }\n            `}\n            aria-label=\"Next project\"\n          >\n            <Icon name=\"ChevronRight\" size={24} />\n          </button>\n        </div>\n\n        {/* Slide Indicators */}\n        <div className=\"flex justify-center mt-8 space-x-2\">\n          {projects.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => goToSlide(index)}\n              className={`\n                w-3 h-3 rounded-full transition-all duration-fast\n                ${index === currentSlide \n                  ? (currentTheme === 'light' ? 'bg-blue-600' : 'bg-primary') \n                  : (currentTheme === 'light' ? 'bg-gray-300' : 'bg-text-secondary/30')\n                }\n              `}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n\n        {/* Auto-play Control */}\n        <div className=\"flex justify-center mt-6\">\n          <button\n            onClick={() => setIsAutoPlaying(!isAutoPlaying)}\n            className={`\n              flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all duration-fast\n              ${currentTheme === 'light' ?'text-gray-600 hover:text-gray-800 hover:bg-gray-100' :'text-text-secondary hover:text-text-primary hover:bg-surface/50'\n              }\n            `}\n          >\n            <Icon name={isAutoPlaying ? \"Pause\" : \"Play\"} size={16} />\n            <span className=\"text-sm\">\n              {isAutoPlaying ? \"Pause\" : \"Play\"} Slideshow\n            </span>\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ProjectCarousel;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/ProjectShowcase.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [52, 100], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [107, 118], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [100, 150], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [107, 118], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'LogoCarousel' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogoCarousel" },
            "fix": { "range": [157, 175], "text": "" },
            "desc": "Remove unused variable 'LogoCarousel'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'LogoCarousel' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 20,
        "fix": { "range": [150, 215], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogoCarousel" },
            "fix": { "range": [157, 175], "text": "" },
            "desc": "Remove unused variable 'LogoCarousel'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 96,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [3109, 3116], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport LogoCarousel from '../../../components/ui/LogoCarousel';\n\nconst ProjectShowcase = ({ currentTheme }) => {\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [activeFilter, setActiveFilter] = useState('all');\n\n  // Load projects from API\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const response = await fetch('/api/projects?limit=100');\n        if (response.ok) {\n          const projectsData = await response.json();\n          setProjects(projectsData);\n        }\n      } catch (error) {\n        console.error('Failed to load projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadProjects();\n  }, []);\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/5',\n          card: 'bg-purple-900/20 border-purple-500/30 hover:border-purple-400/50',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400',\n          button: 'bg-purple-600 hover:bg-purple-700',\n          filter: 'hover:bg-purple-500/20'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/5',\n          card: 'bg-slate-900/20 border-blue-400/30 hover:border-blue-300/50',\n          text: 'text-slate-100',\n          secondary: 'text-slate-300',\n          accent: 'text-blue-400',\n          button: 'bg-blue-600 hover:bg-blue-700',\n          filter: 'hover:bg-blue-500/20'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gray-50',\n          card: 'bg-white border-gray-200 hover:border-gray-300 shadow-sm hover:shadow-md',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600',\n          button: 'bg-blue-600 hover:bg-blue-700',\n          filter: 'hover:bg-gray-100'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-background/5',\n          card: 'bg-surface/20 border-primary/30 hover:border-primary/50 hover:glow-primary-sm',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary',\n          button: 'bg-primary hover:bg-primary/90',\n          filter: 'hover:bg-primary/20'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  // Filter projects by type\n  const filterProjects = (type) => {\n    if (type === 'all') return projects;\n    return projects.filter(project => project.type === type);\n  };\n\n  const filteredProjects = filterProjects(activeFilter);\n\n  // Get project type icon\n  const getProjectTypeIcon = (type) => {\n    switch(type) {\n      case 'video': return 'Video';\n      case 'gallery': return 'Images';\n      case 'logo_gallery': return 'Palette';\n      default: return 'Image';\n    }\n  };\n\n  // Render project based on type\n  const renderProject = (project, index) => {\n    if (project.type === 'logo_gallery') {\n      return (\n        <div\n          key={project.id}\n          className={`${themeClasses.card} rounded-xl border-2 overflow-hidden transition-all duration-300 cursor-pointer group`}\n          onClick={() => setSelectedProject(project)}\n        >\n          <div className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} group-hover:${themeClasses.accent} transition-colors`}>\n                {project.title}\n              </h3>\n              <div className={`p-2 rounded-lg ${themeClasses.button} text-white`}>\n                <Icon name={getProjectTypeIcon(project.type)} size={20} />\n              </div>\n            </div>\n            <p className={`${themeClasses.secondary} text-sm mb-4 line-clamp-2`}>\n              {project.description}\n            </p>\n            {project.gallery_images && project.gallery_images.length > 0 && (\n              <div className=\"mb-4\">\n                <LogoCarousel \n                  images={project.gallery_images} \n                  autoPlay={true} \n                  speed={2000}\n                />\n              </div>\n            )}\n            <div className=\"flex items-center justify-between\">\n              <span className={`text-xs px-2 py-1 rounded-full bg-${themeClasses.accent}/20 ${themeClasses.accent}`}>\n                {project.category || 'Design'}\n              </span>\n              <span className={`text-xs ${themeClasses.secondary}`}>\n                Click to view\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (project.type === 'video') {\n      return (\n        <div\n          key={project.id}\n          className={`${themeClasses.card} rounded-xl border-2 overflow-hidden transition-all duration-300 cursor-pointer group`}\n          onClick={() => setSelectedProject(project)}\n        >\n          <div className=\"relative aspect-video\">\n            {project.video_poster ? (\n              <Image\n                src={project.video_poster}\n                alt={project.title}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : project.featured_image ? (\n              <Image\n                src={project.featured_image}\n                alt={project.title}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className={`w-full h-full ${themeClasses.bg} flex items-center justify-center`}>\n                <Icon name=\"Video\" size={48} className={themeClasses.secondary} />\n              </div>\n            )}\n            <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\n              <div className={`p-3 rounded-full ${themeClasses.button} text-white`}>\n                <Icon name=\"Play\" size={24} />\n              </div>\n            </div>\n          </div>\n          <div className=\"p-4\">\n            <h3 className={`font-heading font-semibold ${themeClasses.text} mb-2`}>\n              {project.title}\n            </h3>\n            <p className={`${themeClasses.secondary} text-sm line-clamp-2`}>\n              {project.description}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // Default gallery/image project\n    return (\n      <div\n        key={project.id}\n        className={`${themeClasses.card} rounded-xl border-2 overflow-hidden transition-all duration-300 cursor-pointer group`}\n        onClick={() => setSelectedProject(project)}\n      >\n        <div className=\"relative aspect-video\">\n          {project.featured_image ? (\n            <Image\n              src={project.featured_image}\n              alt={project.title}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-500\"\n            />\n          ) : (\n            <div className={`w-full h-full ${themeClasses.bg} flex items-center justify-center`}>\n              <Icon name=\"Image\" size={48} className={themeClasses.secondary} />\n            </div>\n          )}\n        </div>\n        <div className=\"p-4\">\n          <h3 className={`font-heading font-semibold ${themeClasses.text} mb-2`}>\n            {project.title}\n          </h3>\n          <p className={`${themeClasses.secondary} text-sm line-clamp-2`}>\n            {project.description}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <section className={`py-20 px-6 ${themeClasses.bg}`}>\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-surface/20 rounded w-64 mx-auto mb-4\"></div>\n              <div className=\"h-4 bg-surface/10 rounded w-96 mx-auto\"></div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map(i => (\n              <div key={i} className={`${themeClasses.card} rounded-xl border-2 overflow-hidden animate-pulse`}>\n                <div className=\"aspect-video bg-surface/20\"></div>\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-4 bg-surface/20 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-surface/10 rounded w-full\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (projects.length === 0) {\n    return (\n      <section className={`py-20 px-6 ${themeClasses.bg}`}>\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n              Project Showcase\n            </h2>\n            <p className={`text-lg max-w-2xl mx-auto ${themeClasses.secondary}`}>\n              Video projects, image galleries, and logo designs will appear here once you create them\n            </p>\n          </div>\n          <div className=\"text-center py-12\">\n            <div className={`w-24 h-24 mx-auto mb-6 rounded-full ${themeClasses.card} border-2 flex items-center justify-center`}>\n              <Icon name=\"FolderOpen\" size={32} className={themeClasses.accent} />\n            </div>\n            <h3 className={`font-heading font-semibold text-xl ${themeClasses.text} mb-4`}>\n              No Projects Yet\n            </h3>\n            <p className={`${themeClasses.secondary} mb-6 max-w-md mx-auto`}>\n              Create video projects, image galleries, and logo showcases in the admin dashboard to display them here.\n            </p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <>\n      <section className={`py-20 px-6 ${themeClasses.bg}`}>\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Section Header */}\n          <div className=\"text-center mb-16\">\n            <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n              Project Showcase\n            </h2>\n            <p className={`text-lg max-w-2xl mx-auto ${themeClasses.secondary}`}>\n              Explore my diverse portfolio including video projects, image galleries, and logo designs\n            </p>\n          </div>\n\n          {/* Filter Tabs */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {[\n              { key: 'all', label: 'All Projects', icon: 'Grid' },\n              { key: 'video', label: 'Videos', icon: 'Video' },\n              { key: 'gallery', label: 'Galleries', icon: 'Images' },\n              { key: 'logo_gallery', label: 'Logo Designs', icon: 'Palette' }\n            ].map(filter => (\n              <button\n                key={filter.key}\n                onClick={() => setActiveFilter(filter.key)}\n                className={`flex items-center gap-2 px-6 py-3 rounded-lg border-2 transition-all duration-300 ${\n                  activeFilter === filter.key\n                    ? `${themeClasses.button} text-white border-transparent`\n                    : `${themeClasses.card} ${themeClasses.text} ${themeClasses.filter}`\n                }`}\n              >\n                <Icon name={filter.icon} size={18} />\n                <span className=\"font-medium\">{filter.label}</span>\n                {filter.key !== 'all' && (\n                  <span className={`text-xs px-2 py-1 rounded-full ${\n                    activeFilter === filter.key \n                      ? 'bg-white/20' \n                      : `bg-${themeClasses.accent}/20 ${themeClasses.accent}`\n                  }`}>\n                    {filterProjects(filter.key).length}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n\n          {/* Projects Grid */}\n          {filteredProjects.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredProjects.map((project, index) => renderProject(project, index))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className={`w-16 h-16 mx-auto mb-4 rounded-full ${themeClasses.card} border-2 flex items-center justify-center`}>\n                <Icon name=\"Filter\" size={24} className={themeClasses.accent} />\n              </div>\n              <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} mb-2`}>\n                No {activeFilter === 'all' ? 'Projects' : activeFilter === 'logo_gallery' ? 'Logo Designs' : activeFilter === 'video' ? 'Videos' : 'Galleries'} Found\n              </h3>\n              <p className={`${themeClasses.secondary}`}>\n                Try a different filter or create new projects in the admin dashboard.\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Beautiful Popup Modal for Project Details */}\n      {selectedProject && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className={`max-w-4xl w-full max-h-[90vh] overflow-y-auto ${themeClasses.card} rounded-2xl border-2`}>\n            {/* Modal Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-current border-opacity-20\">\n              <div>\n                <h2 className={`font-heading text-2xl font-bold ${themeClasses.text}`}>\n                  {selectedProject.title}\n                </h2>\n                <div className=\"flex items-center gap-4 mt-2\">\n                  <span className={`text-xs px-3 py-1 rounded-full bg-${themeClasses.accent}/20 ${themeClasses.accent}`}>\n                    {selectedProject.type?.replace('_', ' ').toUpperCase() || 'PROJECT'}\n                  </span>\n                  <span className={`text-sm ${themeClasses.secondary}`}>\n                    {selectedProject.category}\n                  </span>\n                </div>\n              </div>\n              <button\n                onClick={() => setSelectedProject(null)}\n                className={`p-2 rounded-lg ${themeClasses.filter} ${themeClasses.text} hover:bg-red-500/20 transition-colors`}\n              >\n                <Icon name=\"X\" size={24} />\n              </button>\n            </div>\n\n            {/* Modal Content */}\n            <div className=\"p-6\">\n              {selectedProject.type === 'logo_gallery' && selectedProject.gallery_images?.length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} mb-4`}>\n                    Logo Collection\n                  </h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                    {selectedProject.gallery_images.map((image, index) => (\n                      <div key={index} className={`aspect-square ${themeClasses.card} rounded-lg p-4 flex items-center justify-center border`}>\n                        <Image\n                          src={image}\n                          alt={`Logo ${index + 1}`}\n                          className=\"max-w-full max-h-full object-contain hover:scale-110 transition-transform cursor-pointer\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedProject.type === 'video' && (\n                <div className=\"mb-6\">\n                  <div className=\"aspect-video rounded-lg overflow-hidden\">\n                    {selectedProject.video_url ? (\n                      <video\n                        controls\n                        poster={selectedProject.video_poster}\n                        className=\"w-full h-full\"\n                      >\n                        <source src={selectedProject.video_url} type=\"video/mp4\" />\n                        Your browser does not support the video tag.\n                      </video>\n                    ) : selectedProject.featured_image ? (\n                      <Image\n                        src={selectedProject.featured_image}\n                        alt={selectedProject.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className={`w-full h-full ${themeClasses.bg} flex items-center justify-center`}>\n                        <Icon name=\"Video\" size={64} className={themeClasses.secondary} />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedProject.type === 'gallery' && selectedProject.gallery_images?.length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} mb-4`}>\n                    Image Gallery\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {selectedProject.gallery_images.map((image, index) => (\n                      <div key={index} className=\"aspect-video rounded-lg overflow-hidden\">\n                        <Image\n                          src={image}\n                          alt={`Gallery image ${index + 1}`}\n                          className=\"w-full h-full object-cover hover:scale-105 transition-transform cursor-pointer\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Description */}\n              <div className=\"mb-6\">\n                <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} mb-3`}>\n                  Description\n                </h3>\n                <p className={`${themeClasses.secondary} leading-relaxed`}>\n                  {selectedProject.description || 'No description available.'}\n                </p>\n              </div>\n\n              {/* Technologies */}\n              {selectedProject.tags && selectedProject.tags.length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className={`font-heading font-semibold text-lg ${themeClasses.text} mb-3`}>\n                    Technologies\n                  </h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedProject.tags.map((tag, index) => (\n                      <span\n                        key={index}\n                        className={`px-3 py-1 rounded-full text-sm bg-${themeClasses.accent}/20 ${themeClasses.accent}`}\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Status */}\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <span className={`text-sm ${themeClasses.secondary}`}>Status: </span>\n                  <span className={`font-medium ${themeClasses.accent}`}>\n                    {selectedProject.status || 'Unknown'}\n                  </span>\n                </div>\n                <button\n                  onClick={() => setSelectedProject(null)}\n                  className={`px-6 py-2 rounded-lg ${themeClasses.button} text-white font-medium hover:scale-105 transition-transform`}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ProjectShowcase;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/SocialMediaGrid.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 76], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SocialMediaGrid = ({ currentTheme }) => {\n  const socialLinks = [\n    {\n      name: \"X (Twitter)\",\n      username: \"@mikael_kraft\",\n      url: \"https://x.com/mikael_kraft\",\n      icon: \"Twitter\",\n      description: \"Latest thoughts on tech, cybersecurity, and innovation\",\n      followers: \"2.5K\",\n      color: currentTheme === 'light' ? 'text-black' : 'text-white',\n      bgColor: currentTheme === 'light' ? 'bg-black' : 'bg-white/10'\n    },\n    {\n      name: \"LinkedIn\",\n      username: \"in/mikael-kraft\",\n      url: \"https://linkedin.com/in/mikael-kraft\",\n      icon: \"Linkedin\",\n      description: \"Professional network and career updates\",\n      followers: \"1.8K\",\n      color: currentTheme === 'light' ? 'text-blue-600' : 'text-blue-400',\n      bgColor: currentTheme === 'light' ? 'bg-blue-600' : 'bg-blue-600/20'\n    },\n    {\n      name: \"GitHub\",\n      username: \"mikaelkraft\",\n      url: \"https://github.com/mikaelkraft\",\n      icon: \"Github\",\n      description: \"Open source projects and code repositories\",\n      followers: \"892\",\n      color: currentTheme === 'light' ? 'text-gray-800' : 'text-gray-300',\n      bgColor: currentTheme === 'light' ? 'bg-gray-800' : 'bg-gray-800/20'\n    }\n  ];\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/5',\n          card: 'bg-purple-900/10 border-purple-500/20 hover:border-purple-400/40',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/5',\n          card: 'bg-slate-900/10 border-blue-400/20 hover:border-blue-300/40',\n          text: 'text-blue-100',\n          secondary: 'text-blue-300',\n          accent: 'text-blue-400'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gray-50',\n          card: 'bg-white border-gray-200 hover:border-gray-300 hover:shadow-lg',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-background',\n          card: 'bg-surface/30 border-primary/20 hover:border-primary/40 hover-glow-primary',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  return (\n    <section className={`py-20 px-6 ${themeClasses.bg}`}>\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n            Connect With Me\n          </h2>\n          <p className={`text-lg max-w-2xl mx-auto ${themeClasses.secondary}`}>\n            Follow my journey across different platforms for updates, insights, and collaborations\n          </p>\n        </div>\n\n        {/* Social Media Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {socialLinks.map((social, index) => (\n            <a\n              key={index}\n              href={social.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`\n                ${themeClasses.card} rounded-2xl border-2 p-8 transition-all duration-fast\n                hover:scale-105 cursor-pointer group block\n              `}\n            >\n              {/* Social Icon */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className={`\n                  w-16 h-16 rounded-xl flex items-center justify-center\n                  ${social.bgColor}\n                  group-hover:scale-110 transition-transform duration-fast\n                `}>\n                  <Icon \n                    name={social.icon} \n                    size={28} \n                    className={social.color} \n                  />\n                </div>\n                <div className=\"text-right\">\n                  <div className={`text-2xl font-bold ${themeClasses.text}`}>\n                    {social.followers}\n                  </div>\n                  <div className={`text-sm ${themeClasses.secondary}`}>\n                    Followers\n                  </div>\n                </div>\n              </div>\n\n              {/* Social Info */}\n              <div className=\"space-y-3\">\n                <div>\n                  <h3 className={`font-heading text-xl font-bold ${themeClasses.text}`}>\n                    {social.name}\n                  </h3>\n                  <div className={`text-sm font-mono ${themeClasses.accent}`}>\n                    {social.username}\n                  </div>\n                </div>\n\n                <p className={`text-sm leading-relaxed ${themeClasses.secondary}`}>\n                  {social.description}\n                </p>\n\n                {/* Follow Button */}\n                <div className=\"pt-4\">\n                  <div className={`\n                    inline-flex items-center space-x-2 px-4 py-2 rounded-lg font-medium text-sm\n                    ${currentTheme === 'light' ?'bg-gray-100 text-gray-700 group-hover:bg-gray-200' :'bg-surface/50 text-text-primary group-hover:bg-surface/70'\n                    }\n                    transition-all duration-fast\n                  `}>\n                    <Icon name=\"ExternalLink\" size={16} />\n                    <span>Visit Profile</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Hover Effect Indicator */}\n              <div className=\"mt-6 flex justify-center\">\n                <div className={`\n                  w-8 h-1 rounded-full transition-all duration-fast\n                  ${currentTheme === 'light' ? 'bg-gray-200 group-hover:bg-blue-400' : 'bg-surface group-hover:bg-primary'}\n                `}></div>\n              </div>\n            </a>\n          ))}\n        </div>\n\n        {/* Contact CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className={`${themeClasses.card} rounded-2xl border-2 p-8`}>\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className={`\n                w-12 h-12 rounded-lg flex items-center justify-center\n                ${currentTheme === 'light' ? 'bg-blue-100' : 'bg-primary/20'}\n              `}>\n                <Icon \n                  name=\"Mail\" \n                  size={24} \n                  className={currentTheme === 'light' ? 'text-blue-600' : 'text-primary'} \n                />\n              </div>\n            </div>\n            <h3 className={`font-heading text-xl font-bold mb-2 ${themeClasses.text}`}>\n              Let's Collaborate\n            </h3>\n            <p className={`text-sm mb-6 ${themeClasses.secondary}`}>\n              Have a project in mind? Let's discuss how we can work together to bring your ideas to life.\n            </p>\n            <button className={`\n              px-6 py-3 rounded-lg font-medium transition-all duration-fast\n              ${currentTheme === 'light' ?'bg-blue-600 text-white hover:bg-blue-700' :'bg-primary text-background hover:bg-primary/90 glow-primary'\n              }\n              min-h-[44px]\n            `}>\n              <Icon name=\"Send\" size={18} className=\"inline mr-2\" />\n              Get In Touch\n            </button>\n          </div>\n        </div>\n\n        {/* Social Stats */}\n        <div className=\"mt-12 grid grid-cols-3 gap-6 text-center\">\n          <div>\n            <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n              5.2K\n            </div>\n            <div className={`text-sm ${themeClasses.secondary}`}>\n              Total Followers\n            </div>\n          </div>\n          <div>\n            <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n              150+\n            </div>\n            <div className={`text-sm ${themeClasses.secondary}`}>\n              Posts & Updates\n            </div>\n          </div>\n          <div>\n            <div className={`text-2xl font-bold ${themeClasses.accent}`}>\n              25+\n            </div>\n            <div className={`text-sm ${themeClasses.secondary}`}>\n              Open Source Repos\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SocialMediaGrid;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/TechStackGrid.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 76], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst TechStackGrid = ({ currentTheme, items }) => {\n  const fallback = [\n    {\n      name: \"React\",\n      icon: \"Code\",\n      category: \"Frontend\",\n      proficiency: 95,\n      description: \"Building modern, interactive user interfaces\"\n    },\n    {\n      name: \"Node.js\",\n      icon: \"Server\",\n      category: \"Backend\",\n      proficiency: 90,\n      description: \"Scalable server-side applications\"\n    },\n    {\n      name: \"Python\",\n      icon: \"Bot\",\n      category: \"Data Science\",\n      proficiency: 88,\n      description: \"AI/ML and data analysis solutions\"\n    },\n    {\n      name: \"PHP\",\n      icon: \"Globe\",\n      category: \"Web Development\",\n      proficiency: 85,\n      description: \"Dynamic web applications and APIs\"\n    },\n    {\n      name: \"JavaScript\",\n      icon: \"Zap\",\n      category: \"Programming\",\n      proficiency: 92,\n      description: \"Full-stack JavaScript development\"\n    },\n    {\n      name: \"Blockchain\",\n      icon: \"Link\",\n      category: \"Web3\",\n      proficiency: 82,\n      description: \"Smart contracts and DeFi solutions\"\n    },\n    {\n      name: \"Java\",\n      icon: \"Coffee\",\n      category: \"Enterprise\",\n      proficiency: 80,\n      description: \"Enterprise-grade applications\"\n    },\n    {\n      name: \"R\",\n      icon: \"BarChart3\",\n      category: \"Analytics\",\n      proficiency: 75,\n      description: \"Statistical computing and graphics\"\n    },\n    {\n      name: \"CSS\",\n      icon: \"Palette\",\n      category: \"Styling\",\n      proficiency: 90,\n      description: \"Modern CSS and responsive design\"\n    },\n    {\n      name: \"HTML\",\n      icon: \"FileText\",\n      category: \"Markup\",\n      proficiency: 95,\n      description: \"Semantic web structure and accessibility\"\n    },\n    {\n      name: \"Docker\",\n      icon: \"Package\",\n      category: \"DevOps\",\n      proficiency: 85,\n      description: \"Containerization and deployment\"\n    },\n    {\n      name: \"Security\",\n      icon: \"Shield\",\n      category: \"Cybersecurity\",\n      proficiency: 87,\n      description: \"Application security and penetration testing\"\n    },\n    {\n      name: \"Flutter\",\n      icon: \"Smartphone\",\n      category: \"Mobile\",\n      proficiency: 82,\n      description: \"Cross-platform mobile app development\"\n    },\n    {\n      name: \"Figma\",\n      icon: \"Figma\",\n      category: \"Design\",\n      proficiency: 85,\n      description: \"UI/UX design and prototyping\"\n    },\n    {\n      name: \"CorelDraw\",\n      icon: \"Image\",\n      category: \"Graphics\",\n      proficiency: 80,\n      description: \"Vector graphics and digital design\"\n    },\n    {\n      name: \"Power Director\",\n      icon: \"Video\",\n      category: \"Video\",\n      proficiency: 75,\n      description: \"Professional video editing and effects\"\n    }\n  ];\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/5',\n          card: 'bg-purple-900/10 border-purple-500/20 hover:border-purple-400/40',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/5',\n          card: 'bg-slate-900/10 border-blue-400/20 hover:border-blue-300/40',\n          text: 'text-blue-100',\n          secondary: 'text-blue-300',\n          accent: 'text-blue-400'\n        };\n      case 'light':\n        return {\n          bg: 'bg-white',\n          card: 'bg-gray-50 border-gray-200 hover:border-blue-300 hover:shadow-lg',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-background',\n          card: 'bg-surface/30 border-primary/20 hover:border-primary/40 hover-glow-primary',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n  const techStack = Array.isArray(items) && items.length ? items : fallback;\n\n  const getCategoryColor = (category) => {\n    const colors = {\n      'Frontend': currentTheme === 'light' ? 'text-blue-600 bg-blue-100' : 'text-primary bg-primary/20',\n      'Backend': currentTheme === 'light' ? 'text-green-600 bg-green-100' : 'text-accent bg-accent/20',\n      'Data Science': currentTheme === 'light' ? 'text-purple-600 bg-purple-100' : 'text-secondary bg-secondary/20',\n      'Web Development': currentTheme === 'light' ? 'text-orange-600 bg-orange-100' : 'text-warning bg-warning/20',\n      'Programming': currentTheme === 'light' ? 'text-yellow-600 bg-yellow-100' : 'text-primary bg-primary/20',\n      'Web3': currentTheme === 'light' ? 'text-indigo-600 bg-indigo-100' : 'text-secondary bg-secondary/20',\n      'Enterprise': currentTheme === 'light' ? 'text-red-600 bg-red-100' : 'text-error bg-error/20',\n      'Analytics': currentTheme === 'light' ? 'text-teal-600 bg-teal-100' : 'text-accent bg-accent/20',\n      'Styling': currentTheme === 'light' ? 'text-pink-600 bg-pink-100' : 'text-secondary bg-secondary/20',\n      'Markup': currentTheme === 'light' ? 'text-gray-600 bg-gray-100' : 'text-text-secondary bg-text-secondary/20',\n      'DevOps': currentTheme === 'light' ? 'text-blue-600 bg-blue-100' : 'text-primary bg-primary/20',\n      'Cybersecurity': currentTheme === 'light' ? 'text-red-600 bg-red-100' : 'text-error bg-error/20'\n    };\n    return colors[category] || (currentTheme === 'light' ? 'text-gray-600 bg-gray-100' : 'text-text-secondary bg-text-secondary/20');\n  };\n\n  return (\n    <section className={`py-20 px-6 ${themeClasses.bg}`}>\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n            Technology Stack\n          </h2>\n          <p className={`text-lg max-w-2xl mx-auto ${themeClasses.secondary}`}>\n            Expertise across modern technologies, frameworks, and programming languages\n          </p>\n        </div>\n\n        {/* Tech Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {techStack.map((tech, index) => (\n            <div \n              key={index}\n              className={`\n                ${themeClasses.card} rounded-xl border-2 p-6 transition-all duration-fast\n                hover:scale-105 cursor-pointer group\n              `}\n            >\n              {/* Tech Icon */}\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`\n                  w-12 h-12 rounded-lg flex items-center justify-center\n                  ${currentTheme === 'light' ? 'bg-blue-100' : 'bg-primary/20'}\n                  group-hover:scale-110 transition-transform duration-fast\n                `}>\n                  <Icon \n                    name={tech.icon} \n                    size={24} \n                    className={currentTheme === 'light' ? 'text-blue-600' : 'text-primary'} \n                  />\n                </div>\n                <div className={`text-xs px-2 py-1 rounded-full font-medium ${getCategoryColor(tech.category)}`}>\n                  {tech.category}\n                </div>\n              </div>\n\n              {/* Tech Name */}\n              <h3 className={`font-heading text-xl font-bold mb-2 ${themeClasses.text}`}>\n                {tech.name}\n              </h3>\n\n              {/* Description */}\n              <p className={`text-sm mb-4 ${themeClasses.secondary}`}>\n                {tech.description}\n              </p>\n\n              {/* Proficiency Bar */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className={`text-xs font-medium ${themeClasses.secondary}`}>\n                    Proficiency\n                  </span>\n                  <span className={`text-xs font-bold ${themeClasses.accent}`}>\n                    {tech.proficiency}%\n                  </span>\n                </div>\n                <div className={`w-full h-2 rounded-full ${currentTheme === 'light' ? 'bg-gray-200' : 'bg-surface'}`}>\n                  <div \n                    className={`\n                      h-full rounded-full transition-all duration-slow\n                      ${currentTheme === 'light' ? 'bg-blue-600' : 'bg-primary'}\n                    `}\n                    style={{ width: `${tech.proficiency}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Skills Summary */}\n        <div className=\"mt-16 text-center\">\n          <div className={`inline-flex items-center space-x-4 px-6 py-4 rounded-xl ${themeClasses.card} border-2`}>\n            <Icon name=\"Award\" size={24} className={themeClasses.accent} />\n            <div>\n              <div className={`font-heading font-bold text-lg ${themeClasses.text}`}>\n                5+ Years Experience\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Full-Stack Development & Cybersecurity\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default TechStackGrid;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/ThemeControls.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [49, 59], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [42, 90], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [49, 59], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [97, 109], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [90, 143], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [97, 109], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "import React, { useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ThemeControls = ({ isOpen, onClose, currentTheme, onThemeChange, fontSize, onFontSizeChange }) => {\n  const themes = [\n    {\n      id: 'cyberpunk',\n      name: 'Cyberpunk', \n      icon: 'Zap',\n      description: 'Neon-lit digital future',\n      colors: ['#00FFFF', '#FF0080', '#39FF14']\n    },\n    {\n      id: 'dark',\n      name: 'Dark',\n      icon: 'Moon',\n      description: 'Classic dark mode',\n      colors: ['#3B82F6', '#1E40AF', '#60A5FA']\n    },\n    {\n      id: 'neural',\n      name: 'Neural',\n      icon: 'Brain',\n      description: 'Brain-inspired patterns',\n      colors: ['#8B5CF6', '#A855F7', '#C084FC']\n    },\n    {\n      id: 'futuristic',\n      name: 'Futuristic',\n      icon: 'Rocket',\n      description: 'Sleek metallic elements',\n      colors: ['#0EA5E9', '#0284C7', '#38BDF8']\n    },\n    {\n      id: 'light',\n      name: 'Light',\n      icon: 'Sun',\n      description: 'Clean professional look',\n      colors: ['#1F2937', '#374151', '#3B82F6']\n    }\n  ];\n\n  const fontSizes = [\n    { id: 'small', name: 'Small', value: '14px' },\n    { id: 'medium', name: 'Medium', value: '16px' },\n    { id: 'large', name: 'Large', value: '18px' },\n    { id: 'xlarge', name: 'X-Large', value: '20px' }\n  ];\n\n  // Handle escape key to close modal\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  const handleThemeChange = (themeId) => {\n    onThemeChange(themeId);\n    // Auto-close modal after theme selection\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const handleFontSizeChange = (sizeId) => {\n    onFontSizeChange(sizeId);\n    // Auto-close modal after font size selection\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'dark':\n        return {\n          panel: 'bg-gray-900/20 border-gray-700/30',\n          text: 'text-gray-100',\n          secondary: 'text-gray-300',\n          accent: 'text-gray-400',\n          button: 'bg-gray-900/30 hover:bg-gray-900/50 border-gray-700/30'\n        };\n      case 'neural':\n        return {\n          panel: 'bg-purple-900/20 border-purple-500/30',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400',\n          button: 'bg-purple-900/30 hover:bg-purple-900/50 border-purple-500/30'\n        };\n      case 'futuristic':\n        return {\n          panel: 'bg-slate-900/20 border-blue-400/30',\n          text: 'text-blue-100',\n          secondary: 'text-blue-300',\n          accent: 'text-blue-400',\n          button: 'bg-slate-900/30 hover:bg-slate-900/50 border-blue-400/30'\n        };\n      case 'light':\n        return {\n          panel: 'bg-white border-gray-200 shadow-lg',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600',\n          button: 'bg-gray-50 hover:bg-gray-100 border-gray-200'\n        };\n      default: // cyberpunk\n        return {\n          panel: 'bg-surface/30 border-primary/30 glow-primary',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary',\n          button: 'bg-surface/30 hover:bg-surface/50 border-primary/30'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        {/* Backdrop */}\n        <div \n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm transition-opacity\"\n          onClick={onClose}\n        ></div>\n\n        {/* Modal */}\n        <div className=\"inline-block align-bottom bg-surface/95 backdrop-blur-md rounded-xl border-2 border-border-accent/20 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border-accent/20\">\n            <h2 className=\"font-heading font-bold text-xl text-text-primary flex items-center space-x-2\">\n              <Icon name=\"Palette\" size={24} className=\"text-primary\" />\n              <span>Theme Controls</span>\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"X\"\n              onClick={onClose}\n              className=\"text-text-secondary hover:text-primary p-2\"\n              title=\"Close theme controls\"\n            />\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6 space-y-6\">\n            {/* Theme Selector */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Icon name=\"Palette\" size={18} className={themeClasses.accent} />\n                <span className={`font-medium text-sm ${themeClasses.text}`}>\n                  Theme Selection\n                </span>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-3 sm:grid-cols-2 md:grid-cols-3\">\n                {/* Horizontal scroll wrapper for mobile */}\n                <div className=\"col-span-2 md:col-span-3 -mx-2 overflow-x-auto hide-scrollbar\">\n                  <div className=\"px-2 inline-flex gap-3 md:grid md:grid-cols-3 md:gap-3 w-max md:w-auto\">\n                    {themes.map((theme) => (\n                      <button\n                        key={theme.id}\n                        onClick={() => handleThemeChange(theme.id)}\n                        className={`\n                          ${themeClasses.button} rounded-lg border p-4 transition-all duration-fast\n                          ${currentTheme === theme.id \n                            ? (currentTheme === 'light' ? 'ring-2 ring-blue-500' : 'ring-2 ring-primary') \n                            : ''\n                          }\n                          hover:scale-105 group min-h-[80px] min-w-[140px]\n                        `}\n                        title={theme.description}\n                      >\n                        <div className=\"flex flex-col items-center space-y-2\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Icon \n                              name={theme.icon} \n                              size={20} \n                              className={currentTheme === theme.id ? themeClasses.accent : themeClasses.secondary} \n                            />\n                          </div>\n                          <span className={`text-sm font-medium ${currentTheme === theme.id ? themeClasses.text : themeClasses.secondary}`}>\n                            {theme.name}\n                          </span>\n                          <div className=\"flex space-x-1\">\n                            {theme.colors.map((color, index) => (\n                              <div\n                                key={index}\n                                className=\"w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: color }}\n                              ></div>\n                            ))}\n                          </div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Font Size Selector */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Icon name=\"Type\" size={18} className={themeClasses.accent} />\n                <span className={`font-medium text-sm ${themeClasses.text}`}>\n                  Font Size\n                </span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {fontSizes.map((size) => (\n                  <button\n                    key={size.id}\n                    onClick={() => handleFontSizeChange(size.id)}\n                    className={`\n                      w-full ${themeClasses.button} rounded-lg border p-3 transition-all duration-fast\n                      ${fontSize === size.id \n                        ? (currentTheme === 'light' ? 'ring-2 ring-blue-500' : 'ring-2 ring-primary') \n                        : ''\n                      }\n                      hover:scale-105 text-left min-h-[48px] flex items-center justify-between\n                    `}\n                  >\n                    <span className={`text-sm font-medium ${fontSize === size.id ? themeClasses.text : themeClasses.secondary}`}>\n                      {size.name}\n                    </span>\n                    <span className={`text-xs ${themeClasses.secondary}`}>\n                      {size.value}\n                    </span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Icon name=\"Settings\" size={18} className={themeClasses.accent} />\n                <span className={`font-medium text-sm ${themeClasses.text}`}>\n                  Quick Actions\n                </span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <button className={`\n                  w-full ${themeClasses.button} rounded-lg border p-3 transition-all duration-fast\n                  hover:scale-105 text-left min-h-[48px] flex items-center space-x-2\n                `}>\n                  <Icon name=\"Download\" size={16} className={themeClasses.secondary} />\n                  <span className={`text-sm ${themeClasses.secondary}`}>\n                    Export Settings\n                  </span>\n                </button>\n                \n                <button className={`\n                  w-full ${themeClasses.button} rounded-lg border p-3 transition-all duration-fast\n                  hover:scale-105 text-left min-h-[48px] flex items-center space-x-2\n                `}>\n                  <Icon name=\"RotateCcw\" size={16} className={themeClasses.secondary} />\n                  <span className={`text-sm ${themeClasses.secondary}`}>\n                    Reset to Default\n                  </span>\n                </button>\n              </div>\n            </div>\n\n            {/* Theme Preview */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <Icon name=\"Eye\" size={18} className={themeClasses.accent} />\n                <span className={`font-medium text-sm ${themeClasses.text}`}>\n                  Preview\n                </span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className={`text-sm ${themeClasses.text}`}>\n                  Primary Text\n                </div>\n                <div className={`text-sm ${themeClasses.secondary}`}>\n                  Secondary Text\n                </div>\n                <div className={`text-sm ${themeClasses.accent}`}>\n                  Accent Color\n                </div>\n                <div className={`w-full h-3 rounded-full ${currentTheme === 'light' ? 'bg-gray-200' : 'bg-surface'}`}>\n                  <div className={`w-3/4 h-full rounded-full ${currentTheme === 'light' ? 'bg-blue-600' : 'bg-primary'}`}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t border-border-accent/20 p-4 text-center\">\n            <div className=\"text-xs text-text-secondary font-caption\">\n              Click anywhere outside to close or press Escape\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ThemeControls;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/components/VisitorInfoPanel.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [52, 101], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst VisitorInfoPanel = ({ currentTheme }) => {\n  const [visitorInfo, setVisitorInfo] = useState({\n    currentTime: new Date(),\n    ipAddress: \"192.168.1.100\",\n    ispProvider: \"CyberNet ISP\",\n    browser: \"Chrome 120.0\",\n    deviceRAM: \"16 GB\",\n    cpuCores: \"8 cores\",\n    connectionType: \"WiFi\",\n    displaySize: \"1920x1080\",\n    screenResolution: \"2560x1440\",\n    preferredLanguage: \"English (US)\",\n    location: \"San Francisco, CA\",\n    timezone: \"PST (UTC-8)\"\n  });\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    // Update time every second\n    const timeInterval = setInterval(() => {\n      setVisitorInfo(prev => ({\n        ...prev,\n        currentTime: new Date()\n      }));\n    }, 1000);\n\n    // Simulate real-time data updates\n    const dataInterval = setInterval(() => {\n      setVisitorInfo(prev => ({\n        ...prev,\n        connectionType: Math.random() > 0.8 ? \"Ethernet\" : \"WiFi\",\n        deviceRAM: Math.random() > 0.5 ? \"16 GB\" : \"32 GB\"\n      }));\n    }, 10000);\n\n    return () => {\n      clearInterval(timeInterval);\n      clearInterval(dataInterval);\n    };\n  }, []);\n\n  const getThemeClasses = () => {\n    switch(currentTheme) {\n      case 'neural':\n        return {\n          bg: 'bg-purple-900/10',\n          panel: 'bg-purple-900/20 border-purple-500/30',\n          text: 'text-purple-100',\n          secondary: 'text-purple-300',\n          accent: 'text-purple-400',\n          grid: 'bg-purple-500/10'\n        };\n      case 'futuristic':\n        return {\n          bg: 'bg-slate-900/10',\n          panel: 'bg-slate-900/20 border-blue-400/30',\n          text: 'text-blue-100',\n          secondary: 'text-blue-300',\n          accent: 'text-blue-400',\n          grid: 'bg-blue-400/10'\n        };\n      case 'light':\n        return {\n          bg: 'bg-gray-50',\n          panel: 'bg-white border-gray-200 shadow-lg',\n          text: 'text-gray-900',\n          secondary: 'text-gray-600',\n          accent: 'text-blue-600',\n          grid: 'bg-blue-50/50'\n        };\n      default: // cyberpunk\n        return {\n          bg: 'bg-background',\n          panel: 'bg-surface/30 border-primary/30 glow-primary',\n          text: 'text-text-primary',\n          secondary: 'text-text-secondary',\n          accent: 'text-primary',\n          grid: 'bg-primary/5'\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  const formatTime = (date) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: true,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  const formatDate = (date) => {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const infoItems = [\n    { label: \"IP Address\", value: visitorInfo.ipAddress, icon: \"Globe\" },\n    { label: \"ISP Provider\", value: visitorInfo.ispProvider, icon: \"Wifi\" },\n    { label: \"Browser\", value: visitorInfo.browser, icon: \"Monitor\" },\n    { label: \"Device RAM\", value: visitorInfo.deviceRAM, icon: \"Cpu\" },\n    { label: \"CPU Cores\", value: visitorInfo.cpuCores, icon: \"Zap\" },\n    { label: \"Connection\", value: visitorInfo.connectionType, icon: \"Radio\" },\n    { label: \"Display Size\", value: visitorInfo.displaySize, icon: \"Smartphone\" },\n    { label: \"Resolution\", value: visitorInfo.screenResolution, icon: \"Maximize\" },\n    { label: \"Language\", value: visitorInfo.preferredLanguage, icon: \"Languages\" },\n    { label: \"Location\", value: visitorInfo.location, icon: \"MapPin\" },\n    { label: \"Timezone\", value: visitorInfo.timezone, icon: \"Clock\" }\n  ];\n\n  return (\n    <section className={`py-20 px-6 relative overflow-hidden ${themeClasses.bg}`}>\n      {/* Network Grid Background */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className={`w-full h-full ${themeClasses.grid}`} style={{\n          backgroundImage: `\n            linear-gradient(${currentTheme === 'light' ? 'rgba(59, 130, 246, 0.1)' : 'rgba(0, 255, 255, 0.1)'} 1px, transparent 1px),\n            linear-gradient(90deg, ${currentTheme === 'light' ? 'rgba(59, 130, 246, 0.1)' : 'rgba(0, 255, 255, 0.1)'} 1px, transparent 1px)\n          `,\n          backgroundSize: '30px 30px'\n        }}>\n        </div>\n        {/* Animated Network Nodes */}\n        {currentTheme !== 'light' && (\n          <>\n            <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n            <div className=\"absolute top-3/4 right-1/4 w-2 h-2 bg-secondary rounded-full animate-pulse delay-500\"></div>\n            <div className=\"absolute bottom-1/4 left-1/2 w-2 h-2 bg-accent rounded-full animate-pulse delay-1000\"></div>\n          </>\n        )}\n      </div>\n\n      <div className=\"max-w-6xl mx-auto relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className={`font-heading text-3xl lg:text-4xl font-bold mb-4 ${themeClasses.text}`}>\n            Visitor Information\n          </h2>\n          <p className={`text-lg max-w-2xl mx-auto ${themeClasses.secondary}`}>\n            Real-time system and network information for your current session\n          </p>\n        </div>\n\n        {/* Main Info Panel */}\n        <div className={`${themeClasses.panel} rounded-2xl border-2 overflow-hidden`}>\n          {/* Current Time Display */}\n          <div className=\"p-8 text-center border-b border-current border-opacity-20\">\n            <div className={`font-heading text-4xl lg:text-5xl font-bold mb-2 ${themeClasses.accent}`}>\n              {formatTime(visitorInfo.currentTime)}\n            </div>\n            <div className={`text-lg ${themeClasses.secondary}`}>\n              {formatDate(visitorInfo.currentTime)}\n            </div>\n            <div className=\"flex items-center justify-center mt-4 space-x-2\">\n              <div className={`w-2 h-2 rounded-full animate-pulse ${currentTheme === 'light' ? 'bg-green-500' : 'bg-accent'}`}></div>\n              <span className={`text-sm font-medium ${themeClasses.secondary}`}>\n                Live Session Active\n              </span>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 p-8 border-b border-current border-opacity-20\">\n            <div className=\"text-center\">\n              <Icon name=\"Globe\" size={24} className={`${themeClasses.accent} mx-auto mb-2`} />\n              <div className={`font-bold text-lg ${themeClasses.text}`}>\n                {visitorInfo.ipAddress}\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                IP Address\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <Icon name=\"Cpu\" size={24} className={`${themeClasses.accent} mx-auto mb-2`} />\n              <div className={`font-bold text-lg ${themeClasses.text}`}>\n                {visitorInfo.cpuCores}\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                CPU Cores\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <Icon name=\"Monitor\" size={24} className={`${themeClasses.accent} mx-auto mb-2`} />\n              <div className={`font-bold text-lg ${themeClasses.text}`}>\n                {visitorInfo.displaySize}\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Display\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <Icon name=\"Radio\" size={24} className={`${themeClasses.accent} mx-auto mb-2`} />\n              <div className={`font-bold text-lg ${themeClasses.text}`}>\n                {visitorInfo.connectionType}\n              </div>\n              <div className={`text-sm ${themeClasses.secondary}`}>\n                Connection\n              </div>\n            </div>\n          </div>\n\n          {/* Detailed Information */}\n          <div className=\"p-8\">\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className={`\n                flex items-center justify-between w-full mb-6 p-4 rounded-lg\n                ${currentTheme === 'light' ? 'bg-gray-50 hover:bg-gray-100' : 'bg-surface/50 hover:bg-surface/70'}\n                transition-all duration-fast\n              `}\n            >\n              <span className={`font-medium ${themeClasses.text}`}>\n                Detailed System Information\n              </span>\n              <Icon \n                name={isExpanded ? \"ChevronUp\" : \"ChevronDown\"} \n                size={20} \n                className={themeClasses.accent} \n              />\n            </button>\n\n            {isExpanded && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 animate-in slide-in-from-top duration-300\">\n                {infoItems.map((item, index) => (\n                  <div \n                    key={index}\n                    className={`\n                      flex items-center space-x-4 p-4 rounded-lg\n                      ${currentTheme === 'light' ? 'bg-gray-50' : 'bg-surface/30'}\n                      hover:scale-105 transition-transform duration-fast\n                    `}\n                  >\n                    <div className={`\n                      w-10 h-10 rounded-lg flex items-center justify-center\n                      ${currentTheme === 'light' ? 'bg-blue-100' : 'bg-primary/20'}\n                    `}>\n                      <Icon \n                        name={item.icon} \n                        size={18} \n                        className={currentTheme === 'light' ? 'text-blue-600' : 'text-primary'} \n                      />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className={`text-sm font-medium ${themeClasses.secondary}`}>\n                        {item.label}\n                      </div>\n                      <div className={`font-bold ${themeClasses.text}`}>\n                        {item.value}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Security Notice */}\n          <div className={`p-6 border-t border-current border-opacity-20 ${currentTheme === 'light' ? 'bg-blue-50' : 'bg-primary/5'}`}>\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Shield\" size={20} className={themeClasses.accent} />\n              <div>\n                <div className={`font-medium text-sm ${themeClasses.text}`}>\n                  Privacy & Security\n                </div>\n                <div className={`text-xs mt-1 ${themeClasses.secondary}`}>\n                  This information is collected for demonstration purposes only and is not stored or transmitted to external servers.\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default VisitorInfoPanel;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/portfolio-home-hero/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React, { useState, useEffect } from 'react';\n// import HeaderNavigation from '../../components/ui/HeaderNavigation';\n// import HeroSection from './components/HeroSection';\n// import ProjectCarousel from './components/ProjectCarousel';\n// import ProjectShowcase from './components/ProjectShowcase';\n// import TechStackGrid from './components/TechStackGrid';\n// import VisitorInfoPanel from './components/VisitorInfoPanel';\n// import SocialMediaGrid from './components/SocialMediaGrid';\n// import FeaturedBlogPosts from './components/FeaturedBlogPosts';\n// import NewsletterSubscription from './components/NewsletterSubscription';\n// import ThemeControls from './components/ThemeControls';\n// import DynamicFooter from './components/DynamicFooter';\nimport settingsService from '../../utils/settingsService';\n\nconst PortfolioHomeHero = () => {\n  const [currentTheme, setCurrentTheme] = useState('cyberpunk');\n  const [fontSize, setFontSize] = useState('medium');\n  const [isThemeControlsOpen, setIsThemeControlsOpen] = useState(false);\n  const [heroVideoUrl, setHeroVideoUrl] = useState('');\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [techStack, setTechStack] = useState([]);\n\n  // Apply theme and font size to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Apply theme classes\n    root.className = `theme-${currentTheme}`;\n    \n    // Apply font size\n    const fontSizeMap = {\n      small: '14px',\n      medium: '16px',\n      large: '18px',\n      xlarge: '20px'\n    };\n    root.style.fontSize = fontSizeMap[fontSize];\n  }, [currentTheme, fontSize]);\n\n  // Load settings (theme defaults and hero video)\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      const res = await settingsService.getSettings();\n      if (!mounted || !res.success) return;\n      const stg = res.data || {};\n      const ui = stg.ui_settings || {};\n  if (stg.default_theme) setCurrentTheme(stg.default_theme);\n  if (stg.default_font_size) setFontSize(stg.default_font_size);\n  setVideoEnabled(stg.enable_video !== false);\n  if (ui.hero_video_url) setHeroVideoUrl(ui.hero_video_url);\n  if (Array.isArray(ui.tech_stack)) setTechStack(ui.tech_stack);\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  const handleThemeChange = (theme) => {\n    setCurrentTheme(theme);\n  };\n\n  const handleFontSizeChange = (size) => {\n    setFontSize(size);\n  };\n\n  const handleThemeControlsToggle = () => {\n    setIsThemeControlsOpen(!isThemeControlsOpen);\n  };\n\n  const handleThemeControlsClose = () => {\n    setIsThemeControlsOpen(false);\n  };\n\n  const getBackgroundClass = () => {\n    switch(currentTheme) {\n      case 'dark':\n        return 'bg-gradient-to-br from-gray-900 via-gray-900 to-gray-800';\n      case 'neural':\n        return 'bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900';\n      case 'futuristic':\n        return 'bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900';\n      case 'light':\n        return 'bg-gradient-to-br from-gray-50 via-white to-blue-50';\n      default: // cyberpunk\n        return 'bg-gradient-to-br from-background via-surface to-background';\n    }\n  };\n\n  return (\n    <>\n      <div className={`min-h-screen ${getBackgroundClass()} relative overflow-x-hidden`}>\n        {/* Optional Hero Background Video */}\n        {videoEnabled && heroVideoUrl && (\n          <video\n            className=\"pointer-events-none fixed inset-0 w-full h-full object-cover opacity-25\"\n            src={heroVideoUrl}\n            autoPlay\n            muted\n            loop\n            playsInline\n          />\n        )}\n        {/* Header Navigation */}\n        <HeaderNavigation \n          onThemeControlsToggle={handleThemeControlsToggle} \n          currentTheme={currentTheme}\n        />\n\n        {/* Theme Controls Modal */}\n        <ThemeControls\n          isOpen={isThemeControlsOpen}\n          onClose={handleThemeControlsClose}\n          currentTheme={currentTheme}\n          onThemeChange={handleThemeChange}\n          fontSize={fontSize}\n          onFontSizeChange={handleFontSizeChange}\n        />\n\n        {/* Main Content */}\n        <main className=\"relative z-10\">\n          {/* Hero Section */}\n          <HeroSection currentTheme={currentTheme} />\n\n          {/* Project Carousel */}\n          <ProjectCarousel currentTheme={currentTheme} />\n\n          {/* Project Showcase - Video/Image/Logo Projects */}\n          <ProjectShowcase currentTheme={currentTheme} />\n\n          {/* Technology Stack Grid */}\n          <TechStackGrid currentTheme={currentTheme} items={techStack} />\n\n          {/* Featured Blog Posts */}\n          <FeaturedBlogPosts currentTheme={currentTheme} />\n\n          {/* Newsletter Subscription */}\n          <NewsletterSubscription currentTheme={currentTheme} />\n\n          {/* Visitor Information Panel */}\n          <VisitorInfoPanel currentTheme={currentTheme} />\n\n          {/* Social Media Grid */}\n          <SocialMediaGrid currentTheme={currentTheme} />\n        </main>\n\n        {/* Dynamic Footer */}\n        <DynamicFooter currentTheme={currentTheme} />\n\n        {/* Background Effects */}\n        {currentTheme !== 'light' && (\n          <div className=\"fixed inset-0 pointer-events-none overflow-hidden -z-10\">\n            <div className=\"absolute top-0 left-0 w-full h-full cyber-grid opacity-5\"></div>\n            <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-primary/10 rounded-full blur-3xl animate-pulse\"></div>\n            <div className=\"absolute bottom-1/4 right-1/4 w-80 h-80 bg-secondary/10 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n            <div className=\"absolute top-3/4 left-1/2 w-64 h-64 bg-accent/10 rounded-full blur-3xl animate-pulse delay-2000\"></div>\n          </div>\n        )}\n\n        {/* Sticky Footer with Theme Controls Trigger */}\n        <div className=\"fixed bottom-8 right-8 flex flex-col items-end space-y-3 z-40\">\n          {/* Theme Controls Trigger Button */}\n          <button\n            onClick={handleThemeControlsToggle}\n            className={`\n              w-12 h-12 rounded-full flex items-center justify-center transition-all duration-fast\n              ${currentTheme === 'light' ?'bg-blue-600 text-white hover:bg-blue-700 shadow-lg' :'bg-primary text-background hover:bg-primary/90 glow-primary'\n              }\n              hover:scale-110 opacity-80 hover:opacity-100\n            `}\n            title=\"Open theme controls\"\n          >\n            <svg\n              className=\"w-6 h-6\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1-8.313-12.454z\"\n              />\n            </svg>\n          </button>\n\n          {/* Scroll to Top Button */}\n          <button\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n            className={`\n              w-12 h-12 rounded-full flex items-center justify-center transition-all duration-fast\n              ${currentTheme === 'light' ?'bg-gray-600 text-white hover:bg-gray-700 shadow-lg' :'bg-surface text-primary hover:bg-surface/90 border border-primary/30'\n              }\n              hover:scale-110 opacity-80 hover:opacity-100\n            `}\n            aria-label=\"Scroll to top\"\n          >\n            <svg\n              className=\"w-6 h-6\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M5 10l7-7m0 0l7 7m-7-7v18\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PortfolioHomeHero;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/project-detail/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [111, 149], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16,
        "fix": { "range": [111, 150], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [111, 149], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [157, 179], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "fix": { "range": [150, 219], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [157, 179], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'DynamicFooter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "DynamicFooter" },
            "fix": { "range": [226, 245], "text": "" },
            "desc": "Remove unused variable 'DynamicFooter'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'DynamicFooter' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 21,
        "fix": { "range": [219, 296], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "DynamicFooter" },
            "fix": { "range": [226, 245], "text": "" },
            "desc": "Remove unused variable 'DynamicFooter'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [303, 313], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "fix": { "range": [296, 341], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [303, 313], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [348, 359], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 13,
        "fix": { "range": [341, 388], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [348, 359], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [395, 407], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 14,
        "fix": { "range": [388, 437], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [395, 407], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'LogoCarousel' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogoCarousel" },
            "fix": { "range": [444, 462], "text": "" },
            "desc": "Remove unused variable 'LogoCarousel'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'LogoCarousel' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 20,
        "fix": { "range": [437, 498], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LogoCarousel" },
            "fix": { "range": [444, 462], "text": "" },
            "desc": "Remove unused variable 'LogoCarousel'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport HeaderNavigation from '../../components/ui/HeaderNavigation';\nimport DynamicFooter from '../portfolio-home-hero/components/DynamicFooter';\nimport Icon from '../../components/AppIcon';\nimport Image from '../../components/AppImage';\nimport Button from '../../components/ui/Button';\nimport LogoCarousel from '../../components/ui/LogoCarousel';\nimport projectService from '../../utils/projectService';\n\nconst ProjectDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentTheme, setCurrentTheme] = useState('cyberpunk');\n\n  useEffect(() => {\n    const loadProject = async () => {\n      try {\n        setLoading(true);\n        const res = await projectService.getProjectById(id);\n        if (res.success) {\n          setProject(res.data);\n          // Increment view count\n          await projectService.incrementViewCount(id);\n        } else {\n          setError('Project not found');\n        }\n      } catch (err) {\n        setError('Failed to load project');\n        console.error('Error loading project:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (id) {\n      loadProject();\n    }\n  }, [id]);\n\n  useEffect(() => {\n    // Get theme from localStorage\n    const savedTheme = localStorage.getItem('theme') || 'cyberpunk';\n    setCurrentTheme(savedTheme);\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <HeaderNavigation currentTheme={currentTheme} />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-text-secondary\">Loading project...</p>\n          </div>\n        </div>\n        <DynamicFooter currentTheme={currentTheme} />\n      </div>\n    );\n  }\n\n  if (error || !project) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <HeaderNavigation currentTheme={currentTheme} />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <Icon name=\"AlertCircle\" size={48} className=\"text-error mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-heading font-bold text-text-primary mb-2\">Project Not Found</h1>\n            <p className=\"text-text-secondary mb-6\">{error}</p>\n            <Button onClick={() => navigate('/projects-portfolio-grid')} variant=\"primary\">\n              Back to Projects\n            </Button>\n          </div>\n        </div>\n        <DynamicFooter currentTheme={currentTheme} />\n      </div>\n    );\n  }\n\n  const renderProjectContent = () => {\n    switch (project.type) {\n      case 'video':\n        return (\n          <div className=\"space-y-6\">\n            {project.video_url && (\n              <div className=\"aspect-video rounded-lg overflow-hidden bg-surface/20\">\n                <video\n                  src={project.video_url}\n                  poster={project.video_poster}\n                  controls\n                  className=\"w-full h-full object-cover\"\n                >\n                  Your browser does not support the video tag.\n                </video>\n              </div>\n            )}\n          </div>\n        );\n      case 'gallery':\n        return (\n          <div className=\"space-y-6\">\n            {project.gallery_images && project.gallery_images.length > 0 && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {project.gallery_images.map((image, index) => (\n                  <div key={index} className=\"aspect-square rounded-lg overflow-hidden bg-surface/20\">\n                    <Image\n                      src={image}\n                      alt={`${project.title} - Image ${index + 1}`}\n                      className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      case 'logo_gallery':\n        return (\n          <div className=\"space-y-6\">\n            <LogoCarousel images={project.gallery_images || []} />\n            {project.gallery_images && project.gallery_images.length > 0 && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-6\">\n                {project.gallery_images.map((image, index) => (\n                  <div key={index} className=\"aspect-square rounded-lg overflow-hidden bg-surface/20 p-4 flex items-center justify-center\">\n                    <Image\n                      src={image}\n                      alt={`Logo ${index + 1}`}\n                      className=\"max-w-full max-h-full object-contain hover:scale-110 transition-transform duration-300\"\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      default:\n        return (\n          <div className=\"space-y-6\">\n            {project.featured_image && (\n              <div className=\"aspect-video rounded-lg overflow-hidden bg-surface/20\">\n                <Image\n                  src={project.featured_image}\n                  alt={project.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Helmet>\n        <title>{project.title} - Project Details</title>\n        <meta name=\"description\" content={project.description} />\n      </Helmet>\n\n      <HeaderNavigation currentTheme={currentTheme} />\n\n      <main className=\"max-w-6xl mx-auto px-6 py-12\">\n        {/* Back button */}\n        <div className=\"mb-8\">\n          <Button\n            onClick={() => navigate('/projects-portfolio-grid')}\n            variant=\"ghost\"\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n            className=\"text-text-secondary hover:text-primary\"\n          >\n            Back to Projects\n          </Button>\n        </div>\n\n        {/* Project header */}\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <h1 className=\"text-4xl font-heading font-bold text-text-primary\">\n              {project.title}\n            </h1>\n            {project.featured && (\n              <Icon name=\"Star\" size={28} className=\"text-accent\" />\n            )}\n            <div className={`px-3 py-1 rounded-full text-sm font-caption ${\n              project.status === 'published' \n                ? 'bg-success/20 text-success border border-success/30' \n                : 'bg-warning/20 text-warning border border-warning/30'\n            }`}>\n              {project.status.toUpperCase()}\n            </div>\n            <div className={`px-3 py-1 rounded-full text-sm font-caption bg-primary/20 text-primary border border-primary/30`}>\n              {project.type?.replace('_', ' ').toUpperCase() || 'PROJECT'}\n            </div>\n          </div>\n\n          {project.description && (\n            <p className=\"text-lg text-text-secondary leading-relaxed max-w-4xl\">\n              {project.description}\n            </p>\n          )}\n        </div>\n\n        {/* Project content */}\n        <div className=\"mb-12\">\n          {renderProjectContent()}\n        </div>\n\n        {/* Project details */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n          {/* Main content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {project.content && (\n              <div>\n                <h2 className=\"text-2xl font-heading font-semibold text-text-primary mb-4\">\n                  Project Overview\n                </h2>\n                <div className=\"prose prose-lg text-text-secondary\">\n                  {project.content}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-8\">\n            {/* Technologies */}\n            {project.tags && project.tags.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-heading font-semibold text-text-primary mb-4\">\n                  Technologies\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {project.tags.map((tech, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm font-caption border border-primary/20\"\n                    >\n                      {tech}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Links */}\n            <div className=\"space-y-4\">\n              {project.github_url && (\n                <a\n                  href={project.github_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-3 p-4 bg-surface/20 rounded-lg border border-border-accent/20 hover:border-primary/30 transition-colors\"\n                >\n                  <Icon name=\"Github\" size={20} className=\"text-text-secondary\" />\n                  <span className=\"text-text-primary font-medium\">View Source Code</span>\n                  <Icon name=\"ExternalLink\" size={16} className=\"text-text-secondary ml-auto\" />\n                </a>\n              )}\n              {project.live_url && (\n                <a\n                  href={project.live_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-3 p-4 bg-surface/20 rounded-lg border border-border-accent/20 hover:border-primary/30 transition-colors\"\n                >\n                  <Icon name=\"ExternalLink\" size={20} className=\"text-text-secondary\" />\n                  <span className=\"text-text-primary font-medium\">View Live Project</span>\n                  <Icon name=\"ExternalLink\" size={16} className=\"text-text-secondary ml-auto\" />\n                </a>\n              )}\n            </div>\n\n            {/* Project stats */}\n            <div className=\"bg-surface/20 rounded-lg p-6 border border-border-accent/20\">\n              <h3 className=\"text-lg font-heading font-semibold text-text-primary mb-4\">\n                Project Stats\n              </h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-text-secondary\">Views</span>\n                  <span className=\"text-text-primary font-medium\">{project.view_count || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-text-secondary\">Likes</span>\n                  <span className=\"text-text-primary font-medium\">{project.like_count || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-text-secondary\">Created</span>\n                  <span className=\"text-text-primary font-medium\">\n                    {new Date(project.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <DynamicFooter currentTheme={currentTheme} />\n    </div>\n  );\n};\n\nexport default ProjectDetail;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/components/ProjectCard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [27, 67], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14,
        "fix": { "range": [27, 68], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [27, 67], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [75, 86], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 13,
        "fix": { "range": [68, 118], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [75, 86], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [125, 135], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12,
        "fix": { "range": [118, 166], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [125, 135], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [173, 185], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14,
        "fix": { "range": [166, 219], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [173, 185], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'onViewDetails' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 7,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onViewDetails" },
            "fix": { "range": [276, 291], "text": "" },
            "desc": "Remove unused variable 'onViewDetails'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../components/AppImage';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ProjectCard = ({ project, isAdmin, onEdit, onDelete, onViewDetails }) => {\n  return (\n    <div className=\"group relative bg-surface border border-border-accent/20 rounded-lg overflow-hidden hover:border-primary/40 transition-all duration-normal hover-glow-primary\">\n      {/* Project Link */}\n      <Link to={`/project/${project.id}`} className=\"block\">\n        {/* Project Image */}\n        <div className=\"relative h-48 overflow-hidden\">\n          <Image\n            src={project.image}\n            alt={project.title}\n            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-slow\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-normal\"></div>\n          \n          {/* Status Badge */}\n          {project.status && (\n            <div className={`absolute top-3 right-3 px-2 py-1 rounded-full text-xs font-caption ${\n              project.status === 'completed' \n                ? 'bg-success/20 text-success border border-success/30' \n                : project.status === 'in-progress' ?'bg-warning/20 text-warning border border-warning/30' :'bg-primary/20 text-primary border border-primary/30'\n            }`}>\n              {project.status.replace('-', ' ').toUpperCase()}\n            </div>\n          )}\n        </div>\n\n        {/* Project Content */}\n        <div className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <h3 className=\"font-heading font-semibold text-lg text-text-primary group-hover:text-primary transition-colors duration-fast line-clamp-2\">\n              {project.title}\n            </h3>\n            {project.featured && (\n              <Icon name=\"Star\" size={16} className=\"text-accent flex-shrink-0 ml-2\" />\n            )}\n          </div>\n\n          <p className=\"text-text-secondary text-sm mb-4 line-clamp-3 leading-relaxed\">\n            {project.description}\n          </p>\n\n          {/* Technologies */}\n          <div className=\"flex flex-wrap gap-1 mb-4\">\n            {(project.technologies || []).slice(0, 3).map((tech, index) => (\n              <span\n                key={index}\n                className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded-full font-caption border border-primary/20\"\n              >\n                {tech}\n              </span>\n            ))}\n            {(project.technologies || []).length > 3 && (\n              <span className=\"px-2 py-1 bg-surface text-text-secondary text-xs rounded-full font-caption\">\n                +{project.technologies.length - 3}\n              </span>\n            )}\n          </div>\n\n          {/* Project Links */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {project.liveUrl && (\n                <a\n                  href={project.liveUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"action-button flex items-center space-x-1 text-text-secondary hover:text-primary transition-colors duration-fast\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <Icon name=\"ExternalLink\" size={14} />\n                  <span className=\"text-xs font-caption\">Live</span>\n                </a>\n              )}\n              {project.githubUrl && (\n                <a\n                  href={project.githubUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"action-button flex items-center space-x-1 text-text-secondary hover:text-primary transition-colors duration-fast\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <Icon name=\"Github\" size={14} />\n                  <span className=\"text-xs font-caption\">Code</span>\n                </a>\n              )}\n            </div>\n\n            <div className=\"text-xs text-text-secondary font-caption\">\n              {project.completedDate}\n            </div>\n          </div>\n        </div>\n      </Link>\n\n      {/* Admin Actions */}\n      {isAdmin && (\n        <div className=\"flex items-center justify-end space-x-2 mt-4 pt-4 border-t border-border-accent/20 px-6 pb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"xs\"\n            iconName=\"Edit\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              onEdit(project);\n            }}\n            className=\"action-button text-warning hover:text-warning\"\n          >\n            Edit\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"xs\"\n            iconName=\"Trash2\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              onDelete(project);\n            }}\n            className=\"action-button text-error hover:text-error\"\n          >\n            Delete\n          </Button>\n        </div>\n      )}\n\n      {/* Hover Overlay */}\n      <div className=\"absolute inset-0 bg-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-normal pointer-events-none\"></div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/components/ProjectFilters.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 27], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [27, 75], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [34, 44], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [82, 94], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [75, 127], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [82, 94], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [134, 145], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [127, 178], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [134, 145], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst ProjectFilters = ({ \n  searchTerm, \n  onSearchChange, \n  selectedTechnology, \n  onTechnologyChange, \n  selectedStatus, \n  onStatusChange, \n  sortBy, \n  onSortChange, \n  onClearFilters,\n  technologies,\n  totalProjects,\n  filteredCount \n}) => {\n  const statusOptions = [\n    { value: '', label: 'All Status' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'in-progress', label: 'In Progress' },\n    { value: 'planning', label: 'Planning' }\n  ];\n\n  const sortOptions = [\n    { value: 'newest', label: 'Newest First' },\n    { value: 'oldest', label: 'Oldest First' },\n    { value: 'title', label: 'Title A-Z' },\n    { value: 'featured', label: 'Featured First' }\n  ];\n\n  const hasActiveFilters = searchTerm || selectedTechnology || selectedStatus || sortBy !== 'newest';\n\n  return (\n    <div className=\"bg-surface/50 backdrop-blur-sm border border-border-accent/20 rounded-lg p-6 mb-8\">\n      {/* Search Bar */}\n      <div className=\"relative mb-6\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <Icon name=\"Search\" size={18} className=\"text-text-secondary\" />\n        </div>\n        <Input\n          type=\"search\"\n          placeholder=\"Search projects by title, description, or technology...\"\n          value={searchTerm}\n          onChange={(e) => onSearchChange(e.target.value)}\n          className=\"pl-10 pr-4 py-3 w-full bg-background/50 border-border-accent/30 focus:border-primary/50 rounded-lg\"\n        />\n        {searchTerm && (\n          <button\n            onClick={() => onSearchChange('')}\n            className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-text-secondary hover:text-primary transition-colors duration-fast\"\n          >\n            <Icon name=\"X\" size={18} />\n          </button>\n        )}\n      </div>\n\n      {/* Filter Controls */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        {/* Technology Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            Technology\n          </label>\n          <select\n            value={selectedTechnology}\n            onChange={(e) => onTechnologyChange(e.target.value)}\n            className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast\"\n          >\n            <option value=\"\">All Technologies</option>\n            {technologies.map((tech) => (\n              <option key={tech} value={tech}>\n                {tech}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Status Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            Status\n          </label>\n          <select\n            value={selectedStatus}\n            onChange={(e) => onStatusChange(e.target.value)}\n            className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast\"\n          >\n            {statusOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Sort By */}\n        <div>\n          <label className=\"block text-sm font-medium text-text-primary mb-2\">\n            Sort By\n          </label>\n          <select\n            value={sortBy}\n            onChange={(e) => onSortChange(e.target.value)}\n            className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast\"\n          >\n            {sortOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Clear Filters */}\n        <div className=\"flex items-end\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"RotateCcw\"\n            onClick={onClearFilters}\n            disabled={!hasActiveFilters}\n            className=\"w-full\"\n          >\n            Clear Filters\n          </Button>\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"flex items-center justify-between text-sm\">\n        <div className=\"text-text-secondary font-caption\">\n          Showing {filteredCount} of {totalProjects} projects\n          {hasActiveFilters && (\n            <span className=\"text-primary ml-1\">(filtered)</span>\n          )}\n        </div>\n        \n        {hasActiveFilters && (\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Filter\" size={14} className=\"text-primary\" />\n            <span className=\"text-primary text-xs font-caption\">\n              Active filters applied\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectFilters;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/components/ProjectForm.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [52, 100], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [59, 69], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [107, 119], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 14,
        "fix": { "range": [100, 152], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [107, 119], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Input' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [159, 170], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Input' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13,
        "fix": { "range": [152, 203], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Input" },
            "fix": { "range": [159, 170], "text": "" },
            "desc": "Remove unused variable 'Input'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst ProjectForm = ({ project, isOpen, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    fullDescription: '',\n    image: '',\n    technologies: [],\n    status: 'planning',\n    featured: false,\n    liveUrl: '',\n    githubUrl: '',\n    completedDate: '',\n    duration: '',\n    client: '',\n    features: [],\n    challenges: ''\n  });\n\n  const [techInput, setTechInput] = useState('');\n  const [featureInput, setFeatureInput] = useState('');\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    if (project) {\n      setFormData({\n        ...project,\n        technologies: project.technologies || [],\n        features: project.features || []\n      });\n    } else {\n      setFormData({\n        title: '',\n        description: '',\n        fullDescription: '',\n        image: '',\n        technologies: [],\n        status: 'planning',\n        featured: false,\n        liveUrl: '',\n        githubUrl: '',\n        completedDate: '',\n        duration: '',\n        client: '',\n        features: [],\n        challenges: ''\n      });\n    }\n    setErrors({});\n  }, [project, isOpen]);\n\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n\n  const addTechnology = () => {\n    if (techInput.trim() && !formData.technologies.includes(techInput.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        technologies: [...prev.technologies, techInput.trim()]\n      }));\n      setTechInput('');\n    }\n  };\n\n  const removeTechnology = (tech) => {\n    setFormData(prev => ({\n      ...prev,\n      technologies: prev.technologies.filter(t => t !== tech)\n    }));\n  };\n\n  const addFeature = () => {\n    if (featureInput.trim() && !formData.features.includes(featureInput.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        features: [...prev.features, featureInput.trim()]\n      }));\n      setFeatureInput('');\n    }\n  };\n\n  const removeFeature = (feature) => {\n    setFormData(prev => ({\n      ...prev,\n      features: prev.features.filter(f => f !== feature)\n    }));\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.title.trim()) {\n      newErrors.title = 'Title is required';\n    }\n    \n    if (!formData.description.trim()) {\n      newErrors.description = 'Description is required';\n    }\n    \n    if (!formData.image.trim()) {\n      newErrors.image = 'Image URL is required';\n    }\n    \n    if (formData.technologies.length === 0) {\n      newErrors.technologies = 'At least one technology is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      const projectData = {\n        ...formData,\n        id: project?.id || Date.now().toString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      onSave(projectData);\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-background/80 backdrop-blur-sm\"\n        onClick={onClose}\n      ></div>\n\n      {/* Modal Content */}\n      <div className=\"relative bg-surface border border-border-accent/30 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-glow-primary\">\n        {/* Header */}\n        <div className=\"sticky top-0 bg-surface/95 backdrop-blur-sm border-b border-border-accent/20 p-6 flex items-center justify-between\">\n          <h2 className=\"font-heading font-bold text-xl text-text-primary\">\n            {project ? 'Edit Project' : 'Add New Project'}\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"X\"\n            onClick={onClose}\n            className=\"text-text-secondary hover:text-primary\"\n          />\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Project Title *\n              </label>\n              <Input\n                type=\"text\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                placeholder=\"Enter project title\"\n                className={errors.title ? 'border-error' : ''}\n              />\n              {errors.title && (\n                <p className=\"text-error text-xs mt-1\">{errors.title}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Image URL *\n              </label>\n              <Input\n                type=\"url\"\n                value={formData.image}\n                onChange={(e) => handleInputChange('image', e.target.value)}\n                placeholder=\"https://example.com/image.jpg\"\n                className={errors.image ? 'border-error' : ''}\n              />\n              {errors.image && (\n                <p className=\"text-error text-xs mt-1\">{errors.image}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">\n              Short Description *\n            </label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              placeholder=\"Brief description for project cards\"\n              rows={3}\n              className={`w-full px-3 py-2 bg-background/50 border rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast resize-none ${\n                errors.description ? 'border-error' : 'border-border-accent/30'\n              }`}\n            />\n            {errors.description && (\n              <p className=\"text-error text-xs mt-1\">{errors.description}</p>\n            )}\n          </div>\n\n          {/* Full Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">\n              Full Description\n            </label>\n            <textarea\n              value={formData.fullDescription}\n              onChange={(e) => handleInputChange('fullDescription', e.target.value)}\n              placeholder=\"Detailed project description for modal view\"\n              rows={4}\n              className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast resize-none\"\n            />\n          </div>\n\n          {/* Technologies */}\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">\n              Technologies *\n            </label>\n            <div className=\"flex space-x-2 mb-3\">\n              <Input\n                type=\"text\"\n                value={techInput}\n                onChange={(e) => setTechInput(e.target.value)}\n                placeholder=\"Add technology\"\n                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTechnology())}\n                className=\"flex-1\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                iconName=\"Plus\"\n                onClick={addTechnology}\n              >\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {formData.technologies.map((tech, index) => (\n                <span\n                  key={index}\n                  className=\"flex items-center space-x-1 px-3 py-1 bg-primary/10 text-primary text-sm rounded-md border border-primary/20\"\n                >\n                  <span>{tech}</span>\n                  <button\n                    type=\"button\"\n                    onClick={() => removeTechnology(tech)}\n                    className=\"text-primary hover:text-error transition-colors duration-fast\"\n                  >\n                    <Icon name=\"X\" size={14} />\n                  </button>\n                </span>\n              ))}\n            </div>\n            {errors.technologies && (\n              <p className=\"text-error text-xs mt-1\">{errors.technologies}</p>\n            )}\n          </div>\n\n          {/* Project Details */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Status\n              </label>\n              <select\n                value={formData.status}\n                onChange={(e) => handleInputChange('status', e.target.value)}\n                className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast\"\n              >\n                <option value=\"planning\">Planning</option>\n                <option value=\"in-progress\">In Progress</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Completed Date\n              </label>\n              <Input\n                type=\"date\"\n                value={formData.completedDate}\n                onChange={(e) => handleInputChange('completedDate', e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Duration\n              </label>\n              <Input\n                type=\"text\"\n                value={formData.duration}\n                onChange={(e) => handleInputChange('duration', e.target.value)}\n                placeholder=\"e.g., 3 months\"\n              />\n            </div>\n          </div>\n\n          {/* URLs and Client */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Live URL\n              </label>\n              <Input\n                type=\"url\"\n                value={formData.liveUrl}\n                onChange={(e) => handleInputChange('liveUrl', e.target.value)}\n                placeholder=\"https://project-demo.com\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                GitHub URL\n              </label>\n              <Input\n                type=\"url\"\n                value={formData.githubUrl}\n                onChange={(e) => handleInputChange('githubUrl', e.target.value)}\n                placeholder=\"https://github.com/username/repo\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-text-primary mb-2\">\n                Client\n              </label>\n              <Input\n                type=\"text\"\n                value={formData.client}\n                onChange={(e) => handleInputChange('client', e.target.value)}\n                placeholder=\"Client name or 'Personal'\"\n              />\n            </div>\n          </div>\n\n          {/* Features */}\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">\n              Key Features\n            </label>\n            <div className=\"flex space-x-2 mb-3\">\n              <Input\n                type=\"text\"\n                value={featureInput}\n                onChange={(e) => setFeatureInput(e.target.value)}\n                placeholder=\"Add key feature\"\n                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addFeature())}\n                className=\"flex-1\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                iconName=\"Plus\"\n                onClick={addFeature}\n              >\n                Add\n              </Button>\n            </div>\n            <div className=\"space-y-2\">\n              {formData.features.map((feature, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-2 bg-background/50 border border-border-accent/20 rounded-lg\"\n                >\n                  <span className=\"text-text-primary text-sm\">{feature}</span>\n                  <button\n                    type=\"button\"\n                    onClick={() => removeFeature(feature)}\n                    className=\"text-text-secondary hover:text-error transition-colors duration-fast\"\n                  >\n                    <Icon name=\"X\" size={16} />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Challenges */}\n          <div>\n            <label className=\"block text-sm font-medium text-text-primary mb-2\">\n              Technical Challenges\n            </label>\n            <textarea\n              value={formData.challenges}\n              onChange={(e) => handleInputChange('challenges', e.target.value)}\n              placeholder=\"Describe technical challenges faced and how they were solved\"\n              rows={3}\n              className=\"w-full px-3 py-2 bg-background/50 border border-border-accent/30 rounded-lg text-text-primary focus:border-primary/50 focus:outline-none transition-colors duration-fast resize-none\"\n            />\n          </div>\n\n          {/* Featured Toggle */}\n          <div className=\"flex items-center space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"featured\"\n              checked={formData.featured}\n              onChange={(e) => handleInputChange('featured', e.target.checked)}\n              className=\"w-4 h-4 text-primary bg-background border-border-accent/30 rounded focus:ring-primary/50\"\n            />\n            <label htmlFor=\"featured\" className=\"text-sm font-medium text-text-primary\">\n              Mark as featured project\n            </label>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 pt-6 border-t border-border-accent/20\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              iconName=\"Save\"\n            >\n              {project ? 'Update Project' : 'Create Project'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectForm;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/components/ProjectModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [49, 60], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 13,
        "fix": { "range": [42, 92], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Image" },
            "fix": { "range": [49, 60], "text": "" },
            "desc": "Remove unused variable 'Image'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [99, 109], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [92, 140], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [99, 109], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [147, 159], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [140, 193], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [147, 159], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useEffect } from 'react';\nimport Image from '../../../components/AppImage';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ProjectModal = ({ project, isOpen, onClose }) => {\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !project) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-background/80 backdrop-blur-sm\"\n        onClick={onClose}\n      ></div>\n\n      {/* Modal Content */}\n      <div className=\"relative bg-surface border border-border-accent/30 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-glow-primary\">\n        {/* Header */}\n        <div className=\"sticky top-0 bg-surface/95 backdrop-blur-sm border-b border-border-accent/20 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <h2 className=\"font-heading font-bold text-xl text-text-primary\">\n              {project.title}\n            </h2>\n            {project.featured && (\n              <Icon name=\"Star\" size={20} className=\"text-accent\" />\n            )}\n            <div className={`px-2 py-1 rounded-full text-xs font-caption ${\n              project.status === 'completed' \n                ? 'bg-success/20 text-success border border-success/30' \n                : project.status === 'in-progress' ?'bg-warning/20 text-warning border border-warning/30' :'bg-primary/20 text-primary border border-primary/30'\n            }`}>\n              {project.status.replace('-', ' ').toUpperCase()}\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"X\"\n            onClick={onClose}\n            className=\"text-text-secondary hover:text-primary\"\n          />\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Project Image */}\n          <div className=\"relative h-64 md:h-80 rounded-lg overflow-hidden mb-6\">\n            <Image\n              src={project.image}\n              alt={project.title}\n              className=\"w-full h-full object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-background/60 via-transparent to-transparent\"></div>\n          </div>\n\n          {/* Project Details */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Description */}\n              <div>\n                <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                  Project Overview\n                </h3>\n                <p className=\"text-text-secondary leading-relaxed\">\n                  {project.fullDescription || project.description}\n                </p>\n              </div>\n\n              {/* Features */}\n              {project.features && (\n                <div>\n                  <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                    Key Features\n                  </h3>\n                  <ul className=\"space-y-2\">\n                    {project.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start space-x-2\">\n                        <Icon name=\"CheckCircle\" size={16} className=\"text-success mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-text-secondary\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Challenges */}\n              {project.challenges && (\n                <div>\n                  <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                    Technical Challenges\n                  </h3>\n                  <p className=\"text-text-secondary leading-relaxed\">\n                    {project.challenges}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Project Links */}\n              <div>\n                <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                  Project Links\n                </h3>\n                <div className=\"space-y-3\">\n                  {project.liveUrl && (\n                    <a\n                      href={project.liveUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center space-x-2 p-3 bg-primary/10 border border-primary/20 rounded-lg hover:bg-primary/20 transition-colors duration-fast\"\n                    >\n                      <Icon name=\"ExternalLink\" size={18} className=\"text-primary\" />\n                      <span className=\"text-primary font-medium\">View Live Demo</span>\n                    </a>\n                  )}\n                  {project.githubUrl && (\n                    <a\n                      href={project.githubUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center space-x-2 p-3 bg-text-secondary/10 border border-text-secondary/20 rounded-lg hover:bg-text-secondary/20 transition-colors duration-fast\"\n                    >\n                      <Icon name=\"Github\" size={18} className=\"text-text-secondary\" />\n                      <span className=\"text-text-secondary font-medium\">View Source Code</span>\n                    </a>\n                  )}\n                </div>\n              </div>\n\n              {/* Technologies */}\n              <div>\n                <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                  Technologies Used\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {project.technologies.map((tech, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-primary/10 text-primary text-sm rounded-md font-caption border border-primary/20\"\n                    >\n                      {tech}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* Project Info */}\n              <div>\n                <h3 className=\"font-heading font-semibold text-lg text-text-primary mb-3\">\n                  Project Info\n                </h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-text-secondary\">Completed:</span>\n                    <span className=\"text-text-primary font-medium\">{project.completedDate}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-text-secondary\">Duration:</span>\n                    <span className=\"text-text-primary font-medium\">{project.duration || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-text-secondary\">Client:</span>\n                    <span className=\"text-text-primary font-medium\">{project.client || 'Personal'}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectModal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/components/ProjectSkeleton.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [0, 28], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 18], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import React from 'react';\n\nconst ProjectSkeleton = () => {\n  return (\n    <div className=\"bg-surface border border-border-accent/20 rounded-lg overflow-hidden animate-pulse\">\n      {/* Image Skeleton */}\n      <div className=\"h-48 bg-background/50\"></div>\n      \n      {/* Content Skeleton */}\n      <div className=\"p-6\">\n        {/* Title and Status */}\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"h-6 bg-background/50 rounded w-3/4\"></div>\n          <div className=\"h-4 bg-background/50 rounded w-16\"></div>\n        </div>\n        \n        {/* Description */}\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"h-4 bg-background/50 rounded w-full\"></div>\n          <div className=\"h-4 bg-background/50 rounded w-5/6\"></div>\n          <div className=\"h-4 bg-background/50 rounded w-2/3\"></div>\n        </div>\n        \n        {/* Technology Tags */}\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          <div className=\"h-6 bg-background/50 rounded w-16\"></div>\n          <div className=\"h-6 bg-background/50 rounded w-20\"></div>\n          <div className=\"h-6 bg-background/50 rounded w-14\"></div>\n          <div className=\"h-6 bg-background/50 rounded w-18\"></div>\n        </div>\n        \n        {/* Footer */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-4 bg-background/50 rounded w-12\"></div>\n            <div className=\"h-4 bg-background/50 rounded w-12\"></div>\n          </div>\n          <div className=\"h-4 bg-background/50 rounded w-20\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectSkeleton;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/projects-portfolio-grid/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Helmet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [61, 99], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Helmet' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "fix": { "range": [61, 100], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Helmet" },
            "fix": { "range": [61, 99], "text": "" },
            "desc": "Remove unused variable 'Helmet'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [107, 117], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 12,
        "fix": { "range": [100, 145], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [107, 117], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [152, 164], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14,
        "fix": { "range": [145, 194], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Button" },
            "fix": { "range": [152, 164], "text": "" },
            "desc": "Remove unused variable 'Button'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectCard" },
            "fix": { "range": [201, 218], "text": "" },
            "desc": "Remove unused variable 'ProjectCard'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectCard' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 19,
        "fix": { "range": [194, 246], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectCard" },
            "fix": { "range": [201, 218], "text": "" },
            "desc": "Remove unused variable 'ProjectCard'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectFilters" },
            "fix": { "range": [253, 273], "text": "" },
            "desc": "Remove unused variable 'ProjectFilters'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectFilters' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 22,
        "fix": { "range": [246, 304], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectFilters" },
            "fix": { "range": [253, 273], "text": "" },
            "desc": "Remove unused variable 'ProjectFilters'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectModal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectModal" },
            "fix": { "range": [311, 329], "text": "" },
            "desc": "Remove unused variable 'ProjectModal'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectModal' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 20,
        "fix": { "range": [304, 358], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectModal" },
            "fix": { "range": [311, 329], "text": "" },
            "desc": "Remove unused variable 'ProjectModal'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectForm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectForm" },
            "fix": { "range": [365, 382], "text": "" },
            "desc": "Remove unused variable 'ProjectForm'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectForm' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 19,
        "fix": { "range": [358, 410], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectForm" },
            "fix": { "range": [365, 382], "text": "" },
            "desc": "Remove unused variable 'ProjectForm'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'ProjectSkeleton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectSkeleton" },
            "fix": { "range": [417, 438], "text": "" },
            "desc": "Remove unused variable 'ProjectSkeleton'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'ProjectSkeleton' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 23,
        "fix": { "range": [410, 470], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ProjectSkeleton" },
            "fix": { "range": [417, 438], "text": "" },
            "desc": "Remove unused variable 'ProjectSkeleton'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 55,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 9,
    "source": "import React, { useState, useEffect, useMemo } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport ProjectCard from './components/ProjectCard';\nimport ProjectFilters from './components/ProjectFilters';\nimport ProjectModal from './components/ProjectModal';\nimport ProjectForm from './components/ProjectForm';\nimport ProjectSkeleton from './components/ProjectSkeleton';\nimport projectService from '../../utils/projectService';\n\nconst ProjectsPortfolioGrid = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTechnology, setSelectedTechnology] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('');\n  const [sortBy, setSortBy] = useState('newest');\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingProject, setEditingProject] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Load projects from Supabase\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        setLoading(true);\n        const res = await projectService.getPublishedProjects();\n        if (!mounted) return;\n        if (res.success) {\n          const normalized = (res.data || []).map((p) => ({\n            id: p.id,\n            title: p.title,\n            description: p.description,\n            fullDescription: p.content || p.description,\n            image: p.featured_image || '/assets/images/no_image.png',\n            technologies: p.technologies || [],\n            status: p.status === 'published' ? 'completed' : p.status,\n            featured: !!p.featured,\n            liveUrl: p.live_url || '',\n            githubUrl: p.github_url || '',\n            completedDate: (p.updated_at || p.created_at || '').slice(0, 10),\n            duration: '',\n            client: 'Personal',\n            features: [],\n            challenges: ''\n          }));\n          setProjects(normalized);\n        } else {\n          setProjects([]);\n        }\n      } catch (e) {\n        setProjects([]);\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  // Check admin status (mock implementation)\n  useEffect(() => {\n    const adminStatus = localStorage.getItem('isAdmin') === 'true';\n    setIsAdmin(adminStatus);\n  }, []);\n\n  // Get unique technologies for filter\n  const allTechnologies = useMemo(() => {\n    const techs = new Set();\n    projects.forEach(project => {\n      project.technologies.forEach(tech => techs.add(tech));\n    });\n    return Array.from(techs).sort();\n  }, [projects]);\n\n  // Filter and sort projects\n  const filteredProjects = useMemo(() => {\n    let filtered = projects.filter(project => {\n      const matchesSearch = !searchTerm || \n        project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        project.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        project.technologies.some(tech => tech.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      const matchesTechnology = !selectedTechnology || \n        project.technologies.includes(selectedTechnology);\n      \n      const matchesStatus = !selectedStatus || project.status === selectedStatus;\n      \n      return matchesSearch && matchesTechnology && matchesStatus;\n    });\n\n    // Sort projects\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'oldest':\n          return new Date(a.completedDate || '1970-01-01') - new Date(b.completedDate || '1970-01-01');\n        case 'title':\n          return a.title.localeCompare(b.title);\n        case 'featured':\n          if (a.featured && !b.featured) return -1;\n          if (!a.featured && b.featured) return 1;\n          return new Date(b.completedDate || '1970-01-01') - new Date(a.completedDate || '1970-01-01');\n        case 'newest':\n        default:\n          return new Date(b.completedDate || '1970-01-01') - new Date(a.completedDate || '1970-01-01');\n      }\n    });\n\n    return filtered;\n  }, [projects, searchTerm, selectedTechnology, selectedStatus, sortBy]);\n\n  const handleClearFilters = () => {\n    setSearchTerm('');\n    setSelectedTechnology('');\n    setSelectedStatus('');\n    setSortBy('newest');\n  };\n\n  const handleViewDetails = (project) => {\n    setSelectedProject(project);\n    setIsModalOpen(true);\n  };\n\n  const handleEditProject = (project) => {\n    setEditingProject(project);\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteProject = (project) => {\n    if (window.confirm(`Are you sure you want to delete \"${project.title}\"?`)) {\n      setProjects(prev => prev.filter(p => p.id !== project.id));\n    }\n  };\n\n  const handleSaveProject = (projectData) => {\n    if (editingProject) {\n      // Update existing project\n      setProjects(prev => prev.map(p => p.id === projectData.id ? projectData : p));\n    } else {\n      // Add new project\n      setProjects(prev => [projectData, ...prev]);\n    }\n    setEditingProject(null);\n  };\n\n  const handleAddProject = () => {\n    setEditingProject(null);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Mikael Kraft — Projects</title>\n        <meta name=\"description\" content=\"Explore Mikael Kraft's complete portfolio of web development, blockchain, and machine learning projects. View live demos, source code, and technical details.\" />\n        <meta name=\"keywords\" content=\"portfolio, projects, web development, React, blockchain, machine learning, cyberpunk\" />\n        <meta property=\"og:title\" content=\"Mikael Kraft — Projects\" />\n        <meta property=\"og:description\" content=\"A curated portfolio of software engineering projects by Mikael Kraft.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://mkraft.tech/projects\" />\n        <meta property=\"og:image\" content=\"/assets/images/no_image.png\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"@mikael_kraft\" />\n        <meta name=\"twitter:creator\" content=\"@mikael_kraft\" />\n        <link rel=\"canonical\" href=\"https://mkraft.tech/projects\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background pt-20 pb-16\">\n        <div className=\"max-w-9xl mx-auto px-6 lg:px-8\">\n          {/* Page Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center space-x-2 px-4 py-2 bg-primary/10 border border-primary/20 rounded-full mb-6\">\n              <Icon name=\"FolderOpen\" size={18} className=\"text-primary\" />\n              <span className=\"text-primary font-caption text-sm\">Portfolio Showcase</span>\n            </div>\n            \n            <h1 className=\"font-heading font-bold text-4xl md:text-5xl lg:text-6xl text-text-primary mb-6\">\n              Project <span className=\"text-primary\">Portfolio</span>\n            </h1>\n            \n            <p className=\"text-text-secondary text-lg md:text-xl max-w-3xl mx-auto leading-relaxed\">\n              Explore my collection of innovative projects spanning web development, blockchain technology, \n              machine learning, and cyberpunk-themed applications. Each project represents a unique challenge \n              and creative solution.\n            </p>\n          </div>\n\n          {/* Filters */}\n          <ProjectFilters\n            searchTerm={searchTerm}\n            onSearchChange={setSearchTerm}\n            selectedTechnology={selectedTechnology}\n            onTechnologyChange={setSelectedTechnology}\n            selectedStatus={selectedStatus}\n            onStatusChange={setSelectedStatus}\n            sortBy={sortBy}\n            onSortChange={setSortBy}\n            onClearFilters={handleClearFilters}\n            technologies={allTechnologies}\n            totalProjects={projects.length}\n            filteredCount={filteredProjects.length}\n          />\n\n          {/* Projects Grid */}\n          {loading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 6 }).map((_, index) => (\n                <ProjectSkeleton key={index} />\n              ))}\n            </div>\n          ) : filteredProjects.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredProjects.map((project) => (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  isAdmin={isAdmin}\n                  onEdit={handleEditProject}\n                  onDelete={handleDeleteProject}\n                  onViewDetails={handleViewDetails}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 mx-auto mb-6 bg-surface rounded-full flex items-center justify-center\">\n                <Icon name=\"Search\" size={32} className=\"text-text-secondary\" />\n              </div>\n              <h3 className=\"font-heading font-semibold text-xl text-text-primary mb-2\">\n                No Projects Found\n              </h3>\n              <p className=\"text-text-secondary mb-6\">\n                Try adjusting your search criteria or filters to find more projects.\n              </p>\n              <Button\n                variant=\"outline\"\n                iconName=\"RotateCcw\"\n                onClick={handleClearFilters}\n              >\n                Clear All Filters\n              </Button>\n            </div>\n          )}\n\n          {/* Admin Floating Action Button */}\n          {isAdmin && (\n            <div className=\"fixed bottom-8 right-8 z-40\">\n              <Button\n                variant=\"primary\"\n                size=\"lg\"\n                iconName=\"Plus\"\n                onClick={handleAddProject}\n                className=\"rounded-full w-14 h-14 shadow-glow-primary hover:scale-110 transition-transform duration-fast\"\n                title=\"Add New Project\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Project Detail Modal */}\n        <ProjectModal\n          project={selectedProject}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedProject(null);\n          }}\n        />\n\n        {/* Project Form Modal */}\n        <ProjectForm\n          project={editingProject}\n          isOpen={isFormOpen}\n          onClose={() => {\n            setIsFormOpen(false);\n            setEditingProject(null);\n          }}\n          onSave={handleSaveProject}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ProjectsPortfolioGrid;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/pages/search/index.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'React' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'React' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13,
        "fix": { "range": [6, 13], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "React" },
            "fix": { "range": [7, 13], "text": "" },
            "desc": "Remove unused variable 'React'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [76, 82], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 31,
        "fix": { "range": [76, 82], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Link" },
            "fix": { "range": [76, 82], "text": "" },
            "desc": "Remove unused variable 'Link'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [162, 184], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'HeaderNavigation' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24,
        "fix": { "range": [155, 218], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "HeaderNavigation" },
            "fix": { "range": [162, 184], "text": "" },
            "desc": "Remove unused variable 'HeaderNavigation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'Icon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [268, 278], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'Icon' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12,
        "fix": { "range": [261, 301], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [268, 278], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "import React, { useEffect, useState } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport blogService from 'utils/blogService';\nimport HeaderNavigation from 'components/ui/HeaderNavigation';\nimport useFeature from 'hooks/useFeature';\nimport Icon from 'components/AppIcon';\n\nexport default function SearchResultsPage() {\n  const [params] = useSearchParams();\n  const q = params.get('q') || '';\n  const enabled = useFeature('full_text_search', true);\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let active = true;\n    if (!enabled || !q.trim()) { setResults([]); return; }\n    setLoading(true); setError(null);\n    (async () => {\n      const res = await blogService.searchPosts(q.trim());\n      if (!active) return;\n      if (res.success) setResults(res.data);\n      else setError(res.error || 'Search failed');\n      setLoading(false);\n    })();\n    return () => { active = false; };\n  }, [q, enabled]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeaderNavigation />\n      <main className=\"max-w-4xl mx-auto px-6 pt-28 pb-16\">\n        <h1 className=\"text-2xl font-semibold mb-6 flex items-center gap-2\"><Icon name=\"Search\" size={22}/> Search</h1>\n        {!enabled && <p className=\"text-text-secondary\">Search is currently disabled.</p>}\n        {enabled && (\n          <>\n            <p className=\"text-sm text-text-secondary mb-4\">Query: <span className=\"font-mono text-text-primary\">{q || '—'}</span></p>\n            {loading && <p className=\"text-sm text-text-secondary\">Searching…</p>}\n            {error && <p className=\"text-error text-sm\">{error}</p>}\n            {!loading && !error && enabled && q && results.length === 0 && (\n              <p className=\"text-sm text-text-secondary\">No results found.</p>\n            )}\n            <ul className=\"space-y-4\">\n              {results.map(r => {\n                const snippetHtml = r.snippet || '';\n                const hasSnippet = /<mark>/i.test(snippetHtml);\n                return (\n                  <li key={r.id} className=\"p-4 rounded border border-border-accent/20 bg-surface hover:border-primary/60 transition\">\n                    <Link to={`/blog/${r.slug}`} className=\"group block\">\n                      <h2 className=\"font-medium group-hover:text-primary line-clamp-1\">{r.title}</h2>\n                      {hasSnippet && (\n                        <p className=\"text-sm text-text-secondary mt-1 line-clamp-3\" dangerouslySetInnerHTML={{ __html: snippetHtml }} />\n                      )}\n                      {!hasSnippet && r.excerpt && (\n                        <p className=\"text-sm text-text-secondary line-clamp-2 mt-1\">{r.excerpt}</p>\n                      )}\n                      <div className=\"mt-2 text-[10px] uppercase tracking-wide text-text-secondary/70 flex items-center gap-2\">\n                        {r.published_at && <time dateTime={r.published_at}>{new Date(r.published_at).toLocaleDateString()}</time>}\n                        {typeof r.rank === 'number' && <span>Rank: {r.rank.toFixed(2)}</span>}\n                      </div>\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/adsense.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'_' is defined but never used.",
        "line": 44,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Minimal AdSense script loader to ensure we only inject once per publisher\nlet loadedClientId = null;\nlet loadPromise = null;\n\nexport function ensureAdSenseLoaded(publisherId) {\n  if (!publisherId || typeof document === 'undefined') return Promise.resolve(false);\n  const clientParam = `ca-pub-${publisherId.replace('ca-pub-', '')}`;\n\n  // If already loaded for this client, resolve\n  if (loadedClientId === clientParam && window.adsbygoogle) return Promise.resolve(true);\n\n  // If a script with this client already exists in DOM\n  const existing = Array.from(document.querySelectorAll('script[src*=\"pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"]'))\n    .find(s => s.src.includes(`client=${clientParam}`));\n  if (existing) {\n    loadedClientId = clientParam;\n    return Promise.resolve(true);\n  }\n\n  if (loadPromise) return loadPromise;\n\n  loadPromise = new Promise(resolve => {\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${clientParam}`;\n    script.crossOrigin = 'anonymous';\n    script.onload = () => {\n      loadedClientId = clientParam;\n      resolve(true);\n    };\n    script.onerror = () => resolve(false);\n    document.head.appendChild(script);\n  });\n\n  return loadPromise;\n}\n\nexport function pushAd() {\n  try {\n    if (typeof window !== 'undefined' && window.adsbygoogle) {\n      window.adsbygoogle.push({});\n      return true;\n    }\n  } catch (_) {}\n  return false;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/api/client.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/authService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'_' is defined but never used.",
        "line": 12,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'userData' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 84,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "userData" },
            "fix": { "range": [2781, 2796], "text": "" },
            "desc": "Remove unused variable 'userData'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'_' is defined but never used.",
        "line": 105,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supabase from './supabase';\n\nexport const ADMIN_EMAIL = 'mikewillkraft@gmail.com';\n\nclass AuthService {\n  // Detect local/dev environment (Vite)\n  isDevEnv() {\n    try {\n      const viteDev = typeof import.meta !== 'undefined' && import.meta && import.meta.env && !!import.meta.env.DEV;\n      const isLocalhost = typeof window !== 'undefined' && ['localhost', '127.0.0.1'].includes(window.location.hostname);\n      return !!(viteDev || isLocalhost);\n    } catch (_) {\n      return false;\n    }\n  }\n  // Sign in with email and password\n  async signIn(email, password) {\n    try {\n      // Restrict sign-in to admin email only\n      if (!email || email.toLowerCase() !== ADMIN_EMAIL.toLowerCase()) {\n        return { success: false, error: 'Access denied. This portal is for the admin only.' };\n      }\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Ensure admin profile exists/updated\n      try {\n        if (data?.user?.id) {\n          await this.ensureAdminProfile(data.user.id, email);\n        }\n  } catch {}\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('AuthRetryableFetchError')) {\n        return { \n          success: false, \n          error: 'Cannot connect to authentication service. Your Supabase project may be paused or inactive. Please check your Supabase dashboard and resume your project if needed.' \n        };\n      }\n      return { success: false, error: 'An unexpected error occurred during sign in' };\n    }\n  }\n\n  // Sign in with OAuth (Google/GitHub)\n  async signInWithOAuth(provider) {\n    try {\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider,\n        options: {\n          redirectTo: `${window.location.origin}/admin-dashboard-content-management`,\n          queryParams: {\n            access_type: 'offline',\n            prompt: 'consent',\n          }\n        }\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('AuthRetryableFetchError')) {\n        return { \n          success: false, \n          error: 'Cannot connect to authentication service. Your Supabase project may be paused or inactive. Please check your Supabase dashboard and resume your project if needed.' \n        };\n      }\n      return { success: false, error: 'An unexpected error occurred during OAuth sign in' };\n    }\n  }\n\n  // Sign up new user\n  async signUp(email, password, userData = {}) {\n    // Public signup is intentionally disabled; keep simple deterministic response\n    return { success: false, error: 'Signup is disabled. Please contact the site owner.' };\n  }\n\n  // Sign out\n  async signOut() {\n    try {\n      const { error } = await supabase.auth.signOut();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Dev-only cleanup\n      try {\n        if (typeof window !== 'undefined') {\n          window.localStorage.removeItem('dev_admin');\n          window.localStorage.removeItem('dev_admin_email');\n          window.localStorage.removeItem('dev_admin_code');\n        }\n      } catch (_) {}\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to authentication service. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'An unexpected error occurred during sign out' };\n    }\n  }\n\n  // Request email OTP or magic link (admin email only)\n  async requestOtp(email) {\n    try {\n      if (!email || email.toLowerCase() !== ADMIN_EMAIL.toLowerCase()) {\n        return { success: false, error: 'This email is not allowed.' };\n      }\n      // Local dev fallback: generate a code and store it locally\n      if (this.isDevEnv()) {\n        const code = String(Math.floor(100000 + Math.random() * 900000));\n        if (typeof window !== 'undefined') {\n          window.localStorage.setItem('dev_admin_email', email);\n          window.localStorage.setItem('dev_admin_code', code);\n          // Surface in console for local testing\n          console.warn('[DEV ONLY] Admin OTP code:', code);\n        }\n        return { success: true, data: { dev: true } };\n      }\n\n      const { data, error } = await supabase.auth.signInWithOtp({\n        email,\n        options: {\n          emailRedirectTo: typeof window !== 'undefined' ? window.location.origin : undefined,\n          shouldCreateUser: true,\n        },\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (\n        error?.message?.includes('Failed to fetch') ||\n        error?.message?.includes('AuthRetryableFetchError')\n      ) {\n        return {\n          success: false,\n          error:\n            'Cannot connect to authentication service. Your Supabase project may be paused or inactive. Please check your Supabase dashboard and resume your project if needed.',\n        };\n      }\n      return { success: false, error: 'Failed to send OTP' };\n    }\n  }\n\n  // Verify email OTP code\n  async verifyOtp(email, token) {\n    try {\n      if (!email || email.toLowerCase() !== ADMIN_EMAIL.toLowerCase()) {\n        return { success: false, error: 'This email is not allowed.' };\n      }\n\n      // Local dev fallback: accept local code and set dev admin flag\n      if (this.isDevEnv()) {\n        const storedEmail = typeof window !== 'undefined' ? window.localStorage.getItem('dev_admin_email') : null;\n        const storedCode = typeof window !== 'undefined' ? window.localStorage.getItem('dev_admin_code') : null;\n        if (storedEmail && storedCode && storedEmail.toLowerCase() === email.toLowerCase() && String(token) === String(storedCode)) {\n          try {\n            window.localStorage.setItem('dev_admin', 'true');\n            window.localStorage.removeItem('dev_admin_code');\n          } catch {}\n          return { success: true, data: { dev: true } };\n        }\n        return { success: false, error: 'Invalid code (dev)' };\n      }\n\n      const { data, error } = await supabase.auth.verifyOtp({\n        email,\n        token,\n        type: 'email',\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Ensure profile exists/updated\n      if (data?.user?.id) {\n        await this.ensureAdminProfile(data.user.id, email);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (\n        error?.message?.includes('Failed to fetch') ||\n        error?.message?.includes('AuthRetryableFetchError')\n      ) {\n        // Clear dev admin flag then return error (previous code had unreachable cleanup)\n        try {\n          if (typeof window !== 'undefined') {\n            window.localStorage.removeItem('dev_admin');\n            window.localStorage.removeItem('dev_admin_email');\n            window.localStorage.removeItem('dev_admin_code');\n          }\n        } catch {\n          // ignore cleanup errors\n        }\n        return {\n          success: false,\n          error:\n            'Cannot connect to authentication service. Your Supabase project may be paused or inactive. Please check your Supabase dashboard and resume your project if needed.',\n        };\n      }\n      return { success: false, error: 'Invalid or expired OTP' };\n    }\n  }\n\n  async ensureAdminProfile(userId, email) {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .upsert(\n          {\n            id: userId,\n            email,\n            full_name: email.split('@')[0],\n            role: 'admin',\n            updated_at: new Date().toISOString(),\n          },\n          { onConflict: 'id' }\n        )\n        .select('id')\n        .single();\n\n      if (error) {\n  console.warn('ensureAdminProfile error:', error);\n      }\n      return { success: true, data };\n    } catch (e) {\n      console.warn('ensureAdminProfile catch:', e);\n      return { success: false };\n    }\n  }\n\n  // Get current session\n  async getSession() {\n    try {\n      const { data, error } = await supabase.auth.getSession();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to authentication service. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get session' };\n    }\n  }\n\n  // Get user profile\n  async getUserProfile(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load user profile' };\n    }\n  }\n\n  // Update user profile\n  async updateUserProfile(userId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to update profile' };\n    }\n  }\n\n  // Reset password\n  async resetPassword(email) {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('AuthRetryableFetchError')) {\n        return { \n          success: false, \n          error: 'Cannot connect to authentication service. Your Supabase project may be paused or inactive. Please check your Supabase dashboard and resume your project if needed.' \n        };\n      }\n      return { success: false, error: 'Failed to send reset email' };\n    }\n  }\n\n  // Listen for auth state changes\n  onAuthStateChange(callback) {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n\n  // Check if user is admin\n  async isAdmin() {\n    try {\n      // Local dev admin shortcut\n      try {\n        if (typeof window !== 'undefined' && window.localStorage.getItem('dev_admin') === 'true') {\n          return true;\n        }\n      } catch {\n        // ignore\n      }\n\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        return false;\n      }\n\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('role')\n        .eq('id', user.id)\n        .single();\n\n      if (error || !data) {\n        return false;\n      }\n\n      return data.role === 'admin';\n    } catch {\n      return false;\n    }\n  }\n}\n\nconst authService = new AuthService();\nexport default authService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/blogService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 16,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 399,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 399,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [14351, 14405], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 575,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 575,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supabase from './supabase';\nimport { api } from './api/client';\nconst USE_API = import.meta.env.VITE_USE_API === 'true';\n\nclass BlogService {\n  // Full text / heuristic search (API first, fallback to supabase includes)\n  async searchPosts(q, options = {}) {\n    try {\n      if (!q || !q.trim()) return { success: true, data: [] };\n      if (USE_API) {\n        const data = await api.get('/blog/search', { q, limit: options.limit || 10 });\n        return { success: true, data: data || [] };\n      }\n      // Fallback: use existing published post ilike search\n      return await this.getPublishedPosts({ search: q, limit: options.limit || 10 });\n    } catch (e) {\n      return { success: false, error: 'Search failed' };\n    }\n  }\n  // Get all published blog posts (public access)\n  async getPublishedPosts(options = {}) {\n    try {\n      if (USE_API) {\n        const data = await api.get('/blog', { published: true, search: options.search, category: options.category, tag: options.tag, limit: options.limit });\n        return { success: true, data: data || [] };\n      }\n      let query = supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .eq('status', 'published');\n\n      // Apply search filter\n      if (options.search) {\n        query = query.or(`title.ilike.%${options.search}%,excerpt.ilike.%${options.search}%,content.ilike.%${options.search}%`);\n      }\n\n      // Apply category filter\n      if (options.category) {\n        query = query.eq('category', options.category);\n      }\n\n      // Apply tag filter\n      if (options.tag) {\n        query = query.contains('tags', [options.tag]);\n      }\n\n      // Apply sorting\n      switch (options.sortBy) {\n        case 'oldest':\n          query = query.order('published_at', { ascending: true });\n          break;\n        case 'most-liked':\n          query = query.order('like_count', { ascending: false });\n          break;\n        case 'most-commented':\n          query = query.order('comment_count', { ascending: false });\n          break;\n        case 'relevance':\n          query = query.order('view_count', { ascending: false });\n          break;\n        default: // newest\n          query = query.order('published_at', { ascending: false });\n      }\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit);\n      }\n\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n      }\n\n  const { data, error } = await query;\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load blog posts' };\n    }\n  }\n\n  // Get all blog posts (admin access)\n  async getAllPosts() {\n    try {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load blog posts' };\n    }\n  }\n\n  // Get featured blog posts\n  async getFeaturedPosts() {\n    try {\n      if (USE_API) {\n        const data = await api.get('/blog', { published: true, featured: true });\n        return { success: true, data: data || [] };\n      }\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .eq('status', 'published')\n        .eq('featured', true)\n        .order('published_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load featured posts' };\n    }\n  }\n\n  // Get single blog post by slug with comments\n  async getPostBySlug(slug) {\n    try {\n      if (USE_API) {\n        const data = await api.get('/blog/by-slug', { slug });\n        // Increment view count via API\n        if (data?.post_id) {\n          try { await this.incrementViewCount(data.post_id); } catch {}\n        }\n        return { success: true, data };\n      }\n      const { data, error } = await supabase.rpc('get_blog_post_with_comments', {\n        post_slug: slug\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      if (!data || data.length === 0) {\n        return { success: false, error: 'Blog post not found' };\n      }\n\n      const post = data[0];\n\n      // Increment view count\n      await this.incrementViewCount(post.post_id);\n\n      return { success: true, data: post };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load blog post' };\n    }\n  }\n\n  // Get single blog post by ID\n  async getPost(postId) {\n    try {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .eq('id', postId)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load blog post' };\n    }\n  }\n\n  // Create new blog post (admin only)\n  async createPost(postData) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      // Generate slug from title\n      const slug = (postData.slug && postData.slug.trim()) ? postData.slug.trim().toLowerCase()\n        .replace(/[^a-z0-9-]+/g, '-')\n        .replace(/(^-|-$)/g, '')\n        : postData.title.toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/blog', {\n          method: 'POST',\n          headers: { 'content-type': 'application/json', ...(token ? { Authorization: `Bearer ${token}` } : {}) },\n          body: JSON.stringify({ ...postData, slug })\n        });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .insert({\n          ...postData,\n          slug,\n          author_id: user.id,\n          published_at: postData.published_at ?? (postData.status === 'published' ? new Date().toISOString() : null)\n        })\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to create blog post' };\n    }\n  }\n\n  // Update blog post (admin only)\n  async updatePost(postId, updates) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      const updateData = {\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n\n      // Update slug if title changed\n      if (typeof updates.slug === 'string') {\n        updateData.slug = updates.slug.trim().toLowerCase()\n          .replace(/[^a-z0-9-]+/g, '-')\n          .replace(/(^-|-$)/g, '');\n      } else if (updates.title) {\n        updateData.slug = updates.title.toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-')\n          .replace(/(^-|-$)/g, '');\n      }\n\n      // Set published_at if status changed to published\n      if (typeof updates.published_at !== 'undefined') {\n        updateData.published_at = updates.published_at;\n      } else if (updates.status === 'published' && !updates.published_at) {\n        updateData.published_at = new Date().toISOString();\n      }\n\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/blog', window.location.origin);\n        url.searchParams.set('id', postId);\n        const res = await fetch(url.toString(), { method: 'PUT', headers: { 'content-type': 'application/json', ...(token ? { Authorization: `Bearer ${token}` } : {}) }, body: JSON.stringify(updateData) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .update(updateData)\n        .eq('id', postId)\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to update blog post' };\n    }\n  }\n\n  // Delete blog post (admin only)\n  async deletePost(postId) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/blog', window.location.origin);\n        url.searchParams.set('id', postId);\n        const res = await fetch(url.toString(), { method: 'DELETE', headers: { ...(token ? { Authorization: `Bearer ${token}` } : {}) } });\n        if (!res.ok) return { success: false, error: await res.text() };\n        return { success: true };\n      }\n      const { error } = await supabase\n        .from('blog_posts')\n        .delete()\n        .eq('id', postId);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to delete blog post' };\n    }\n  }\n\n  // Increment view count\n  async incrementViewCount(postId) {\n    try {\n      if (USE_API) {\n        await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/views/increment', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'blog_post', content_id: postId }) });\n        return;\n      }\n      await supabase.rpc('increment_view_count', { content_type: 'blog_post', content_id: postId });\n    } catch (error) {\n      // Silently fail view count increment\n      console.log('Failed to increment view count:', error);\n    }\n  }\n\n  // Toggle like for blog post\n  async toggleLike(postId, visitorIp, userAgent = '') {\n    try {\n      if (USE_API) {\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/likes/toggle', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'blog_post', content_id: postId, visitor_ip: visitorIp, user_agent: userAgent }) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, liked: !!data.liked };\n      }\n      const { data, error } = await supabase.rpc('toggle_like', { content_type: 'blog_post', content_id: postId, visitor_ip_addr: visitorIp, user_agent_str: userAgent });\n      if (error) return { success: false, error: error.message };\n      return { success: true, liked: data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to toggle like' };\n    }\n  }\n\n  // Check if user has liked post\n  async checkIfLiked(postId, visitorIp) {\n    try {\n      const { data, error } = await supabase\n        .from('likes')\n        .select('id')\n        .eq('blog_post_id', postId)\n        .eq('visitor_ip', visitorIp)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, liked: !!data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to check like status' };\n    }\n  }\n\n  // Get blog statistics\n  async getBlogStats() {\n    try {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select('status, view_count, like_count, comment_count')\n        .eq('status', 'published');\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      const stats = data?.reduce((acc, post) => {\n        acc.total += 1;\n        acc.totalViews += post.view_count || 0;\n        acc.totalLikes += post.like_count || 0;\n        acc.totalComments += post.comment_count || 0;\n        return acc;\n      }, { total: 0, totalViews: 0, totalLikes: 0, totalComments: 0 }) || { total: 0, totalViews: 0, totalLikes: 0, totalComments: 0 };\n\n      return { success: true, data: stats };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get blog statistics' };\n    }\n  }\n\n  // Get all categories\n  async getCategories() {\n    try {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select('category')\n        .eq('status', 'published')\n        .not('category', 'is', null);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Safely derive unique non-empty categories; avoid calling filter on undefined and remove redundant fallback\n      const categories = data\n        ? [...new Set(data.map(post => post.category).filter(Boolean))]\n        : [];\n\n      return { success: true, data: categories };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get categories' };\n    }\n  }\n\n  // Get all tags\n  async getTags() {\n    try {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select('tags')\n        .eq('status', 'published')\n        .not('tags', 'is', null);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      const allTags = data?.flatMap(post => post.tags || []) || [];\n      const uniqueTags = [...new Set(allTags)];\n\n      return { success: true, data: uniqueTags };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get tags' };\n    }\n  }\n\n  // Get related posts by slug (API only for now)\n  async getRelatedPosts(slug) {\n    try {\n      if (USE_API) {\n        const data = await api.get('/blog/related', { slug });\n        return { success: true, data: data || [] };\n      }\n      // Fallback heuristic client-side (Supabase mode): fetch published posts & filter by tag overlap\n      const published = await this.getPublishedPosts({ limit: 50 });\n      if (!published.success) return { success: false, error: 'Failed to fetch base posts' };\n      const target = published.data.find(p => p.slug === slug);\n      if (!target) return { success: true, data: [] };\n      const tags = target.tags || [];\n      const related = published.data\n        .filter(p => p.slug !== slug)\n        .map(p => ({\n          ...p,\n          __score: (p.tags || []).filter(t => tags.includes(t)).length\n        }))\n        .filter(p => p.__score > 0)\n        .sort((a, b) => b.__score - a.__score)\n        .slice(0, 3);\n      return { success: true, data: related };\n    } catch (e) {\n      return { success: false, error: 'Failed to load related posts' };\n    }\n  }\n}\n\nconst blogService = new BlogService();\nexport default blogService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/canonical.js",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 18,
        "column": 3,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [731, 769], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "// Frontend canonical URL helper.\n// Uses Vite-exposed env if available, else window.location.origin.\n// VITE_SITE_BASE_URL can be optionally supplied (mirrors SITE_BASE_URL on server).\nexport function getCanonicalUrl(pathOrUrl = '/') {\n  const rawBase = import.meta.env.VITE_SITE_BASE_URL || window.__SITE_BASE_URL__ || window.location.origin;\n  const base = rawBase.replace(/\\/$/, '');\n  if (/^https?:\\/\\//i.test(pathOrUrl)) return pathOrUrl.replace(/\\/$/, '');\n  const p = pathOrUrl.startsWith('/') ? pathOrUrl : '/' + pathOrUrl;\n  try {\n    return new URL(p, base).toString().replace(/\\/$/, '');\n  } catch {\n    return base + p;\n  }\n}\n\n// Optionally expose helper to window for debugging\nif (typeof window !== 'undefined') {\n  // eslint-disable-next-line no-console\n  if (!window.__CANONICAL_HELPER__) window.__CANONICAL_HELPER__ = getCanonicalUrl;\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/commentService.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 330,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 330,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [11285, 11333], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 342,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 342,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [11607, 11661], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 353,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 353,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supabase from './supabase';\nimport { api } from './api/client';\nconst USE_API = import.meta.env.VITE_USE_API === 'true';\n\nclass CommentService {\n  // Get comments for a blog post\n  async getComments(blogPostId) {\n    try {\n      if (USE_API) {\n        const data = await api.get('/comments', { postId: blogPostId });\n        return { success: true, data: data || [] };\n      }\n      const { data, error } = await supabase\n        .from('comments')\n        .select('*')\n        .eq('blog_post_id', blogPostId)\n        .eq('is_approved', true)\n        .is('parent_comment_id', null)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Get replies for each comment\n      const commentsWithReplies = await Promise.all(\n        (data || []).map(async (comment) => {\n          const replies = await this.getReplies(comment.id);\n          return {\n            ...comment,\n            replies: replies.success ? replies.data : []\n          };\n        })\n      );\n\n      return { success: true, data: commentsWithReplies };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load comments' };\n    }\n  }\n\n  // Get replies for a comment\n  async getReplies(parentCommentId) {\n    try {\n      const { data, error } = await supabase\n        .from('comments')\n        .select('*')\n        .eq('parent_comment_id', parentCommentId)\n        .eq('is_approved', true)\n        .order('created_at', { ascending: true });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load replies' };\n    }\n  }\n\n  // Create new comment (public access - no auth required)\n  async createComment(commentData) {\n    try {\n      if (USE_API) {\n        // API reads IP/user agent from headers\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/comments', {\n          method: 'POST',\n          headers: { 'content-type': 'application/json' },\n          body: JSON.stringify(commentData)\n        });\n        if (!res.ok) {\n          const msg = await res.text();\n          return { success: false, error: msg || 'Failed to create comment' };\n        }\n        const data = await res.json();\n        return { success: true, data };\n      }\n      // Get visitor IP and user agent for tracking\n      const visitorIp = await this.getVisitorIp();\n      const userAgent = navigator.userAgent || '';\n\n      const { data, error } = await supabase\n        .from('comments')\n        .insert({\n          ...commentData,\n          visitor_ip: visitorIp,\n          user_agent: userAgent,\n          is_approved: true // Auto-approve for now, could add moderation later\n        })\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Update comment count for blog post\n      await this.updateCommentCount(commentData.blog_post_id);\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to create comment' };\n    }\n  }\n\n  // Update comment (admin only)\n  async updateComment(commentId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('comments')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', commentId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to update comment' };\n    }\n  }\n\n  // Delete comment (admin only)\n  async deleteComment(commentId) {\n    try {\n      // Get comment details first to update blog post count\n      const { data: comment } = await supabase\n        .from('comments')\n        .select('blog_post_id')\n        .eq('id', commentId)\n        .single();\n\n      const { error } = await supabase\n        .from('comments')\n        .delete()\n        .eq('id', commentId);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Update comment count for blog post\n      if (comment?.blog_post_id) {\n        await this.updateCommentCount(comment.blog_post_id);\n      }\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to delete comment' };\n    }\n  }\n\n  // Toggle like for comment\n  async toggleLike(commentId, visitorIp, userAgent = '') {\n    try {\n      if (USE_API) {\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/likes/toggle', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'comment', content_id: commentId, visitor_ip: visitorIp, user_agent: userAgent }) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, liked: !!data.liked };\n      }\n      const { data, error } = await supabase.rpc('toggle_like', { content_type: 'comment', content_id: commentId, visitor_ip_addr: visitorIp, user_agent_str: userAgent });\n      if (error) {\n        return { success: false, error: error.message };\n      }\n      return { success: true, liked: data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to toggle like' };\n    }\n  }\n\n  // Check if user has liked comment\n  async checkIfLiked(commentId, visitorIp) {\n    try {\n      const { data, error } = await supabase\n        .from('likes')\n        .select('id')\n        .eq('comment_id', commentId)\n        .eq('visitor_ip', visitorIp)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, liked: !!data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to check like status' };\n    }\n  }\n\n  // Get all comments (admin only)\n  async getAllComments() {\n    try {\n      const { data, error } = await supabase\n        .from('comments')\n        .select(`\n          *,\n          blog_post:blog_posts(title, slug)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load comments' };\n    }\n  }\n\n  // Approve/disapprove comment (admin only)\n  async moderateComment(commentId, isApproved) {\n    try {\n      const { data, error } = await supabase\n        .from('comments')\n        .update({ \n          is_approved: isApproved,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', commentId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Update comment count for blog post\n      if (data?.blog_post_id) {\n        await this.updateCommentCount(data.blog_post_id);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to moderate comment' };\n    }\n  }\n\n  // Update comment count for blog post\n  async updateCommentCount(blogPostId) {\n    try {\n      const { data, error } = await supabase\n        .from('comments')\n        .select('id')\n        .eq('blog_post_id', blogPostId)\n        .eq('is_approved', true);\n\n      if (error) {\n        console.log('Failed to count comments:', error);\n        return;\n      }\n\n      const commentCount = data?.length || 0;\n\n      await supabase\n        .from('blog_posts')\n        .update({ comment_count: commentCount })\n        .eq('id', blogPostId);\n    } catch (error) {\n      // Silently fail comment count update\n      console.log('Failed to update comment count:', error);\n    }\n  }\n\n  // Get visitor IP (fallback method)\n  async getVisitorIp() {\n    try {\n      // Try to get IP from a public API\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip || 'unknown';\n    } catch (error) {\n      // Fallback to a simple hash of user agent and timestamp\n      const fallback = `${navigator.userAgent || 'unknown'}-${Date.now()}`;\n      return btoa(fallback).substring(0, 15);\n    }\n  }\n\n  // Subscribe to real-time comment updates\n  subscribeToComments(blogPostId, callback) {\n    const channel = supabase\n      .channel(`comments:${blogPostId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'comments',\n          filter: `blog_post_id=eq.${blogPostId}`\n        },\n        callback\n      )\n      .subscribe();\n\n    return channel;\n  }\n\n  // Unsubscribe from real-time updates\n  unsubscribeFromComments(channel) {\n    if (channel) {\n      supabase.removeChannel(channel);\n    }\n  }\n}\n\nconst commentService = new CommentService();\nexport default commentService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/diff.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/newsletterService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/projectService.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 291,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 291,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [10412, 10466], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supabase from './supabase';\nimport { api } from './api/client';\n\nconst USE_API = import.meta.env.VITE_USE_API === 'true';\n\nclass ProjectService {\n  // Get all published projects (public access)\n  async getPublishedProjects() {\n    try {\n      if (USE_API) {\n        const data = await api.get('/projects', { published: true });\n        return { success: true, data: data || [] };\n      } else {\n        const { data, error } = await supabase\n          .from('projects')\n          .select(`\n            *,\n            author:user_profiles(full_name, email)\n          `)\n          .eq('status', 'published')\n          .order('created_at', { ascending: false });\n\n        if (error) {\n          return { success: false, error: error.message };\n        }\n\n        return { success: true, data: data || [] };\n      }\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load projects' };\n    }\n  }\n\n  // Get all projects (admin access)\n  async getAllProjects() {\n    try {\n      const { data, error } = await supabase\n        .from('projects')\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load projects' };\n    }\n  }\n\n  // Get featured projects\n  async getFeaturedProjects() {\n    try {\n      if (USE_API) {\n        const data = await api.get('/projects', { published: true, featured: true });\n        return { success: true, data: data || [] };\n      } else {\n        const { data, error } = await supabase\n          .from('projects')\n          .select(`\n            *,\n            author:user_profiles(full_name, email)\n          `)\n          .eq('status', 'published')\n          .eq('featured', true)\n          .order('created_at', { ascending: false });\n\n        if (error) {\n          return { success: false, error: error.message };\n        }\n\n        return { success: true, data: data || [] };\n      }\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load featured projects' };\n    }\n  }\n\n  // Get single project by ID\n  async getProject(projectId) {\n    try {\n      if (USE_API) {\n        const data = await api.get('/projects/by-id', { id: projectId });\n        // Increment view count\n        try { await this.incrementViewCount(projectId); } catch {}\n        return { success: true, data };\n      } else {\n        const { data, error } = await supabase\n          .from('projects')\n          .select(`\n            *,\n            author:user_profiles(full_name, email)\n          `)\n          .eq('id', projectId)\n          .single();\n\n        if (error) {\n          return { success: false, error: error.message };\n        }\n\n        // Increment view count\n        await this.incrementViewCount(projectId);\n\n        return { success: true, data };\n      }\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load project' };\n    }\n  }\n\n  // Create new project (admin only)\n  async createProject(projectData) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/projects', {\n          method: 'POST',\n          headers: { 'content-type': 'application/json', ...(token ? { Authorization: `Bearer ${token}` } : {}) },\n          body: JSON.stringify(projectData)\n        });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      const { data, error } = await supabase\n        .from('projects')\n        .insert({\n          ...projectData,\n          author_id: user.id\n        })\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to create project' };\n    }\n  }\n\n  // Update project (admin only)\n  async updateProject(projectId, updates) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/projects', window.location.origin);\n        url.searchParams.set('id', projectId);\n        const res = await fetch(url.toString(), {\n          method: 'PUT',\n          headers: { 'content-type': 'application/json', ...(token ? { Authorization: `Bearer ${token}` } : {}) },\n          body: JSON.stringify(updates)\n        });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      const { data, error } = await supabase\n        .from('projects')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', projectId)\n        .select(`\n          *,\n          author:user_profiles(full_name, email)\n        `)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to update project' };\n    }\n  }\n\n  // Delete project (admin only)\n  async deleteProject(projectId) {\n    try {\n      const { data: { user }, error: authErr } = await supabase.auth.getUser();\n      if (!user || authErr) return { success: false, error: 'Authentication required' };\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/projects', window.location.origin);\n        url.searchParams.set('id', projectId);\n        const res = await fetch(url.toString(), {\n          method: 'DELETE',\n          headers: { ...(token ? { Authorization: `Bearer ${token}` } : {}) }\n        });\n        if (!res.ok) return { success: false, error: await res.text() };\n        return { success: true };\n      }\n      const { error } = await supabase\n        .from('projects')\n        .delete()\n        .eq('id', projectId);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to delete project' };\n    }\n  }\n\n  // Increment view count\n  async incrementViewCount(projectId) {\n    try {\n      if (USE_API) {\n        await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/views/increment', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'project', content_id: projectId }) });\n        return;\n      }\n      await supabase.rpc('increment_view_count', { content_type: 'project', content_id: projectId });\n    } catch (error) {\n      // Silently fail view count increment\n      console.log('Failed to increment view count:', error);\n    }\n  }\n\n  // Toggle like for project\n  async toggleLike(projectId, visitorIp, userAgent = '') {\n    try {\n      if (USE_API) {\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/likes/toggle', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'project', content_id: projectId, visitor_ip: visitorIp, user_agent: userAgent }) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, liked: !!data.liked };\n      }\n      const { data, error } = await supabase.rpc('toggle_like', { content_type: 'project', content_id: projectId, visitor_ip_addr: visitorIp, user_agent_str: userAgent });\n      if (error) return { success: false, error: error.message };\n      return { success: true, liked: data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to toggle like' };\n    }\n  }\n\n  // Check if user has liked project\n  async checkIfLiked(projectId, visitorIp) {\n    try {\n      const { data, error } = await supabase\n        .from('likes')\n        .select('id')\n        .eq('project_id', projectId)\n        .eq('visitor_ip', visitorIp)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, liked: !!data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to check like status' };\n    }\n  }\n\n  // Get project statistics\n  async getProjectStats() {\n    try {\n      const { data, error } = await supabase\n        .from('projects')\n        .select('status, view_count, like_count')\n        .eq('status', 'published');\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      const stats = data?.reduce((acc, project) => {\n        acc.total += 1;\n        acc.totalViews += project.view_count || 0;\n        acc.totalLikes += project.like_count || 0;\n        return acc;\n      }, { total: 0, totalViews: 0, totalLikes: 0 }) || { total: 0, totalViews: 0, totalLikes: 0 };\n\n      return { success: true, data: stats };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get project statistics' };\n    }\n  }\n}\n\nconst projectService = new ProjectService();\nexport default projectService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/publisherProgramService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/scriptLoader.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/settingsService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/slideService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'currentOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 234,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 25
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 300,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 300,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [10460, 10508], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement. Only these console methods are allowed: warn, error.",
        "line": 314,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "limited",
        "endLine": 314,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [11047, 11101], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supabase from './supabase';\nimport { api } from './api/client';\nconst USE_API = import.meta.env.VITE_USE_API === 'true';\n\nclass SlideService {\n  // Get all published slides (public access)\n  async getPublishedSlides() {\n    try {\n      if (USE_API) {\n        const data = await api.get('/slides', { published: true });\n        return { success: true, data: data || [] };\n      }\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .select('*')\n        .eq('status', 'published')\n        .order('display_order', { ascending: true });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load slides' };\n    }\n  }\n\n  // Get all slides (admin access)\n  async getAllSlides() {\n    try {\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .select('*')\n        .order('display_order', { ascending: true });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load slides' };\n    }\n  }\n\n  // Get single slide by ID\n  async getSlide(slideId) {\n    try {\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .select('*')\n        .eq('id', slideId)\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Increment view count\n      await this.incrementViewCount(slideId);\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to load slide' };\n    }\n  }\n\n  // Create new slide (admin only)\n  async createSlide(slideData) {\n    try {\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        if (!token) return { success: false, error: 'Authentication required' };\n        const res = await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/slides', { method: 'POST', headers: { 'content-type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify(slideData) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      // Get the next display order\n      const { data: maxOrderData } = await supabase\n        .from('hero_slides')\n        .select('display_order')\n        .order('display_order', { ascending: false })\n        .limit(1);\n\n      const nextOrder = (maxOrderData?.[0]?.display_order || 0) + 1;\n\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .insert({\n          ...slideData,\n          display_order: slideData.display_order || nextOrder\n        })\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to create slide' };\n    }\n  }\n\n  // Update slide (admin only)\n  async updateSlide(slideId, updates) {\n    try {\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        if (!token) return { success: false, error: 'Authentication required' };\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/slides', window.location.origin);\n        url.searchParams.set('id', slideId);\n        const res = await fetch(url.toString(), { method: 'PUT', headers: { 'content-type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify(updates) });\n        if (!res.ok) return { success: false, error: await res.text() };\n        const data = await res.json();\n        return { success: true, data };\n      }\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', slideId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to update slide' };\n    }\n  }\n\n  // Delete slide (admin only)\n  async deleteSlide(slideId) {\n    try {\n      if (USE_API) {\n        const token = (await supabase.auth.getSession()).data.session?.access_token;\n        if (!token) return { success: false, error: 'Authentication required' };\n        const url = new URL((import.meta.env.VITE_API_BASE_URL || '/api') + '/slides', window.location.origin);\n        url.searchParams.set('id', slideId);\n        const res = await fetch(url.toString(), { method: 'DELETE', headers: { Authorization: `Bearer ${token}` } });\n        if (!res.ok) return { success: false, error: await res.text() };\n        // Reorder not necessary server-side returns new order; client can ignore\n        return { success: true };\n      }\n      const { error } = await supabase\n        .from('hero_slides')\n        .delete()\n        .eq('id', slideId);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Reorder remaining slides\n      await this.reorderSlides();\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to delete slide' };\n    }\n  }\n\n  // Reorder slide (admin only)\n  async updateSlideOrder(slideId, newOrder) {\n    try {\n      // Get current slide\n      const { data: currentSlide } = await supabase\n        .from('hero_slides')\n        .select('display_order')\n        .eq('id', slideId)\n        .single();\n\n      if (!currentSlide) {\n        return { success: false, error: 'Slide not found' };\n      }\n\n      const currentOrder = currentSlide.display_order;\n\n      // Get all slides to reorder\n      const { data: allSlides } = await supabase\n        .from('hero_slides')\n        .select('id, display_order')\n        .order('display_order', { ascending: true });\n\n      if (!allSlides) {\n        return { success: false, error: 'Failed to get slides for reordering' };\n      }\n\n      // Create new order array\n      const reorderedSlides = allSlides.filter(slide => slide.id !== slideId);\n      reorderedSlides.splice(newOrder - 1, 0, { id: slideId, display_order: newOrder });\n\n      // Update all slides with new orders\n      const updates = reorderedSlides.map((slide, index) => ({\n        id: slide.id,\n        display_order: index + 1\n      }));\n\n      for (const update of updates) {\n        await supabase\n          .from('hero_slides')\n          .update({ \n            display_order: update.display_order,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', update.id);\n      }\n\n      return { success: true };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to reorder slide' };\n    }\n  }\n\n  // Reorder all slides to fix gaps\n  async reorderSlides() {\n    try {\n      const { data: slides } = await supabase\n        .from('hero_slides')\n        .select('id')\n        .order('display_order', { ascending: true });\n\n      if (!slides) return;\n\n      for (let i = 0; i < slides.length; i++) {\n        await supabase\n          .from('hero_slides')\n          .update({ \n            display_order: i + 1,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', slides[i].id);\n      }\n    } catch (error) {\n      console.log('Failed to reorder slides:', error);\n    }\n  }\n\n  // Increment view count\n  async incrementViewCount(slideId) {\n    try {\n      if (USE_API) {\n        await fetch((import.meta.env.VITE_API_BASE_URL || '/api') + '/views/increment', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ content_type: 'hero_slide', content_id: slideId }) });\n        return;\n      }\n      await supabase.rpc('increment_view_count', { content_type: 'hero_slide', content_id: slideId });\n    } catch (error) {\n      // Silently fail view count increment\n      console.log('Failed to increment view count:', error);\n    }\n  }\n\n  // Get slide statistics\n  async getSlideStats() {\n    try {\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .select('status, view_count')\n        .eq('status', 'published');\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      const stats = data?.reduce((acc, slide) => {\n        acc.total += 1;\n        acc.totalViews += slide.view_count || 0;\n        return acc;\n      }, { total: 0, totalViews: 0 }) || { total: 0, totalViews: 0 };\n\n      return { success: true, data: stats };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to get slide statistics' };\n    }\n  }\n\n  // Bulk update slide status (admin only)\n  async bulkUpdateStatus(slideIds, status) {\n    try {\n      const { data, error } = await supabase\n        .from('hero_slides')\n        .update({ \n          status,\n          updated_at: new Date().toISOString()\n        })\n        .in('id', slideIds)\n        .select();\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      if (error?.message?.includes('Failed to fetch') || \n          error?.message?.includes('NetworkError') ||\n          error?.name === 'TypeError' && error?.message?.includes('fetch')) {\n        return { \n          success: false, \n          error: 'Cannot connect to database. Your Supabase project may be paused or deleted. Please visit your Supabase dashboard to check project status.' \n        };\n      }\n      return { success: false, error: 'Failed to bulk update slides' };\n    }\n  }\n}\n\nconst slideService = new SlideService();\nexport default slideService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/storageService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'onProgress' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 17,
        "column": 77,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onProgress" },
            "fix": { "range": [554, 566], "text": "" },
            "desc": "Remove unused variable 'onProgress'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from './supabase';\n\n// Buckets expected: 'media', 'logos'. Ensure they exist in Supabase Storage.\nconst DEFAULT_BUCKET = 'media';\n\nconst randomKey = (prefix = '') => {\n  const rand = Math.random().toString(36).slice(2, 10);\n  const time = Date.now();\n  return `${prefix}${prefix ? '/' : ''}${time}-${rand}`;\n};\n\nconst getPublicUrl = (bucket, path) => {\n  const { data } = supabase.storage.from(bucket).getPublicUrl(path);\n  return data?.publicUrl || null;\n};\n\nconst uploadFile = async (file, { bucket = DEFAULT_BUCKET, pathPrefix = '', onProgress } = {}) => {\n  if (!file) return { success: false, error: 'No file provided' };\n  try {\n    const ext = file.name.split('.').pop()?.toLowerCase() || 'bin';\n    const key = randomKey(pathPrefix) + `.${ext}`;\n    const uploader = supabase.storage.from(bucket);\n    const { data, error } = await uploader.upload(key, file, {\n      cacheControl: '3600',\n      upsert: false,\n    });\n    if (error) return { success: false, error: error.message };\n    const url = getPublicUrl(bucket, data.path);\n    return { success: true, data: { path: data.path, url, bucket } };\n  } catch (e) {\n    return { success: false, error: e?.message || 'Upload failed' };\n  }\n};\n\nconst removeFile = async (path, bucket = DEFAULT_BUCKET) => {\n  try {\n    const { error } = await supabase.storage.from(bucket).remove([path]);\n    if (error) return { success: false, error: error.message };\n    return { success: true };\n  } catch (e) {\n    return { success: false, error: e?.message || 'Delete failed' };\n  }\n};\n\nconst storageService = { uploadFile, getPublicUrl, removeFile };\nexport default storageService;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/supabase.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/src/utils/validation/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/admin.moderation.ui.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/api.integration.test.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'http' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "http" },
            "fix": { "range": [54, 64], "text": "" },
            "desc": "Remove unused variable 'http'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'http' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 12,
        "fix": { "range": [47, 73], "text": "\n" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "http" },
            "fix": { "range": [54, 64], "text": "" },
            "desc": "Remove unused variable 'http'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import { describe, it, expect } from 'vitest';\nimport http from 'http';\n\n// Lightweight fetch wrapper using global fetch available in Vitest (jsdom)\n\nconst BASE = 'http://localhost:5000'; // assume dev server started separately if needed\n\ndescribe('API integration (shallow)', () => {\n  it('blog list returns ETag and supports 304', async () => {\n    // Skip if server not running\n    let res; try { res = await fetch(BASE + '/api/blog?limit=1'); } catch { return; }\n    expect(res.status).toBe(200);\n    const etag = res.headers.get('etag');\n    expect(etag).toBeTruthy();\n    const res2 = await fetch(BASE + '/api/blog?limit=1', { headers: { 'If-None-Match': etag } });\n    // If server respects ETag it should return 304\n    expect([200,304]).toContain(res2.status); // allow 200 if cold env\n  });\n\n  it('settings returns camelCase keys', async () => {\n    let res; try { res = await fetch(BASE + '/api/settings'); } catch { return; }\n    if (res.status !== 200) return; // environment may not have DB\n    const data = await res.json();\n    if (Array.isArray(data)) return; // guard unexpected shape\n    // spot check a few keys\n    if (data.siteTitle) {\n      expect(Object.prototype.hasOwnProperty.call(data, 'siteTitle')).toBe(true);\n      expect(Object.prototype.hasOwnProperty.call(data, 'site_title')).toBe(false);\n    }\n  });\n\n  it('auto extracts featured image from first img tag on blog create (if permitted)', async () => {\n    let reachable = true; try { await fetch(BASE + '/api/blog?limit=1'); } catch { reachable = false; }\n    if (!reachable) return;\n    const html = '<p>Intro</p><img src=\"https://example.com/auto-featured.jpg\" alt=\"x\" />';\n    const resp = await fetch(BASE + '/api/blog', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title: 'Auto Featured Test', content: html })\n    });\n    if (resp.status === 403) return; // no admin session\n    if (resp.status !== 201) return; // skip on failure\n    const data = await resp.json();\n    if (data.content && data.content.includes('auto-featured.jpg')) {\n      // Only assert if our marker image was preserved in content\n      expect(data.featured_image).toBe('https://example.com/auto-featured.jpg');\n    }\n  });\n});\n\ndescribe('Feature flags endpoint (if available)', () => {\n  it('returns an array of flags with expected shape', async () => {\n    let reachable = true; try { await fetch(BASE + '/api/settings'); } catch { reachable = false; }\n    if (!reachable) return;\n    let res; try { res = await fetch(BASE + '/api/settings/features'); } catch { return; }\n    if (res.status !== 200) return; // skip if not wired\n    const data = await res.json();\n    if (!Array.isArray(data)) return;\n    if (data.length) {\n      expect(data[0]).toHaveProperty('flagKey');\n      expect(data[0]).toHaveProperty('enabled');\n    }\n  });\n});\n\ndescribe('Blog revisions workflow (smoke)', () => {\n  it('captures a revision on update and can list revisions', async () => {\n    let baseOk = true;\n    try { await fetch(BASE + '/api/blog?limit=1'); } catch { baseOk = false; }\n    if (!baseOk) return; // server not running\n\n    // Create a draft post (requires admin; if forbidden skip silently)\n    const draftResp = await fetch(BASE + '/api/blog', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title: 'Rev Test Post', status: 'draft', content: 'First version' })\n    });\n    if (draftResp.status === 403) return; // no admin session in test env\n    if (draftResp.status !== 201) return; // cannot proceed\n    const draft = await draftResp.json();\n\n    // Update the post -> should create a revision of original\n    const updateResp = await fetch(BASE + `/api/blog?id=${draft.id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ content: 'Second version', title: 'Rev Test Post Updated' })\n    });\n    if (updateResp.status !== 200) return; // skip if update blocked\n\n    // Fetch revisions\n    const revListResp = await fetch(BASE + `/api/blog/revisions?postId=${draft.id}&limit=5`);\n    if (revListResp.status !== 200) return; // revisions endpoint may require DB state\n    const revs = await revListResp.json();\n    expect(Array.isArray(revs)).toBe(true);\n    if (revs.length) {\n      expect(revs[0]).toHaveProperty('id');\n      expect(revs[0]).toHaveProperty('blog_post_id');\n    }\n  });\n});\n\ndescribe('Related posts (heuristic)', () => {\n  it('returns at most 3 related posts or empty array', async () => {\n    let reachable = true; try { await fetch(BASE + '/api/blog?limit=1'); } catch { reachable = false; }\n    if (!reachable) return;\n    const baseList = await fetch(BASE + '/api/blog?published=true&limit=1');\n    if (baseList.status !== 200) return;\n    const posts = await baseList.json();\n    if (!Array.isArray(posts) || !posts.length) return; // no published posts to test\n    const slug = posts[0].slug;\n    if (!slug) return;\n    const relRes = await fetch(BASE + `/api/blog/related?slug=${encodeURIComponent(slug)}`);\n    if (relRes.status !== 200) return;\n    const related = await relRes.json();\n    expect(Array.isArray(related)).toBe(true);\n    expect(related.length).toBeLessThanOrEqual(3);\n    if (related.length) {\n      expect(related[0]).toHaveProperty('slug');\n      expect(related[0]).toHaveProperty('title');\n    }\n  });\n});\n\ndescribe('Full-text search endpoint (if available)', () => {\n  it('returns ranked results or empty array', async () => {\n    let reachable = true; try { await fetch(BASE + '/api/blog?limit=1'); } catch { reachable = false; }\n    if (!reachable) return;\n    let res; try { res = await fetch(BASE + '/api/blog/search?q=hello'); } catch { return; }\n    if (![200,400].includes(res.status)) return; // skip if not wired\n    if (res.status === 200) {\n      const data = await res.json();\n      expect(Array.isArray(data)).toBe(true);\n      if (data.length) {\n        expect(data[0]).toHaveProperty('slug');\n        expect(data[0]).toHaveProperty('title');\n      }\n    }\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/newsletter.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/ogmeta.perpost.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/ogmeta.perpost.test.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'container' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "container" },
            "fix": { "range": [631, 857], "text": "" },
            "desc": "Remove unused variable 'container'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { describe, it, expect, vi } from \"vitest\";\nimport { render, waitFor } from \"@testing-library/react\";\n\n// Mock settingsService to control returned settings and avoid network\nvi.mock(\"../src/utils/settingsService.js\", () => ({\n  default: {\n    getSettings: async () => ({\n      success: true,\n      data: {\n        site_title: \"SiteTitle\",\n        site_description: \"Desc\",\n        og_default_image_url: \"/assets/images/mkraft.png\",\n        logo_url: \"/assets/images/mklogo.png\",\n      },\n    }),\n  },\n}));\n\ndescribe(\"OGMeta per-post override\", () => {\n  it(\"prefers override image over settings fallback\", async () => {\n    const { container } = render(\n      <HelmetProvider>\n        <OGMeta\n          title=\"Example\"\n          description=\"Desc\"\n          image=\"https://cdn.example.com/post-specific.jpg\"\n        />\n      </HelmetProvider>,\n    );\n    await waitFor(() => {\n      const ogImage = document.head.querySelector('meta[property=\"og:image\"]');\n      expect(ogImage).not.toBeNull();\n      expect(ogImage.getAttribute(\"content\")).toBe(\n        \"https://cdn.example.com/post-specific.jpg\",\n      );\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/profile.enhancements.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/publisher.approval.flow.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/sanitize.video.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/sitemap.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/user.moderation.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/test/validation.test.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'EMAIL_REGEX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 114,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 125,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "EMAIL_REGEX" },
            "fix": { "range": [158, 171], "text": "" },
            "desc": "Remove unused variable 'EMAIL_REGEX'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'EMAIL_REGEX' is defined but never used.",
        "line": 2,
        "column": 114,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 125,
        "fix": { "range": [159, 172], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "EMAIL_REGEX" },
            "fix": { "range": [158, 171], "text": "" },
            "desc": "Remove unused variable 'EMAIL_REGEX'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 1,
        "message": "'URL_REGEX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 127,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 136,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "URL_REGEX" },
            "fix": { "range": [171, 182], "text": "" },
            "desc": "Remove unused variable 'URL_REGEX'."
          }
        ]
      },
      {
        "ruleId": "unused-imports/no-unused-imports",
        "severity": 1,
        "message": "'URL_REGEX' is defined but never used.",
        "line": 2,
        "column": 127,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 136,
        "fix": { "range": [171, 182], "text": "" },
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "URL_REGEX" },
            "fix": { "range": [171, 182], "text": "" },
            "desc": "Remove unused variable 'URL_REGEX'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "import { describe, it, expect } from 'vitest';\nimport { isValidUrl, isValidEmail, validateProject, validateSlide, validateBlog, validateNewsletter, SLUG_REGEX, EMAIL_REGEX, URL_REGEX } from '../src/utils/validation/index.js';\n\ndescribe('validation helpers', () => {\n  it('isValidUrl accepts http/https or empty', () => {\n    expect(isValidUrl('')).toBe(true);\n    expect(isValidUrl('https://example.com')).toBe(true);\n    expect(isValidUrl('http://example.com')).toBe(true);\n    expect(isValidUrl('ftp://example.com')).toBe(false);\n    expect(isValidUrl('example.com')).toBe(false);\n  });\n\n  it('validateProject flags missing title and bad URLs', () => {\n    const errs1 = validateProject({});\n    expect(errs1.title).toBeTruthy();\n\n    const errs2 = validateProject({ title: 'Ok', image: 'notaurl' });\n    expect(errs2.image).toBeTruthy();\n\n    const errs3 = validateProject({ title: 'Ok', image: 'https://img', github_url: 'https://github.com', live_url: '' });\n    expect(errs3.image).toBeFalsy();\n    expect(Object.keys(errs3).length).toBe(0);\n  });\n\n  it('validateSlide basics', () => {\n    const errs1 = validateSlide({});\n    expect(errs1.title).toBeTruthy();\n\n    const errs2 = validateSlide({ title: 'Slide', backgroundImage: 'http://ok', ctaLink: 'notaurl', duration: 0, order: 0 });\n    expect(errs2.ctaLink).toBeTruthy();\n    expect(errs2.duration).toBeTruthy();\n    expect(errs2.order).toBeTruthy();\n\n    const errs3 = validateSlide({ title: 'S', backgroundImage: 'https://ok', ctaLink: 'https://ok', duration: 5, order: 1 });\n    expect(Object.keys(errs3).length).toBe(0);\n  });\n\n  it('validateBlog basics', () => {\n    const errs1 = validateBlog({});\n    expect(errs1.title).toBeTruthy();\n\n    const errs2 = validateBlog({ title: 'T', status: 'published', content: '' });\n    expect(errs2.content).toBeTruthy();\n\n    const errs3 = validateBlog({ title: 'T', status: 'draft', featuredImage: 'notaurl', readTime: 0 });\n    expect(errs3.featuredImage).toBeTruthy();\n    expect(errs3.readTime).toBeTruthy();\n\n    const errs4 = validateBlog({ title: 'T', status: 'draft', content: 'x', featuredImage: 'https://ok', readTime: 3 });\n    expect(Object.keys(errs4).length).toBe(0);\n  });\n\n  it('validateBlog slug and meta', () => {\n    expect(SLUG_REGEX.test('valid-slug-123')).toBe(true);\n    expect(SLUG_REGEX.test('Invalid Slug')).toBe(false);\n    let errs = validateBlog({ title: 'T', slug: 'Invalid Slug' });\n    expect(errs.slug).toBeTruthy();\n    const longTitle = 'x'.repeat(71);\n    errs = validateBlog({ title: 'T', metaTitle: longTitle });\n    expect(errs.metaTitle).toBeTruthy();\n    const longDesc = 'x'.repeat(161);\n    errs = validateBlog({ title: 'T', metaDescription: longDesc });\n    expect(errs.metaDescription).toBeTruthy();\n  });\n\n  it('validateNewsletter validates email and name', () => {\n    const errs1 = validateNewsletter({});\n    expect(errs1.email).toBeTruthy();\n\n    const errs2 = validateNewsletter({ email: 'invalid-email' });\n    expect(errs2.email).toBeTruthy();\n\n    const errs3 = validateNewsletter({ email: 'valid@example.com' });\n    expect(Object.keys(errs3).length).toBe(0);\n\n    const longName = 'x'.repeat(101);\n    const errs4 = validateNewsletter({ email: 'valid@example.com', name: longName });\n    expect(errs4.name).toBeTruthy();\n  });\n\n  it('isValidEmail validates email format', () => {\n    expect(isValidEmail('valid@example.com')).toBe(true);\n    expect(isValidEmail('user.name+tag@domain.co.uk')).toBe(true);\n    expect(isValidEmail('invalid-email')).toBe(false);\n    expect(isValidEmail('email@')).toBe(false);\n    expect(isValidEmail('@domain.com')).toBe(false);\n    expect(isValidEmail('')).toBe(false);\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/vite.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/mkraft/vitest.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
